<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-07-21T15:07:37.585Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SCM-Study</title>
    <link href="http://example.com/2023/07/15/MCU-Study/"/>
    <id>http://example.com/2023/07/15/MCU-Study/</id>
    <published>2023-07-15T13:33:22.000Z</published>
    <updated>2023-07-21T15:07:37.585Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Contents</strong></p><p>[TOC]</p><h1 id="Part1–初识MCU"><a href="#Part1–初识MCU" class="headerlink" title="Part1–初识MCU"></a>Part1–初识MCU</h1><h2 id="一、Preparation"><a href="#一、Preparation" class="headerlink" title="一、Preparation"></a>一、Preparation</h2><h3 id="1-Two-applications"><a href="#1-Two-applications" class="headerlink" title="(1) Two applications"></a>(1) Two applications</h3><h4 id="Keil5（编写程序）"><a href="#Keil5（编写程序）" class="headerlink" title="Keil5（编写程序）"></a>Keil5（编写程序）</h4><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/SCM-Study/image-20230718114300607.png"                      alt="image-20230718114300607"                ></p><p>(1)从官网下载Keil5</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/SCM-Study/image-20230718114530122.png"                      alt="image-20230718114530122"                ></p><p>(2)从License Magement中复制你的CID并将其输入keygen中激活</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/SCM-Study/image-20230718114934737.png"                      alt="image-20230718114934737"                ></p><table><thead><tr><th>注意，以管理员身份运行程序，否则权限不够。  AND    在打开Keygen或者下载前，关闭防火墙，否则有一定概率误杀</th></tr></thead></table><p>(3)点击Generate，完成激活</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/SCM-Study/image-20230718115826337.png"                      alt="image-20230718115826337"                ></p><h4 id="Stc-isp（下载程序）"><a href="#Stc-isp（下载程序）" class="headerlink" title="Stc-isp（下载程序）"></a>Stc-isp（下载程序）</h4><p>这个自行搜索下载</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/SCM-Study/image-20230718114336762.png"                      alt="image-20230718114336762"                ></p><p>在成功下载之后，一般来说无法直接读取或识别外接的C51，这个时候需要安装相应的driver：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="SCM-Study/image-20230719185302109.png"                      alt="image-20230719185302109" style="zoom:67%;"                 ><p>这时候如果在任务管理器中能够能看到USB-SERIAL，说明驱动安装成功，C51已被读取。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="SCM-Study/image-20230719185517170.png"                      alt="image-20230719185517170" style="zoom: 67%;"                 ><h2 id="二、About-MCU"><a href="#二、About-MCU" class="headerlink" title="二、About  MCU"></a>二、About  MCU</h2><h3 id="1-Brief-introduction"><a href="#1-Brief-introduction" class="headerlink" title="(1) Brief introduction"></a>(1) Brief introduction</h3><p>单片机，英文Micro ControIIer Unit ， 简称MCU</p><ol><li>内部集成了CPU 、RAM 、ROM 、定时器、中断系统、通讯接口等一系列电脑的常用硬件功能</li><li>单片机的任务是信息采集（ 依靠传感器） 、处理（ 依靠CPU) 和硬件设备（ 例如电机， LED 等） 的控制</li><li>单片机跟计算机相比， 单片机算是一个袖珍版计算机， 一个芯片就能构成完整的计算机系统。但在性能上， 与计算机相差甚远， 但单片机成本低、体积小、结构简单， 在生活和工业控制领域大有所用。同时， 学习使用单片机是了解计算机原理与结构的最佳选择</li></ol><p>51单片机：指80年代Intel开发的8051内核的单片机的统称。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230720112738741.png"                      alt="image-20230720112738741" style="zoom:50%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230720111116576.png"                      alt="image-20230720111116576" style="zoom: 50%;"                 ><p>*<code>类比电脑内存条</code>*：<strong>RAM</strong>（Random Access Memory，<strong>随机存取存储器</strong>）是计算机中的一种主要存储设备，用于临时存储和快速访问数据。它是计算机的一个重要组成部分，用于存储正在执行的程序和数据。</p><p>RAM与计算机的硬盘驱动器（或固态驱动器）不同，后者用于长期存储数据，而RAM是一种易失性存储器，意味着其存储的数据在断电或重新启动后会被清除。这是因为RAM是基于电子器件和电路构建的，需要持续的电源供应来保持存储的数据。</p><p>RAM被分为主存储器（Main Memory）和高速缓存（Cache Memory）。主存储器是计算机直接访问的存储区域，用于存储正在运行的程序和数据。它的存取速度比硬盘驱动器等次要存储设备要快得多。高速缓存是位于CPU内部的一种更快速的存储器，用于临时存储处理器频繁访问的数据，以提高计算机的性能。</p><p>RAM的容量通常以兆字节（MB）或千兆字节（GB）进行衡量。较大容量的RAM可以容纳更多的程序和数据，从而提供更好的性能和多任务处理能力。计算机的RAM容量可以根据需要进行扩展或升级。</p><p>总之，RAM是一种临时存储设备，用于存储正在执行的程序和数据，提供计算机的实时访问能力。它在计算机的性能和多任务处理方面起着重要的作用。</p><p>*<code>类比电脑硬盘</code>*：<strong>ROM</strong>（Read-Only Memory）是一种计算机芯片或存储设备中的一种存储器类型。与随机访问存储器（RAM）相比，ROM在断电后能够保持其存储的数据不变，因此也被称为非易失性存储器。ROM的数据一般是由制造厂商在生产过程中预先写入的，并且用户无法对其进行修改。这意味着ROM中存储的内容是只读的，无法被擦除或重写。</p><p>ROM有多种不同类型，包括：</p><ol><li>PROM（Programmable Read-Only Memory，可编程只读存储器）：这种ROM允许用户在一次性编程之前将数据写入其中。一旦编程完成，数据将永久固化在芯片中，不可更改。</li><li>EPROM（Erasable Programmable Read-Only Memory，可擦除可编程只读存储器）：这种ROM允许用户通过使用特定设备将其数据擦除，然后再次编程。擦除通常通过使用紫外线光线或电子擦除器来进行。</li><li>EEPROM（Electrically Erasable Programmable Read-Only Memory，电可擦除可编程只读存储器）：EEPROM与EPROM类似，但是擦除操作可以通过电源供电而不需要其他特殊设备。EEPROM的擦除和编程可以在特定的操作条件下进行。</li></ol><p>ROM的应用非常广泛，它被用于存储启动引导程序、固件、芯片内的固定数据以及其他一些需要在断电后保持不变的数据。有些游戏机、手机和电脑主板中也使用ROM存储固件或操作系统。总之，ROM在计算机和电子设备中起到了重要的作用，并且因其稳定性和数据不易丢失的特点而受到广泛使用。</p><h3 id="2-Application-field"><a href="#2-Application-field" class="headerlink" title="(2) Application field"></a>(2) Application field</h3><p>单片机的使用领域已十分广泛， 如智能仪表、实时工控、通讯设备、导航系统、家用电器等。各种产品一旦用上了单片机， 就能起到使<br>产品升级换代的功效， 常在产品名称前冠以形容词——“智能型”，如智能型洗衣机等。</p><h3 id="3-Naming-rules"><a href="#3-Naming-rules" class="headerlink" title="(3) Naming rules"></a>(3) Naming rules</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230720113130356.png"                      class="" title="image-20230720113130356"                ><h3 id="4-Structure"><a href="#4-Structure" class="headerlink" title="(4) Structure"></a>(4) Structure</h3><p><strong>单片机内部结构图：</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230720190656299.png"                      class="" title="image-20230720190656299"                ><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230720190715829.png"                      class="" title="image-20230720190715829"                ><p><strong>单片机管脚图</strong>：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230720190347143.png"                      class="" title="image-20230720190347143"                ><p>例如 Vcc代表 + 极，Gnd代表 - 极</p><p><strong>单片机的最小系统：</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230720191015968.png"                      class="" title="image-20230720191015968"                ><p>电容——过滤因为电源不稳定产生的电磁波</p><p>复位电路（中间的）——复位电路通常用来清除存储器中的数据、关闭所有开关和重置相关的逻辑电路。它可以在系统启动时，或在错误发生时，通过将相关电路重新初始化，确保系统处于可控状态。</p><p>晶振（左下角）——用于时钟电路和振荡电路中，以稳定电子设备的工作频率。晶振的主要原理是利用压电效应，在晶体振荡器中产生稳定的振荡信号。推动程序往下进行的关键。</p><h1 id="Part2–编写MCU"><a href="#Part2–编写MCU" class="headerlink" title="Part2–编写MCU"></a>Part2–编写MCU</h1><h3 id="一、Light-up-LED"><a href="#一、Light-up-LED" class="headerlink" title="一、Light up LED"></a>一、Light up LED</h3><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230721205122034.png"                      class="" title="image-20230721205122034"                > <p>LED，全称为Light Emitting Diode（发光二极管），是一种固体电子器件，可以将电能直接转化为光能。相对于传统的光源，如白炽灯和荧光灯，LED具有更高的能效、更长的使用寿命和更大的可靠性。</p><p>LED的工作原理是基于半导体材料的特性。当电流通过LED时，电子和空穴在半导体材料中重新组合，产生能量释放，从而产生可见光。不同半导体材料的能带结构决定了LED发出的光的颜色。</p><p>LED具有许多优点。首先，LED保存能量且效率高，相比传统光源，LED产生的光功率更大，但消耗的电能更少。其次，LED寿命长，通常可以达到数万个小时，远远超过传统光源。此外，LED具有快速开启和关闭的特性，并且可以根据需要调节亮度，因此被广泛应用于照明和显示领域。</p><p>LED在各个领域有广泛的应用。在照明领域，LED被用于家庭照明、商业照明和街道照明等。由于其高效节能的特性，LED也被用于太阳能照明和绿色建筑项目中。在电子显示领域，LED用于制造各种显示屏，如电视、计算机显示器和手机屏幕。此外，LED还常用于车辆照明、室内装饰、电子设备指示灯等。</p><h4 id="1-点亮一个LED"><a href="#1-点亮一个LED" class="headerlink" title="(1)点亮一个LED"></a>(1)点亮一个LED</h4><p>首先观察MCU里的LED模块</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721205338387.png"                      alt="image-20230721205338387" style="zoom: 50%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721205759157.png"                      alt="image-20230721205759157" style="zoom: 80%;"                 ></p><p>右边图片中的RP9、RP10是两个电阻                                                                          102&#x3D;1k(10*10^2)元器件上的标号以此类推</p><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721223227335.png"                      alt="image-20230721223227335" style="zoom: 50%;"                 ><p>P2口下的寄存器控制LED：       1–5V  不亮              0–0V  亮</p><hr><ol><li>创建一个Project，在列表里的Atmel下选择AT89C52</li></ol><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721203045992.png"                      alt="image-20230721203045992" style="zoom: 67%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721203148960.png"                      alt="image-20230721203148960" style="zoom:67%;"                 ><ol start="2"><li>在该文件夹下创建一个C的文件，以便进一步编写程序</li></ol><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230721203329446.png"                      class="" title="image-20230721203329446"                ><p> 3.编写控制LED的代码</p><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721224514767.png"                      alt="image-20230721224514767" style="zoom: 67%;"                 ><p>4.将文件保存为hex格式，以便烧入</p><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721225402141.png"                      alt="image-20230721225402141" style="zoom:80%;"                 ><p>5.用stc-isp将程序烧入进MCU中，尝试运行</p><p>选择相应的单片机型号与串口号，并打开已写好的程序文件</p><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721224812379.png"                      alt="image-20230721224812379" style="zoom:80%;"                 ><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/15/MCU-Study/image-20230721230325802.png"                      class="" title="image-20230721230325802"                ><p>然后点击下载，重启单片机，发现成功点亮LED</p><img                       lazyload                     src="/images/loading.svg"                     data-src="MCU-Study/image-20230721230505945.png"                      alt="image-20230721230505945" style="zoom:67%;"                 >]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Part1–初识MCU&quot;&gt;&lt;a href=&quot;#Part1–初识MCU&quot; class=&quot;headerlink&quot; title=&quot;Part1–初识MCU&quot;&gt;&lt;/a&gt;Part1–初</summary>
      
    
    
    
    
    <category term="MCU" scheme="http://example.com/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>Theorem</title>
    <link href="http://example.com/2023/07/08/Theorem/"/>
    <id>http://example.com/2023/07/08/Theorem/</id>
    <published>2023-07-08T07:49:51.000Z</published>
    <updated>2023-07-15T13:54:47.695Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Theorem-in-Crypto"><a href="#Theorem-in-Crypto" class="headerlink" title="Theorem in Crypto"></a>Theorem in Crypto</h1><h2 id="一、Fermat’s-Little-Theorem（费马小定理）"><a href="#一、Fermat’s-Little-Theorem（费马小定理）" class="headerlink" title="一、Fermat’s Little Theorem（费马小定理）"></a>一、Fermat’s Little Theorem（费马小定理）</h2><h4 id="1-定理内容"><a href="#1-定理内容" class="headerlink" title="1.定理内容"></a>1.定理内容</h4><p>如果p是质数，并且a不是p的倍数。那么就有<br>$$<br>a^{p-1} &#x3D; 1 (mod p)<br>$$</p><p>对于正整数a和p，如果有<br>$$<br>a x ≡ 1 ( m o d   p )<br>$$<br>，那么称x的最小整数解为a模p的逆元</p><p>由上面的结论我们可以得到a的逆元其实就是<br>$$<br>a^{p − 2}<br>$$<br>  对于这个数我们可以使用快速幂来计算结果</p><h4 id="2-费马小定理的运用"><a href="#2-费马小定理的运用" class="headerlink" title="2.费马小定理的运用"></a>2.费马小定理的运用</h4><p> 费马小定理可以用来解决求组合数的问题，在求解组合数的时候，我们虽然可以通过使用杨辉三角来进行求解，但是在一些情况下我们经常需要去求解一个组合数的模，但是那些阶乘超过了我们的运算范围，也需要对它们进行取模，可是这个时候上下同时进行取模的结果是错误的结果。下面我们来进行 a b m o d   p \frac{a}{b}mod\space p<br>b<br>a</p><p> mod p 的正确求解操作</p><p> 首先有一个前提条件是a mod b &#x3D; 0 a&#x2F;b &#x3D; m</p><p> 假设存在一个数使得ax%p &#x3D; m</p><p> 由于模运算对于乘法是有效的，所以两边同时乘上b，得到a%p &#x3D; (m%p)*(b%p)%p</p><p> 两边再同时乘以x，得到m%p &#x3D; (mb)*x%p，得到 1 &#x3D; bx%p, 所以我们可以知道这个x其实就是b的逆元，基于这个结论我们可以得到求解<br>$$<br>\frac{a}{b}\mod p &#x3D; a\cdot b的逆元<br>$$<br> 所以对于组合数<br>$$<br>C_a^b &#x3D; \frac{a!}{b!(a-b)!} &#x3D; a!\cdot b!(a-b)!<br>$$<br>对于p的逆元</p><p><strong>在RSA的ctf题目中总有其用武之地</strong></p><h2 id="二、Chinese-remainder-theorem（中国剩余定理）"><a href="#二、Chinese-remainder-theorem（中国剩余定理）" class="headerlink" title="二、Chinese remainder theorem（中国剩余定理）"></a>二、Chinese remainder theorem（中国剩余定理）</h2><h3 id="1-定理内容-1"><a href="#1-定理内容-1" class="headerlink" title="1.定理内容"></a>1.定理内容</h3><p>在《孙子算经》中有这样一个问题：“今有物不知其数，三三数之剩二（除以3余2），五五数之剩三（除以5余3），七七数之剩二（除以7余2），问物几何？”这个问题称为“孙子问题”，该问题的一般解法国际上称为“中国剩余定理”。具体解法分三步：</p><ol><li><ol><li>找出三个数：从3和5的公倍数中找出被7除余1的最小数15，从3和7的公倍数中找出被5除余1 的最小数21，最后从5和7的公倍数中找出除3余1的最小数70。</li><li>用15乘以2（2为最终结果除以7的余数），用21乘以3（3为最终结果除以5的余数），同理，用70乘以2（2为最终结果除以3的余数），然后把三个乘积相加15∗2+21∗3+70∗215∗2+21∗3+70∗2得到和233。</li><li>用233除以3，5，7三个数的最小公倍数105，得到余数23，即233%105&#x3D;23233%105&#x3D;23。这个余数23就是符合条件的最小数。</li></ol></li></ol><p>　　就这么简单。我们在感叹神奇的同时不禁想知道古人是如何想到这个方法的，有什么基本的数学依据吗？</p><p>　　我们将“孙子问题”拆分成几个简单的小问题，从零开始，试图揣测古人是如何推导出这个解法的。</p><p>　　首先，我们假设n1是满足除以3余2的一个数，比如2，5，8等等，也就是满足3∗k+2（k&gt;&#x3D;0）的一个任意数。同样，我们假设n2是满足除以5余3的一个数，n3是满足除以7余2的一个数。</p><p>　　有了前面的假设，我们先从n1这个角度出发，已知n1满足除以3余2，能不能使得n1+n2的和仍然满足除以3余2？进而使得n1+n2+n3的和仍然满足除以3余2？</p><p>　　这就牵涉到一个最基本数学定理，如果有a%b&#x3D;c，则有(a+k∗b)%b&#x3D;c(k为非零整数)，换句话说，如果一个除法运算的余数为c�，那么被除数与k倍的除数相加（或相减）的和（差）再与除数相除，余数不变。这个是很好证明的。</p><p>　　以此定理为依据，如果n2是3的倍数，n1+n2就依然满足除以3余2。同理，如果n3也是3的倍数，那么n1+n2+n3的和就满足除以3余2。这是从n1的角度考虑的，再从n2，n3的角度出发，我们可推导出以下三点：</p><ol><li><ol><li>为使n1+n2+n3的和满足除以3余2，n2和n3必须是3的倍数。</li><li>为使n1+n2+n3的和满足除以5余3，n1和n3必须是5的倍数。</li><li>为使n1+n2+n3的和满足除以7余2，n1和n2必须是7的倍数。</li></ol></li></ol><p>　　因此，为使n1+n2+n3的和作为“孙子问题”的一个最终解，需满足：</p><ol><li><ol><li>n1除以3余2，且是5和7的公倍数。</li><li>n2除以5余3，且是3和7的公倍数。</li><li>n3除以7余2，且是3和5的公倍数。</li></ol></li></ol><p>　　所以，孙子问题解法的本质是从5和7的公倍数中找一个除以3余2的数n1，从3和7的公倍数中找一个除以5余3的数n2，从3和5的公倍数中找一个除以7余2的数n3，再将三个数相加得到解。在求n1，n2，n3时又用了一个小技巧，以n1为例，并非从5和7的公倍数中直接找一个除以3余2的数，而是先找一个除以3余1的数，再乘以2。也就是<strong>先求出5和7的公倍数模3下的逆元，再用逆元去乘余数</strong>。</p><p>　　这里又有一个数学公式，如果a%b&#x3D;c，那么(a∗k)%b&#x3D;a%b+a%b+…+a%b&#x3D;c+c+…+c&#x3D;k∗c(k&gt;0),也就是说，如果一个除法的余数为c�，那么被除数的k倍与除数相除的余数为k∗c。展开式中已证明。</p><p>　　最后，我们还要清楚一点，n1+n2+n3只是问题的一个解，并不是最小的解。如何得到最小解？我们只需要从中最大限度的减掉掉3，5，7的公倍数105即可。道理就是前面讲过的定理“如果a%b&#x3D;c，则有<br>$$<br>(a−k∗b)(mod b)&#x3D;c^n<br>$$<br>所以（n1+n2+n3）%105（就是最终的最小解。</p><p>　　这样一来就得到了中国剩余定理的公式：</p><blockquote><p>设正整数<img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618184134796.jpeg"                      class="" title="img"                >两两互素，则同余方程组</p><p>​               <img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618184240203.jpeg"                      class="" title="img"                ></p><p>有整数解。并且在模<img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618184354156.jpeg"                      class="" title="img"                >下的解是唯一的，解为</p><p>​                <img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618184502609.jpeg"                      class="" title="img"                ></p><p>其中<img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618184601062.jpeg"                      class="" title="img"                >，而<img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618184638140.jpeg"                      class="" title="img"                >为<img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618184737359.jpeg"                      class="" title="img"                >模<img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140904164235549.png"                      class="" title="img"                >的逆元。</p></blockquote><hr><h3 id="2-中国剩余定理扩展——求解模数不互质情况下的线性方程组："><a href="#2-中国剩余定理扩展——求解模数不互质情况下的线性方程组：" class="headerlink" title="2.中国剩余定理扩展——求解模数不互质情况下的线性方程组："></a>2.中国剩余定理扩展——求解模数不互质情况下的线性方程组：</h3><p>　　普通的中国剩余定理要求所有的<img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618185352656.jpeg"                      class="" title="img"                >互素，那么如果不互素呢，怎么求解同余方程组？</p><p>　　这种情况就采用两两合并的思想，假设要合并如下两个方程：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618185529953.jpeg"                      class="" title="img"                ><p>　　那么得到：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/20140618185628671.jpeg"                      class="" title="img"                ><p>　　我们需要求出一个最小的x使它满足：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/994344-20160928225142250-925008424.png"                      class="" title="img"                ><p>　　那么x1和x2就要尽可能的小，于是我们用扩展欧几里得算法求出x1的最小正整数解，将它代回a1+m1x1，得到x的一个特解x’，当然也是最小正整数解。</p><p>　　所以x的通解一定是x′加上lcm(m1,m2)∗k，这样才能保证x模m1和m2的余数是a1和a2。由此，我们把这个x′当做新的方程的余数，把lcm(m1,m2)当做新的方程的模数。（这一段是<strong>关键</strong>）</p><p>　　合并完成：</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/07/08/Theorem/994344-20160929150603750-268147485.png"                      class="" title="img"                >]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Theorem-in-Crypto&quot;&gt;&lt;a href=&quot;#Theorem-in-Crypto&quot; class=&quot;headerlink&quot; title=&quot;Theorem in Crypto&quot;&gt;&lt;/a&gt;Theorem in Crypto&lt;/h1&gt;&lt;h2 id=&quot;一、Fer</summary>
      
    
    
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Buu-Crypto</title>
    <link href="http://example.com/2023/06/18/Buu-Crypto/"/>
    <id>http://example.com/2023/06/18/Buu-Crypto/</id>
    <published>2023-06-18T13:42:46.000Z</published>
    <updated>2023-06-20T07:18:53.747Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BuuCTF刷题记录-Crypto"><a href="#BuuCTF刷题记录-Crypto" class="headerlink" title="BuuCTF刷题记录-Crypto"></a>BuuCTF刷题记录-Crypto</h1><h2 id="1-异性相吸"><a href="#1-异性相吸" class="headerlink" title="1.异性相吸"></a>1.异性相吸</h2><p><strong>TASK：</strong></p><p>最近出现了一个奇葩观点，说性别都不一样，怎么能谈恋爱？为了证明这个观点错误，请大家证明异性是相吸的。 </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:asadsasdasdasdasdasdasdasdasdasdqwesqf</span><br><span class="line">密文：ἇ̀Ј唒ဃ塔屋䩘卖剄䐃堂ن䝔嘅均ቄ䩝ᬔ</span><br></pre></td></tr></table></figure></div><p><strong>WP：</strong></p><ul><li>用010打开两个文件，获得他们的二进制数，再进行异或</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">a = <span class="string">&#x27;0110000101110011011000010110010001110011011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011100010111011101100101011100110111000101100110&#x27;</span></span><br><span class="line">b = <span class="string">&#x27;0000011100011111000000000000001100001000000001000001001001010101000000110001000001010100010110000100101101011100010110000100101001010110010100110100010001010010000000110100010000000010010110000100011000000110010101000100011100000101010101100100011101010111010001000001001001011101010010100001010000011011&#x27;</span></span><br><span class="line">c = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span>(a[i] == b[i]):</span><br><span class="line">        c+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#0110011001101100011000010110011101111011011001010110000100110001011000100110001100110000001110010011100000111000001110010011100100110010001100100011011100110110011000100011011101100110001110010011010101100010001101010011010001100001001101110011010000110011001101010110010100111000001110010110010101111101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">13040004482825639027998127915416848738127988052104145969389882111109559127041106665604212093</span>))</span><br><span class="line"><span class="comment">#flag&#123;ea1bc0988992276b7f95b54a7435e89e&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="2-RSA（证书公钥解析）"><a href="#2-RSA（证书公钥解析）" class="headerlink" title="2.RSA（证书公钥解析）"></a>2.RSA（证书公钥解析）</h2><p><strong>TASK：</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/06/18/Buu-Crypto/image-20230618214433507.png"                      class="" title="image-20230618214433507"                ><p>题目给了两个附件，没遇到过，了解后知道是证书公钥解析类型的题目。（<a class="link"   href="https://www.cnblogs.com/whbCNW/p/4141353.html" >证书公钥解析 - CNW - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a>）</p><p><strong>WP：</strong></p><ul><li>pub-key:</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+</span><br><span class="line">/AvKr1rzQczdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></div><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/06/18/Buu-Crypto/image-20230618215153956.png"                      class="" title="image-20230618215153956"                ><ul><li>公钥解析后就是基本的RSA，脚本如下：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">n= <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p= <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q= <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">d= <span class="number">81176168860169991027846870170527607562179635470395365333547868786951080991441</span></span><br><span class="line"></span><br><span class="line">key = rsa.PrivateKey(n,e,d,q,p)         <span class="comment">#在pkcs标准中,pkcs#1规定,私钥包含(n,e,d,p,q)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;D:\CTF\\buu\\0eaf8d6c-3fe5-4549-9e81-94ac42535e7b\\flag.enc&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:  <span class="comment">#以二进制读模式，读取密文</span></span><br><span class="line">    f = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f,key))           <span class="comment"># f:公钥加密结果  key:私钥</span></span><br></pre></td></tr></table></figure></div><p>得到flag：  flag{decrypt_256}</p><h2 id="3-RSA1（dp-dq泄露）"><a href="#3-RSA1（dp-dq泄露）" class="headerlink" title="3.RSA1（dp,dq泄露）"></a>3.RSA1（dp,dq泄露）</h2><p><strong>TASK：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure></div><p>题目给出了p,q,dp,dq,c </p><p>考虑使用crt，欧拉定理求解</p><p><strong>WP：</strong></p><ul><li>推导过程如下：</li></ul><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/06/18/Buu-Crypto/image-20230619173016124.png"                      class="" title="image-20230619173016124"                ><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> </span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> </span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> </span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> </span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"><span class="comment">#n=p*q</span></span><br><span class="line"></span><br><span class="line">I = invert(q,p)            <span class="comment">#求p的逆元</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c,dp,p)           <span class="comment">#求幂取模运算</span></span><br><span class="line">mq = <span class="built_in">pow</span>(c,dq,q)           <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>((((mp-mq)*I)%p)*q+mq) </span><br><span class="line">m=m%n</span><br><span class="line"><span class="built_in">print</span>(n2s(m))             </span><br></pre></td></tr></table></figure></div><p>解出flag： noxCTF{W31c0m3_70_Ch1n470wn}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BuuCTF刷题记录-Crypto&quot;&gt;&lt;a href=&quot;#BuuCTF刷题记录-Crypto&quot; class=&quot;headerlink&quot; title=&quot;BuuCTF刷题记录-Crypto&quot;&gt;&lt;/a&gt;BuuCTF刷题记录-Crypto&lt;/h1&gt;&lt;h2 id=&quot;1-异性相</summary>
      
    
    
    
    
    <category term="CTF小试" scheme="http://example.com/tags/CTF%E5%B0%8F%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Summary</title>
    <link href="http://example.com/2023/06/18/Summary/"/>
    <id>http://example.com/2023/06/18/Summary/</id>
    <published>2023-06-18T08:43:53.000Z</published>
    <updated>2023-06-18T13:01:48.667Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、RSA"><a href="#一-、RSA" class="headerlink" title="一 、RSA"></a>一 、RSA</h1><h2 id="1-1-What-is-RSA"><a href="#1-1-What-is-RSA" class="headerlink" title="1.1 What is RSA"></a><strong>1.1 What is RSA</strong></h2><h3 id="1-1-1-Define-RSA："><a href="#1-1-1-Define-RSA：" class="headerlink" title="1.1.1 Define RSA："></a>1.1.1 Define RSA：</h3><p> 1977年，麻省理工学院的 Ron Rivest、Adi Shamir 和 Leonard Adleman 共同提出了一种非对称加密</p><p>算法，用他们三人的姓氏缩写命名为 RSA。RSA 既不是惟一，也不是最早的非对称加密算法。但它是使</p><p>用最广泛，因而也是最重要的非对称加密算法。</p><h3 id="1-1-2-Basic-principle："><a href="#1-1-2-Basic-principle：" class="headerlink" title="1.1.2 Basic principle："></a>1.1.2 Basic principle：</h3><p>eg：假设Alice和Bob要在网上进行加密通信，他们要怎么应用RSA来加密和解密信息呢？步骤如下：</p><p>1.随机选择两个不相同的素数 p , q。</p><p>2.将p , q 相乘，记为n &#x3D; p × q 。</p><p>3.计算n的欧拉函数φ( n )，欧拉函数证明，当 p , q 为不相同的素数时，φ(n)&#x3D;(p−1)(q−1) 。</p><p>4.随机选择一个整数 e ，满足两个条件：φ(n)与e互质,且1&lt;e&lt;φ(n) 。</p><p>5.计算e对于φ(n) 的模反元素d，也就是说找到一个d满足 ed &#x3D; 1 mod φ(n)。这个式子等价于</p><p>ed−1&#x3D;kφ(n)，实际上就是对于方程ed−kφ(n)&#x3D;1求(d,k)的整数解。这个方程可以用扩展欧几里得算法求</p><p>解。</p><p>6.最终把(e,n)封装成公钥,(d,n)封装成私钥。</p><p><strong>公钥与私钥的产生 ：</strong></p><p>1.随机选择两个不同大质数 p 和 q，计算 N&#x3D;p×q</p><p>2.根据欧拉函数，求得 φ(N)&#x3D;φ(p)φ(q)&#x3D;(p−1)(q−1)</p><p>3.选择一个小于 φ(N)φ(N) 的整数 e，使 e 和 φ(N)互质。并求得 e 关于 φ(N) 的模反元素，命名为 d，有</p><p>ed≡1(mod φ(N))</p><p>4.将 p 和 q 的记录销毁，此时，(N,e))是公钥，(N,d) 是私钥。</p><p><strong>消息加密：</strong></p><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 N，且与 N 互质的整数 m。如果消息太长，</p><p>可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：</p><p>m^e≡c (mod N)</p><p><strong>消息解密：</strong></p><p>利用密钥d进行解密。</p><p>c^d≡m (modN)</p><p><strong>正确性证明:</strong></p><p>即我们要证m^ed≡m mod N，已知ed≡1 mod ϕ(N)，那么 ed&#x3D;kϕ(N)+1，即需要证明</p><p>m^kϕ(N)+1≡m mod N</p><p>这里我们分两种情况证明</p><p>第一种情况 gcd(m,N)&#x3D;1，那么 m^ϕ(N)≡1 mod N，因此原式成立。</p><p>第二种情况 gcd(m,N)≠1，那么 m 必然是 p 或者 q的倍数，并且 n&#x3D;mn&#x3D;m 小于 N。我们假设</p><p>m&#x3D;xp</p><p>那么x必然小于 q，又由于q是素数。那么</p><p>m^{kϕ(N)+1}&#x3D;m+uqm&#x3D;m+uqxp&#x3D;m+uxN</p><p>所以原式成立。</p><h3 id="1-1-3-Summariz："><a href="#1-1-3-Summariz：" class="headerlink" title="1.1.3 Summariz："></a><strong>1.1.3 Summariz</strong>：</h3><p><em>欧拉函数与小费马定理</em></p><p>(<a class="link"   href="https://blog.csdn.net/weixin_30302609/article/details/96312617?ops_request_misc=%7B%22request_id%22:%22166827222816782391833081%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166827222816782391833081&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-96312617-null-null.142" >https://blog.csdn.net/weixin_30302609/article/details/96312617?ops_request_misc=%7B%22request%5Fid%22%3A%22166827222816782391833081%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=166827222816782391833081&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-96312617-null-null.142<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="http://blog.csdn.net/boksic/article/details/6912381" >http://blog.csdn.net/boksic/article/details/6912381<i class="fas fa-external-link-alt"></i></a></p><h2 id="1-2-Tools-and-third-party-libaries"><a href="#1-2-Tools-and-third-party-libaries" class="headerlink" title="1.2 Tools and third-party libaries"></a>1.2 Tools and third-party libaries</h2><h3 id="1-2-1-RSA-tool"><a href="#1-2-1-RSA-tool" class="headerlink" title="1.2.1 RSA-tool :"></a><strong>1.2.1 RSA-tool :</strong></h3><p>使用rsatool工具计算d的值，直接填入p,q,把e &#x3D; 65537转换为16进制在再填入，再点击Calc.D,即可获得</p><p>D的值。在已知d的情况下，我们可以使用此工具将d分解为两个质数p,q，便于解出密文。但前提是已知</p><p>的d不是一个非常大的整数，因为大整数很难被分解。</p><h3 id="1-2-2-Python"><a href="#1-2-2-Python" class="headerlink" title="1.2.2 Python :"></a>1.2.2 Python :</h3><p>Python中的第三方库中有许多有用的函数，通过调用不同的函数，可以进行高效的数学运算，这对于</p><p>RSA问题有极大的帮助，能大大提高破解的效率。</p><p>如 <strong>gmpy2</strong></p><p>gmpy2.invert(x,m)求大整数x模m的逆元</p><p>print(gmpy2.invert(4, 23)) # eg:4<em>6 ≡ 1 mod 23 –&gt; 6**gmpy2.powmod(x,y,m)求大整数x的y次幂模</em>m取余</p><h2 id="1-3-Eg-analyze"><a href="#1-3-Eg-analyze" class="headerlink" title="1.3 Eg analyze"></a>1.3 Eg analyze</h2><h3 id="1-3-1-Easy-RSA"><a href="#1-3-1-Easy-RSA" class="headerlink" title="1.3.1 Easy RSA:"></a><strong>1.3.1 Easy RSA:</strong></h3><p>from Geek Challenge 2022:</p><p>n&#x3D;</p><p>6998481475728885783197750918520850086672477175656162927968781930122248321872866</p><p>3</p><p>e&#x3D; 65537</p><p>c&#x3D;</p><p>6767284506351741544248617509644866461758157956488531184232610787180559569745470</p><p>1</p><p>思路分析：</p><p>题目中给出了n,e,c</p><p>通过观察发现n较小，可以尝试将其分解为p,q，再调用gmpy.2函数解出d,进而解出flag</p><p>代码如下：</p><p>print(gmpy2.powmod(3, 3, 5)) # eg: 3<em>3</em>3 mod 5 –&gt; 2 </p><p>print(gmpy2.powmod(3, 2, 5)) # eg: 3*3 mod 5 –&gt; 4 </p><p>import gmpy2 </p><p>import binascii </p><p>e &#x3D; 65537从而解出flag:</p><p>b’SYC{5t4rt_R5A_ls_1t_3a5y?}’</p><h3 id="1-3-2-Crypto–RSA"><a href="#1-3-2-Crypto–RSA" class="headerlink" title="1.3.2 Crypto–RSA:"></a>1.3.2 Crypto–RSA:</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;xxxxxxxxx&#x27;</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q*q</span><br><span class="line">phi = q*(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = gp.invert(e,phi)</span><br><span class="line">c1 = gp.powmod(m,e,n)</span><br><span class="line">c2 = gp.powmod(d,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">145093797902822167319652632563913049204359441606914299371328132761737937841482985204772991693446558382687211295966125072432728114585260877882481917537185348909428560415929625399859565640798879751464916665858077652098718880371517761152276087514608872623033063875563356826449768135315600286686553435829384245134433664959750049696782982403767531350340684278871939622253835942508836597570164009480445326919831484001207931469848043961222999691304566605932331844481734994387604676780062351323993700832064016063406467090539944036593162781777831398673064877888159965880054730223661378027013210686762339031370347494499755842043157403690971225215004655175312643627502009620816754778588759723275253010895567475742391090669667988777717071600553719238830821999675630958162460547881544109850105236232159309537820403872727855391181941233211235876250798959167546860843659326405803024282470037020615626816534084522390299126332179146654832494</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2761037910837718967061344195511979487994565044893561932920759186334785007440675894550166860632297873008400477594874122549824259651042906989018873497146326283220733850925963615819718647323108403061127797014213550645256691439295240651416176938533365428855831510041737319867214689836476665916037080648303266162609644824679782767672958160634270996992056182050815770464509352352622343572368757425935514622305972419508210848875697588255141320862169327664900990336717957506626667360479823775813415882223445888081908620554011130435520271237674956274080261300861326040405663427207665868898706364396527241733714445261200657405654370573827465006950534665688659874266680482613402133022739399689452087542656641275043233968350187385896117067102805499443547191573033143066075983801853574223210095894776380595919582689776780821295300553389588380527659421512397786402384504538653817177037906936827812894673284872232424415086422934862915801337</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3287002712425388307525352609100624748000272472736874666500547841318591852594619595724087209914853196867692948250150501764076446154470673884523284309784517787183054246280337398098853243684127104584733672924352341481572093454807255602936733377039997650201840331363344239719297203152251916861311582291699460040753803661345073084832894779090488743449087119526126541942853573076715474894397009565884537900866295889520532273851131982999253534600891259155672158005086674638844910604020655531132043490450001206903667855774008230185435154887685054704162605627162865608268235359819470906793478144795375880249991003056592569994537140155966341660560671914544355445680021310815797523132967939090744815795215539133448449248304650191105105400480778072455609675366453408226825706923640521370456175259373003734277093133962318272307543941384223016249143554311711183964923672359210163040661231350422086972190979806820525109574548334715135305259</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>分析：1.p与q都是随机的1024位的二进制数，这使得n会变得非常大，加之大正整数是很难分解的，所以这道</p><p>题并不是通过分解n来求解的。</p><p>2.e &#x3D; 0x10001 十六进制转换为十进制及e&#x3D;65537</p><p>3.n &#x3D; p<em>q</em>q</p><p>phi &#x3D; q*(p-1)*(q-1)</p><p>观察发现n与phi有公因子q</p><p>4.c1 &#x3D; gp.powmod(m,e,n) 即 m^e&#x3D;k1<em>p</em>q*q+c1 *</p><p><em>c2 &#x3D; gp.powmod(d,e,n)</em> <em>即**d^e&#x3D;k2pqq+c2</em></p><p>解题思路：</p><p> 1.题目给出了一组c1,c2,n的值，泄露了d的信息，即d^e mod n。同时我们发现phi与n有公因子</p><p>q,n&#x3D;pqq,phi&#x3D;(p-1)(q-1)q。</p><p>2.(d^e mod n )*(e^e mod n) mod n&#x3D; (de)^e mod n&#x3D;(kphi+1)^e mod n。</p><p>3.那么我们现在的想法就是设法求出q,再将n分解为p,q，接着就可以通过逆元求解出d的值。</p><p>4.这样我们就知道c即c1,n,d的值，进而解出m，破译密文。</p><h1 id="二、Hash"><a href="#二、Hash" class="headerlink" title="二、Hash"></a>二、Hash</h1><h2 id="2-1-What-is-Hash"><a href="#2-1-What-is-Hash" class="headerlink" title="2.1 What is Hash"></a><strong>2.1 What is Hash</strong></h2><h3 id="2-1-1-Hash-and-background"><a href="#2-1-1-Hash-and-background" class="headerlink" title="2.1.1 Hash and background:"></a><strong>2.1.1 Hash and background:</strong></h3><p> Hash,一般翻译做散列、杂凑，或音译为哈希，是把任意长度的输入（又叫做预映射pre-image）通过</p><p>散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空</p><p>间通常远小于输入的空间。它其实就是一个算法，最简单的算法就是加减乘除，比方，我设计个数字算</p><p>法，输入+7&#x3D;输出，比如我输入1，输出为8；输入2，输出为9。</p><p>哈希算法不过是一个更为复杂的运算，它的输入可以是字符串，可以是数据，可以是任何文件，经过哈</p><p>希运算后，变成一个固定长度的输出，该输出就是哈希值。但是哈希算法有一个很大的特点，就是你不</p><p>能从结果推算出输入,所以又称为不可逆的算法。</p><p>安全，这是Hash的最大优点！</p><h3 id="2-1-2-Hash’s-advantages"><a href="#2-1-2-Hash’s-advantages" class="headerlink" title="2.1.2 Hash’s advantages:"></a><strong>2.1.2 Hash’s advantages:</strong></h3><p>1.不可逆：在具备编码功能的同时，哈希算法也作为一种加密算法存在。即，你无法通过分析哈希值计</p><p>算出源文件的样子，换句话说：你不可能通过观察香肠的纹理推测出猪原来的样子。</p><p>2.计算极快：20G高清电影和一个5K文本文件复杂度相同，计算量都极小，可以在0.1秒内得出结果。也</p><p>就是说，不管猪有多肥，骨头多硬，做成香肠都只要眨眨眼的时间。</p><h3 id="2-1-3-Applied-fields"><a href="#2-1-3-Applied-fields" class="headerlink" title="2.1.3 Applied fields:"></a><strong>2.1.3 Applied fields:</strong></h3><p>哈希算法的不可逆特性使其在以下领域使用广泛</p><p>1.密码，我们日常使用的各种电子密码本质上都是基于hash的，你不用担心支付宝的工作人员会把你的</p><p>密码泄漏给第三方，因为你的登录密码是先经过 hash+各种复杂算法得出密文后 再存进支付宝的数据库</p><p>里的2.文件完整性校验，通过对文件进行hash，得出一段hash值 ，这样文件内容以后被修改了，hash值就</p><p>会变。 MD5 Hash算法的”数字指纹”特性，使它成为应用最广泛的一种文件完整性校验和(Checksum)算</p><p>法，不少Unix系统有提供计算md5 checksum的命令。</p><p>3.数字签名，数字签名技术是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有</p><p>用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解</p><p>密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息</p><p>被修改过，因此数字签名能够验证信息的完整性。</p><p>此外，hash算法在区块链领域也使用广泛。</p><h2 id="2-2-Eg-analyze-MD5-in-Hash"><a href="#2-2-Eg-analyze-MD5-in-Hash" class="headerlink" title="2.2 Eg analyze(MD5 in Hash)"></a><strong>2.2 Eg analyze(MD5 in Hash)</strong></h2><h3 id="2-2-1-MD5"><a href="#2-2-1-MD5" class="headerlink" title="2.2.1 MD5"></a><strong>2.2.1 MD5</strong></h3><p>MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过一些列的处理后，</p><p>算法输出由四个32位分组组成的128位散列值。具体的步骤如下所示：</p><p>1、填充</p><p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余结果等于448。填充</p><p>的方法是填充一个1和n个0。填充完成后，信息的长度为N*512+448</p><p>2、记录信息长度</p><p>用64位内存来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N<em>512 + 448 +</em></p><p>*64 &#x3D; (N+1)*512</p><p>3、装入标准的幻数（四个整数）</p><p>标准的幻数（物理顺序）是（A&#x3D;(01234567)16，B&#x3D;(89ABCDEF)16，C&#x3D;(FEDCBA98)16，D&#x3D;</p><p>(76543210)16）。如果在程序中定义应该是（A&#x3D;0X67452301L，B&#x3D;0XEFCDAB89L，</p><p>C&#x3D;0X98BADCFEL，D&#x3D;0X10325476L)。</p><h3 id="2-2-2-Crypto–md5"><a href="#2-2-2-Crypto–md5" class="headerlink" title="2.2.2 Crypto–md5:"></a>2.2.2 Crypto–md5:</h3><p>一个名为Hacker的人想给小彭加德育分，但是需要小彭的学号和寝室号才能完成加分。</p><p>Hacker自己只找到了学号和寝室号对应的md5值，聪明的你能帮助Hacker拿到学号和寝室号吗？</p><p>学号：71c5a9bd7cc3a8e563efe4171f07b427</p><p>寝室号：cb1592d95b7e3846451eab3728eeaa51</p><p>分析：</p><p>md5是一种信息摘要算法，不可反向解密，不同长度的内容加密后都是32位。它是单向密码体制，从明</p><p>文到密文的不可逆映射，只有加密过程没有解密过程，所以我们没法通过运算来解开密文得到明文。由</p><p>于md5是一种散列函数，运用Hash算法，在计算过程中原文会随机丢失，仅仅根据MD5的计算过程和</p><p>得到的最终结果，是无法逆向计算出明文的。</p><p>1.题目中的MD5密文并未加入盐作为干扰，都是标准的32位密文，解密时并没有非常困难，可以通过考</p><p>虑穷举法进行暴力求解。</p><p>2.通过迭代组合形成若干明文组，再将明文组进行utf-8编码成密文，然后与题目中的密文进行比较，当</p><p>两者一致时即“破译”成功，输出得到flag。</p><p><strong>脚本如下：</strong></p><p>1.引用hash</p><p>给定范围</p><p>运用for循环进行枚举</p><p>2.学号的格式为：19XXXXXXXX</p><p>我们发现已经给出部分明文，我们只需要解出剩下的8位明文即可，即设置8个变量</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):a,b,c,d,e,f,g</span><br></pre></td></tr></table></figure></div><p>3.接着组成密文组t </p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t =<span class="string">&#x27;19&#x27;</span>+<span class="built_in">str</span>(a)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(c)+<span class="built_in">str</span>(d)+<span class="built_in">str</span>(e)+<span class="built_in">str</span>(f)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(h)</span><br></pre></td></tr></table></figure></div><p>4.进行MD5算法，utf-8编码，所得密文与原密文比对，正确即输出，得到flag</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> md5[:<span class="number">32</span>] == <span class="string">&#x27;71c5a9bd7cc3a8e563efe4171f07b427&#x27;</span>: </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (t)</span><br></pre></td></tr></table></figure></div><p>运行</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>): </span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> dic: </span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> dic: </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> dic: </span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> dic: </span><br><span class="line">                    <span class="keyword">for</span> e <span class="keyword">in</span> dic:</span><br><span class="line">                        <span class="keyword">for</span> f <span class="keyword">in</span> dic:</span><br><span class="line">                            <span class="keyword">for</span> g <span class="keyword">in</span> dic: </span><br><span class="line">                                <span class="keyword">for</span> h <span class="keyword">in</span> dic: </span><br><span class="line">                                    t =<span class="string">&#x27;19&#x27;</span>+<span class="built_in">str</span>(a)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(c)+<span class="built_in">str</span>(d)+<span class="built_in">str</span>(e)+<span class="built_in">str</span>(f)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(h) </span><br><span class="line">                                    md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() </span><br><span class="line">                                    <span class="keyword">if</span> md5[:<span class="number">32</span>] == <span class="string">&#x27;71c5a9bd7cc3a8e563efe4171f07b427&#x27;</span>: </span><br><span class="line">                                        <span class="built_in">print</span> (t)</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>求解完学号，寝室号的解密也是类似的：</p><p>注意到寝室号格式为：XX-XXXX</p><p>那么在组合时注意加入字符‘-’即可</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8import hashlib </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1000</span>)): </span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>): </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> b <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span> d <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">                  <span class="keyword">for</span> f <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">                                  t =<span class="built_in">str</span>(a)+<span class="built_in">str</span>(b)+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">str</span>(c)+<span class="built_in">str</span>(d)+<span class="built_in">str</span>(e)+<span class="built_in">str</span>(f) </span><br><span class="line"></span><br><span class="line">                                  md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() </span><br><span class="line"></span><br><span class="line"><span class="comment">#print t </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> md5[:<span class="number">32</span>] == <span class="string">&#x27;cb1592d95b7e3846451eab3728eeaa51&#x27;</span>: </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (t)</span><br></pre></td></tr></table></figure></div><p>综上，flag为</p><p><strong>SYC{1919114514,81-2048}</strong></p><h1 id="三、ECC"><a href="#三、ECC" class="headerlink" title="三、ECC"></a>三、ECC</h1><h2 id="3-1-What-is-ECC"><a href="#3-1-What-is-ECC" class="headerlink" title="3.1 What is ECC"></a>3.1 What is ECC</h2><p>  ECC与RSA一样都属于非对称加密算法，但是，与传统的基于大质数分解难题的加密算法不同，该加密方式基于 “离散对数” 这种数学难题。</p><p>椭圆曲线加密（Elliptic Curve Cryptography），ECC加密算法是一种公钥加密技术，<strong>以椭圆曲线理论为基础</strong>。利用有限域上椭圆曲线的点构成的Abel群离散对数难解性，实现加密、解密和数字签名。将椭圆曲线中的加法运算与离散对数中的模乘运算相对应，就可以建立基于椭圆曲线的对应密码体制。</p><p>这里我不了解什么是群，什么是圆锥曲线理论，所以去CSDN了一下。</p><h3 id="3-1-1-关于群："><a href="#3-1-1-关于群：" class="headerlink" title="3.1.1 关于群："></a>3.1.1 关于群：</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113004400313.png"                      alt="image-20221113004400313"                ></p><h3 id="3-1-2-EIgamal："><a href="#3-1-2-EIgamal：" class="headerlink" title="3.1.2 EIgamal："></a><em>3.1.2 EIgamal：</em></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115230741013.png"                      alt="image-20221115230741013"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113155335598.png"                      alt="image-20221113155335598"                ></p><p>实例<br>密钥生成选取素数p&#x3D;150001，本原元a&#x3D;7，密钥113</p><blockquote><blockquote><blockquote><p>p&#x3D;150001<br>a&#x3D;7<br>d&#x3D;113<br>a<strong>d%p<br>66436L<br>y&#x3D;a</strong>d%p<br>print y<br>66436</p></blockquote></blockquote></blockquote><p>由公式可得公钥为y&#x3D;66436</p><p> 加密，明文为m&#x3D;809,随机整数为k&#x3D;1000</p><blockquote><blockquote><blockquote><p>m&#x3D;809<br>k&#x3D;1000<br>c1&#x3D;a<strong>k%p<br>c1<br>90429L<br>c2&#x3D;m*y</strong>k%p<br>c2<br>15061L</p></blockquote></blockquote></blockquote><p>得到密文为(c1,c2)&#x3D;(90429,15061)</p><p>解密</p><p>根据公式m1&#x3D;c2&#x2F;c1<strong>y%p，但其中有模逆运算，不能直接计算，可以用扩展欧几里得算法,先求c1</strong>y的模逆</p><blockquote><blockquote><blockquote><p>extended_gcd(c1**d%p,p)<br>(-69199L, 2147L)</p></blockquote></blockquote></blockquote><p>我们所需要的是正数，所以加上p，-69199+p&#x3D;80802</p><p>然后就可以</p><blockquote><blockquote><blockquote><p>80802*c2%p<br>809L</p></blockquote></blockquote></blockquote><p>正是刚开始的明文809</p><p>(<a class="link"   href="https://blog.csdn.net/boksic/article/details/7014386" >https://blog.csdn.net/boksic/article/details/7014386<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="3-1-3-椭圆曲线-Elliptic-curve"><a href="#3-1-3-椭圆曲线-Elliptic-curve" class="headerlink" title="3.1.3 椭圆曲线(Elliptic curve):"></a>3.1.3 椭圆曲线(Elliptic curve):</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113162838863.png"                      alt="image-20221113162838863"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113181212306.png"                      alt="image-20221113181212306"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113181017150.png"                      alt="image-20221113181017150"                ></p><p><a class="link"   href="https://blog.csdn.net/boksic/article/details/7013480?ops_request_misc=%7B%22request_id%22:%22166813199416800182179855%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166813199416800182179855&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-7013480-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF&spm=1018.2226.3001.4187" >(3条消息) 椭圆曲线入门详解_boksic的博客-CSDN博客_怎么求解椭圆曲线的全部解点<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-1-4-ECC-and-background"><a href="#3-1-4-ECC-and-background" class="headerlink" title="3.1.4 ECC and background:"></a>3.1.4 ECC and background:</h3><p>我们知道，RSA算法的优势就是算法原理简单，可以很容易的构造。但是缺点也很明显，需要足够长的密钥长度来保证数据的安全性。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113001055302.png"                      alt="image-20221113001055302"                ></p><p>而现在移动终端的数目在逐渐增多，越来越多的运算是在移动终端上进行的，而移动终端的计算能力有限，超级计算机的计算能力在不断增强。按照摩尔定律，计算机处理器的性能，每两年就会翻一番。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113001147500.png"                      alt="image-20221113001147500"                ></p><p>这就必然导致了一个矛盾：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113001250810.png"                      alt="image-20221113001250810"                ></p><p>由此，ECC加密算法应运而生。<br>引文链接：<a class="link"   href="https://blog.csdn.net/xuanli4845/article/details/115907886" >https://blog.csdn.net/xuanli4845/article/details/115907886<i class="fas fa-external-link-alt"></i></a></p><h2 id="3-2-ECC’s-advantages"><a href="#3-2-ECC’s-advantages" class="headerlink" title="3.2 ECC’s advantages"></a>3.2 ECC’s advantages</h2><p>ECC主要优势是可以使用更小的密钥并提供相当高等级的安全。ECC164位的密钥产生一个安全级，相当于RSA 1024位密钥提供的保密强度，而且计算量较小，处理速度更快，存储空间和传输带宽占用较少。目前我国居民二代身份证正在使用 256 位的椭圆曲线密码，虚拟货币比特币也选择ECC作为加密算法。对于ECC加密算法的优点，那就是性能上的提升，同样的密钥长度，基于ECC加密要比基于RSA安全很多。</p><p>总结来说就是ECC算法能在短时间内达到RSA的加密效果，同时ECC的密钥更短，存储效率高，通信效率高。</p><h2 id="3-3-ECC’s-principle"><a href="#3-3-ECC’s-principle" class="headerlink" title="3.3 ECC’s principle"></a>3.3 ECC’s principle</h2><h3 id="3-3-1-Define-ECC"><a href="#3-3-1-Define-ECC" class="headerlink" title="3.3.1 Define ECC:"></a>3.3.1 Define ECC:</h3><p>在有限域Fp中定义一个椭圆曲线，常用y2&#x3D;x3+ax+b</p><p>Fp中只有p个元素，p为素数<br>Fp中，a+b≡c (mod p)，a×b≡c (mod p)，a&#x2F;b≡c (mod p)<br>4a^3+27b^2≠0　(mod p)  a，b是小于p的非负整数<br>x，y属于0到p-1间的证书，曲线标记为Ep（a，b）<br>阶：椭圆曲线上一点P，存在正整数n，使得nP&#x3D;O∞，则n为P的阶，若n不存在，则P是无限阶的，有限域上定义的椭圆曲线上所有点的阶都存在。</p><p><strong>椭圆曲线难题</strong></p><p>K&#x3D;kG，其中K,G为Ep（a,b）上的点，k为小于n的整数，n是点G的阶，给定k和G，计算K容易，但是给定K和G，求k就很难了！</p><p>因此，设K为公钥，k为私钥，G为基点。</p><p><strong>加密过程</strong><br>A选定一条椭圆曲线Ep（a,b），并取曲线上一点作为基点G<br>A选择一个私钥k，并生成公钥K&#x3D;kG<br>A将Ep（a,b）和k，G发送给B<br>B收到后将明文编码到Ep（a,b）上一点M，并产生一个随机数r<br>B计算点C1&#x3D;M+rK，C2&#x3D;rG<br>B将C1，C2传给A<br>A计算C1-kC2&#x3D;M+rkG-krG&#x3D;M<br>A对M解码得到明文<br>攻击者只能得到Ep（a,b），G，K，C1，C2，没有k就无法得到M。</p><p><strong>签名验签流程</strong><br>A选定一条椭圆曲线Ep（a，b），并取曲线上一点作为基点G<br>A选择一个私钥k，并生成公钥K&#x3D;kG<br>A产生一个随机数r，计算R(x,y)&#x3D;rG<br>A计算Hash&#x3D;SHA(M)，M‘&#x3D;M(modp)<br>A计算S&#x3D;（Hash+M’k）&#x2F;r(modp)<br>B获得S和M’，Ep(a,b)，K，R(x,y)<br>B计算Hash&#x3D;SHA(M)，M’&#x3D;M(modp)<br>B计算R’&#x3D;（Hash*G+M’<em>K）&#x2F;S&#x3D;(Hash</em>G+M’*kG)*r&#x2F;(Hash+M’k)&#x3D;rG&#x3D;R（x,y），若R’&#x3D;R，则验签成功。<br><a class="link"   href="https://blog.csdn.net/leo_wonty/article/details/7366418" >https://blog.csdn.net/leo_wonty/article/details/7366418<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-3-2-Eg"><a href="#3-3-2-Eg" class="headerlink" title="3.3.2 Eg:"></a>3.3.2 Eg:</h3><p>Eg1</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114084747780.png"                      alt="image-20221114084747780"                ></p><p><a class="link"   href="https://blog.csdn.net/weixin_43943977/article/details/102070227?ops_request_misc=&request_id=&biz_id=102&utm_term=ECC%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-102070227.nonecase&spm=1018.2226.3001.4187" >(3条消息) 椭圆曲线密码算术（ECC）原理_Soul fragments的博客-CSDN博客_ecc原理<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.csdn.net/sitebus/article/details/82835492" >(3条消息) ECC椭圆曲线加解密原理详解(配图)_NFTDigger的博客-CSDN博客_椭圆曲线加密算法原理<i class="fas fa-external-link-alt"></i></a></p><p>Eg2</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114141027959.png"                      alt="image-20221114141027959"                ></p><p><a class="link"   href="https://www.cnblogs.com/Kalafinaian/p/7392505.html" >ECC椭圆曲线详解(有具体实例) - Kalafinaian - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><h2 id="3-4-Crypto–ECC"><a href="#3-4-Crypto–ECC" class="headerlink" title="3.4 Crypto–ECC"></a>3.4 Crypto–ECC</h2><p>阿鲁为了保护自己的qq，使用椭圆曲线加密了自己的qq密码。<br>嘉然觉得这样并不安全，于是决定拿到阿鲁的qq密码证明此事。<br>发现阿鲁的QQ密码就是椭圆曲线的公钥坐标之和。<br>现已知椭圆曲线各参数：</p><p>a &#x3D; 2546417962</p><p>b &#x3D; 33279036350</p><p>p &#x3D; 190540091407103</p><p>私钥: k &#x3D; 3068869</p><p>G &#x3D; (25040232765915, 122045618759262)</p><p>求公钥K(x, y)</p><p>flag是SYC{}包上x+y的sha256值</p><h3 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze:"></a><em><strong>Analyze:</strong></em></h3><p>1.通过观察题目我们发现，已知椭圆曲线加密Ep(a,b)参数为</p><p>a &#x3D; 2546417962</p><p>b &#x3D; 33279036350</p><p>p &#x3D; 190540091407103</p><p>私钥: k &#x3D; 3068869</p><p>G &#x3D; (25040232765915, 122045618759262)</p><p>需要求解的是公钥K(x,y)的横坐标与纵坐标之和的sha256的值</p><p>2.我们已知k与G，求解公钥K相对较简单。但是，如果知道G与K，反过来求解k就会变得很困难。阿鲁为了保护自己的qq，使用椭圆曲线加密了自己的qq密码，其QQ密码为公钥K(x,y)的横坐标与纵坐标之和，这么做显然是不够安全的，我们只需要解出公钥K就“破译”成功。</p><ol start="3"><li></li></ol><p>根据椭圆曲线上的点的加法运算</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114151012914.png"                      alt="image-20221114151012914"                ></p><p>我们就计算能得到公钥K，拿到flag</p><h3 id="Solve-process："><a href="#Solve-process：" class="headerlink" title="Solve process："></a>Solve process：</h3><p>1.写入已知数据</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Gx = <span class="number">25040232765915</span></span><br><span class="line">Gy = <span class="number">122045618759262</span></span><br><span class="line">a = <span class="number">2546417962</span></span><br><span class="line">b = <span class="number">33279036350</span></span><br><span class="line">p = <span class="number">190540091407103</span></span><br><span class="line">k = <span class="number">3068869</span></span><br><span class="line">x = Gx</span><br><span class="line">y = Gy</span><br></pre></td></tr></table></figure></div><p>2.分根据P、Q两点是否重合，进行分类</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#若P、Q两点重合</span></span><br><span class="line">    <span class="keyword">if</span> (x==Gx <span class="keyword">and</span> y==Gy):</span><br><span class="line">        inv = <span class="built_in">pow</span>(<span class="number">2</span>*Gy, p-<span class="number">2</span>,p)   </span><br><span class="line">        temp = (<span class="number">3</span>*Gx*Gx+a)*inv%p </span><br><span class="line">        <span class="comment">#若P、Q两点不重合</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        inv = <span class="built_in">pow</span>((x-Gx), p-<span class="number">2</span>,p)</span><br><span class="line">        temp = (y-Gy)*inv%p</span><br></pre></td></tr></table></figure></div><p>3.再通过椭圆曲线上的加法运算算出公钥K</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> xr = (temp*temp-Gx-x)%p</span><br><span class="line">    yr = (temp*(x-xr)-y)%p</span><br><span class="line"> <span class="comment">#print(i,xr,yr)</span></span><br><span class="line">    x = xr</span><br><span class="line">    y = yr</span><br><span class="line"><span class="built_in">print</span>(x+y)</span><br></pre></td></tr></table></figure></div><p>脚本如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入已知数据</span></span><br><span class="line">Gx = <span class="number">25040232765915</span></span><br><span class="line">Gy = <span class="number">122045618759262</span></span><br><span class="line">a = <span class="number">2546417962</span></span><br><span class="line">b = <span class="number">33279036350</span></span><br><span class="line">p = <span class="number">190540091407103</span></span><br><span class="line">k = <span class="number">3068869</span></span><br><span class="line">x = Gx</span><br><span class="line">y = Gy</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#分类计算K的值</span></span><br><span class="line">    <span class="comment">#若P、Q两点重合</span></span><br><span class="line">    <span class="keyword">if</span> (x==Gx <span class="keyword">and</span> y==Gy):</span><br><span class="line">        inv = <span class="built_in">pow</span>(<span class="number">2</span>*Gy, p-<span class="number">2</span>,p)   <span class="comment">#费马小定理(1/2/Gy)%p=(2Gy)^p-2 %p</span></span><br><span class="line">        temp = (<span class="number">3</span>*Gx*Gx+a)*inv%p </span><br><span class="line">        <span class="comment">#若P、Q两点不重合</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        inv = <span class="built_in">pow</span>((x-Gx), p-<span class="number">2</span>,p)</span><br><span class="line">        temp = (y-Gy)*inv%p</span><br><span class="line"></span><br><span class="line">    xr = (temp*temp-Gx-x)%p</span><br><span class="line">    yr = (temp*(x-xr)-y)%p</span><br><span class="line"> <span class="comment">#print(i,xr,yr)</span></span><br><span class="line">    x = xr</span><br><span class="line">    y = yr</span><br><span class="line"><span class="built_in">print</span>(x+y)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114092916083.png"                      alt="image-20221114092916083"                ></p><p>QQ:196301645356440</p><p>4.sha256</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Hash.sha256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">hash</span>=hashlib.sha256();</span><br><span class="line"><span class="built_in">hash</span>.update(<span class="built_in">bytes</span>(<span class="string">&#x27;196301645356440&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>.hexdigest())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>得到sha256后的值：a6c50a41e9ff4678ff94a17e893f434952a32b2e70c78dfb726c4d78b4303471</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114093108426.png"                      alt="image-20221114093108426"                ></p><p>所以，flag为</p><p>SYC{a6c50a41e9ff4678ff94a17e893f434952a32b2e70c78dfb726c4d78b4303471}</p><h1 id="四、Coppersmith-amp-Lattice-based-Cryptography"><a href="#四、Coppersmith-amp-Lattice-based-Cryptography" class="headerlink" title="四、Coppersmith&amp;Lattice-based Cryptography"></a>四、Coppersmith&amp;Lattice-based Cryptography</h1><h2 id="4-1-Define"><a href="#4-1-Define" class="headerlink" title="4.1 Define"></a>4.1 Define</h2><h3 id="4-1-1-Coppersmith："><a href="#4-1-1-Coppersmith：" class="headerlink" title="4.1.1 Coppersmith："></a>4.1.1 Coppersmith：</h3><p>Coppersmith定理攻击，也是针对n</p><p>Coppersmith定理指出在一个e阶的mod n多项式f(x)中，如果有一个根小于n^1&#x2F;e，就可以运用一个O(log n)的算法求出这些根。</p><p>这个定理可以应用于rsa算法。如果e &#x3D; 3并且在明文当中只有三分之二的比特是已知的，这种算法可以求出明文中所有的比特。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115094724598.png"                      alt="image-20221115094724598"                ></p><h3 id="4-1-2-Lattice-based-Cryptography："><a href="#4-1-2-Lattice-based-Cryptography：" class="headerlink" title="4.1.2 Lattice-based Cryptography："></a>4.1.2 Lattice-based Cryptography：</h3><p>Background：</p><p>随着当下量子计算机的研制的迅速进展，量子算法亦是相应得以巨大突破。在量子计算模型下，经典数论假设的密码体系（如大整数分解，计算有限域&#x2F;椭圆曲线上的离散对数问题等），存在多项式时间（PPT）的量子算法，换而言之，经典数论密码体系受到了极大的冲击，将有可能成为旧时代的眼泪。因此，能够抵抗量子计算机攻击的密码——“后量子”或“抗量子”密码便应运而生。</p><p>目前, 用于构建后量子密码系统的常见数学技巧包括：<br>1.杂凑函数,多变量方程(在构造签名方案时较有优势)<br>2.纠错码(更合适构造加密方案)<br>3.格(最通用的一类, 几乎所有经典密码概念都可以在格密码中实现)<br>4.超奇异椭圆曲线同源问题(当下较新的一类, 目前其中较受关注的有密钥交换和签名方案的构造,计算效率很低,还达不到实用性的要求)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115223034239.png"                      alt="image-20221115223034239"                ></p><p><a class="link"   href="https://blog.csdn.net/weixin_43255133/article/details/83031862?ops_request_misc=%7B%22request_id%22:%22166852104616782391845131%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166852104616782391845131&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-83031862-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E6%A0%BC%E5%AF%86%E7%A0%81&spm=1018.2226.3001.4187" >(3条消息) 格密码学习笔记（一）_中科院大学网安学院五班的博客-CSDN博客_格密码<i class="fas fa-external-link-alt"></i></a></p><h2 id="4-2-Crypto–Lattice"><a href="#4-2-Crypto–Lattice" class="headerlink" title="4.2 Crypto–Lattice"></a>4.2 Crypto–Lattice</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag </span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag) </span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>) </span><br><span class="line">q = gp.next_prime(p^getPrime(<span class="number">300</span>)) </span><br><span class="line"></span><br><span class="line">n = p*q*q  </span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line"></span><br><span class="line">c = gp.powmod(m,e,n) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 1657441819757560493500517852783955669448453505565270030410061904903034812851838667903292681076179721746140392331192685190606078940084193957290326586494942522658447994684113206242147782786486488436062862050720479488907160079456425398688762594497865325047151851509869420955094484022711893914207287322595902861633185849920399826569309062936190162679696321445993297117512458125412547050580265204485812236589358129086671672828599162645076611983958397948578920439799452386250795654988454192963915928293305164506837479627943346663261467474305586884553923408358862832788883664773346582688933735310806488603282226770159631772761229230574671474094221451870770630961493950451576998259008044822492004077759659701132437773984472438535462757118722089434990869144816129748753152891554265248737014747786223673274064575777197461593456413962892395208072539632132385626016349698916261814365453919077654267526533803349663404621106450916027162399</span></span><br><span class="line"><span class="string">c = 1593553679265125861785993192995912696703111560484695970440496248832386885660325028592530874649060028886120763183422597047360806209458935841437245811877714862968196063554261763749466409879047920508168205393706964912523940426199563334512062879052144213846731434858189341622618689853479805825788008893681015249513342688073719536077558806766432484683211750233531164855481666588757851308926988995968945742356896847523781439112333434449743267160262042077831263329769226240475721901216575639399568420398732862655239671453285258560223566086632412820111497447791858015410203252987331230298565756895805839776628672153301485185711776486346696438675451218026201460790552063913385567753045113924570385856031061350493346154777923602808727275442959100197205924675240921131973487280067779126475375849306092292239336121622197137677170815075931160633100612695431123755384954524364124384771024043229892682507314656508989478323824687786447911936</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><h1 id="五、Discrete-Log"><a href="#五、Discrete-Log" class="headerlink" title="五、Discrete Log"></a>五、Discrete Log</h1><h2 id="5-1-What-is-Discrete-Log"><a href="#5-1-What-is-Discrete-Log" class="headerlink" title="5.1 What is Discrete Log"></a>5.1 What is Discrete Log</h2><p>离散对数被誉为当代密码学领域的三大基础之一。1976年，Diffifie和Hellman提出了一种密钥协商协议， 产生了首个离散对数系统模型；8年后，ElGamal提出了基于离散对数系统的公钥加密和签名方法，并奠定了离散对数密码学基础。从那时起，围绕离散对数系统产生了不少研究成果，本文阐述离散对数的基本概念，然后介绍基于离散对数的ElGamal的公钥加密方法和数字签名方法（DSA）。</p><h3 id="5-1-1-Define-Discrete-Log"><a href="#5-1-1-Define-Discrete-Log" class="headerlink" title="5.1.1 Define Discrete Log:"></a>5.1.1 Define Discrete Log:</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115163033136.png"                      alt="image-20221115163033136"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115163111394.png"                      alt="image-20221115163111394"                ></p><p>定义</p><p>当模 m有原根时，设 a为模 m的一个原根，则当<br>$$<br>ak≡x(mod m)时： Indx≡k(mod ϕ(m))<br>$$<br>，此处的 Indx为 x以整数 a为底，模 ϕ(m)时的离散对数值.</p><p>性质</p><p>离散对数和一般的对数有着相类似的性质：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115161637062.png"                      alt="image-20221115161637062"                ></p><p>示例</p><p>对模5，ϕ(5)&#x3D;5−1&#x3D;4.有个原根是2. 因为</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115161703314.png"                      alt="image-20221115161703314"                ></p><p><a class="link"   href="http://abloz.com/tech/2018/06/27/discrete-logarithm/" >离散对数概念 - 瀚海星空 - 周海汉博客 (abloz.com)<i class="fas fa-external-link-alt"></i></a></p><h2 id="5-2-Crypto–Discrete-Log"><a href="#5-2-Crypto–Discrete-Log" class="headerlink" title="5.2 Crypto–Discrete Log"></a>5.2 Crypto–Discrete Log</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ts</span>(<span class="params">g,p</span>):</span><br><span class="line">    <span class="keyword">return</span> gp.powmod(g,(p-<span class="number">1</span>)//<span class="number">2</span>,p) == <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ELG</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,m</span>):</span><br><span class="line">        self.m = m  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creation</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> p,g </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = <span class="number">2</span>  </span><br><span class="line">            pr = [] </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>): </span><br><span class="line">                a = getPrime(<span class="number">20</span>)</span><br><span class="line">                pr.append(a) </span><br><span class="line">                p *= a**random.randint(<span class="number">1</span>,<span class="number">4</span>) </span><br><span class="line">            <span class="keyword">if</span> isPrime(p+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">break</span>   </span><br><span class="line">        p += <span class="number">1</span>  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>,p) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pr =&#x27;</span>,pr) </span><br><span class="line">        g = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">            g+=<span class="number">1</span> </span><br><span class="line">            <span class="keyword">if</span> ts(g,p):</span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;g =&#x27;</span>,g) </span><br><span class="line">        priv_a = random.randint(<span class="number">1</span>,p-<span class="number">1</span>) </span><br><span class="line">        pub_A = gp.powmod(g,priv_a,p) </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pub =&#x27;</span>,pub_A) </span><br><span class="line">        <span class="keyword">return</span> priv_a,pub_A </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self,m,pub</span>):</span><br><span class="line">        k = random.randint(<span class="number">2</span>&lt;&lt;<span class="number">100</span>,<span class="number">2</span>&lt;&lt;<span class="number">200</span>)  </span><br><span class="line">        c1 = gp.powmod(g,k,p) </span><br><span class="line">        c2 = (m * gp.powmod(pub,k,p)) % p </span><br><span class="line">        <span class="keyword">return</span> c1,c2  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">self</span>): </span><br><span class="line">        priv,pub = self.creation() </span><br><span class="line">        c1,c2 = self.enc(self.m,pub) </span><br><span class="line">        <span class="keyword">return</span> c1,c2 </span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span> </span><br><span class="line"><span class="keyword">if</span> DEBUG: </span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)  </span><br><span class="line">    elg = ELG(bytes_to_long(flag)) </span><br><span class="line">    c1,c2 = elg.conn() </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>,c1) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>,c2) </span><br><span class="line">    c = aes.encrypt(flag)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cipher =&#x27;</span>,bytes_to_long(c))    </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 240311898144666004845993472603553263322756300779157768701176199291766409589743098329948576886913307536581636947347700640539029536089210573230307671485961868117315471159814486642321020898269103855126517533262247331484819745914498053780059371263306840883425781625061104966618125509054939865409539648498696187295927</span></span><br><span class="line"><span class="string">g = 5</span></span><br><span class="line"><span class="string">pub = 134285622222383211593143419284735141120812420703242474727692334574646766372588113350683719458438557808968651014501757534179743215386357063432496866596113430845534517856556614675236061221959886358825348089193378086912994104626194570995572907279789332330634572963965215940753665380396874414753113588963071439984133</span></span><br><span class="line"><span class="string">c1 = 59866977306496443433230989875501170590733738724206572571973692325202707443627775293269002455283846854135556345025196628657530983549383681055008873942332984996831735632074040992205674787686019847478343708531796808561868062324972209667292857694231350874772127330748101130540816455846043028497370515427917876173767</span></span><br><span class="line"><span class="string">c2 = 189736523869687408218680256920128645519881608991064724826055201457101208294761171595467115162913230133265415706153044192480307701067740580637047863932982867754412493322841249939735690673297501484346546496379585941155099078148120702397606052034259931372433234626469922863663420459070532806854867523903923301588710</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cipher = 106965036567008443490243813427422441161051668015352122219256553139516361341928</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></div><h1 id="六、Inverse"><a href="#六、Inverse" class="headerlink" title="六、Inverse"></a>六、Inverse</h1><h2 id="6-1-What-is-inverse"><a href="#6-1-What-is-inverse" class="headerlink" title="6.1 What is inverse"></a>6.1 What is inverse</h2><h3 id="6-6-1-Define-inverse"><a href="#6-6-1-Define-inverse" class="headerlink" title="6.6.1 Define inverse:"></a>6.6.1 Define inverse:</h3><p>Inverse，即逆元。</p><p>我们都知道倒数的概念，逆元可以说是扩大了概念的倒数。在模运算中，若ab≡1（mod m)，则称b为模m下a的逆元。</p><p>求解公式(a&#x2F;b)%m 时，因b可能会过大，会出现爆精度的情况，所以需<strong>变除法为乘法</strong>：</p><h3 id="6-1-2-Inverse’s-application："><a href="#6-1-2-Inverse’s-application：" class="headerlink" title="6.1.2 Inverse’s application："></a>6.1.2 Inverse’s application：</h3><p>那么逆元有什么用呢？<br>(a + b) % p &#x3D; (a%p + b%p) %p （对）<br>(a - b) % p &#x3D; (a%p - b%p) %p （对）<br>(a * b) % p &#x3D; (a%p * b%p) %p （对）<br>(a &#x2F; b) % p &#x3D; (a%p &#x2F; b%p) %p （错）<br>在求余的过程中我们发现只有除法是不能分开运算的，而当a过大时，在计算除法过程中可能会造成比较大的精度损失，所以对于这种情况我们一般会把式子转换成那么(a &#x2F; b) % p &#x3D; (a * inv(b) ) % p &#x3D; (a % p * inv(b) % p) % p来进行计算。这样就解决了除法不能分开计算的问题。<br>需要注意只有a和p互质，a才有关于p的逆元</p><p><a class="link"   href="https://blog.csdn.net/weixin_45757507/article/details/107506285" >https://blog.csdn.net/weixin_45757507/article/details/107506285<i class="fas fa-external-link-alt"></i></a></p><h3 id="6-1-3-Achieve-ways："><a href="#6-1-3-Achieve-ways：" class="headerlink" title="6.1.3  Achieve ways："></a>6.1.3  Achieve ways：</h3><p><strong>1.费马小定理</strong></p><p>费马小定理：<a class="link"   href="https://blog.csdn.net/weixin_50187215/article/details/120120850?ops_request_misc=%7B%22request_id%22:%22166850921116782417098992%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166850921116782417098992&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120120850-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86&spm=1018.2226.3001.4187" >(3条消息) 费马小定理及其应用_不见月光见星光的博客-CSDN博客_费马小定理应用<i class="fas fa-external-link-alt"></i></a></p><p>费马小定理(Fermat’s little theorem)是数论中的一个重要定理，在1636年提出。</p><p>如果p是一个质数，而整数a不是p的倍数，则有a^（p-1）≡1（mod p）<br>费马小定理规定了p一定为一个质数，所以a和p一定互质<br>那么双方在modp的意义下同时除a可得<br>a^(p-2) ≡1&#x2F;a (mod p)<br>也就是a^(p-2) ≡ inv(a) (mod p)<br>所以inv(a) &#x3D; a^(p-2) (mod p)</p><p><strong>2.扩展欧几里得算法求逆元</strong></p><p>欧几里得算法：<a class="link"   href="https://blog.csdn.net/ltrbless/article/details/86770606?ops_request_misc=%7B%22request_id%22:%22166850921316782428637689%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166850921316782428637689&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-86770606-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187" >(3条消息) 欧几里得算法原理_ltrbless的博客-CSDN博客_欧几里得算法<i class="fas fa-external-link-alt"></i></a></p><p>如果gcd（a，p）&#x3D;1；<br>那么就有ax+py&#x3D;1<br>双方同时modp<br>就有ax≡1（modp）<br>因为py是p的倍数全部约掉了<br>此时x就是a的逆元<br>所以只需解出该情况下的扩展欧几里得方程的解问题就解决了</p><h2 id="6-2-Inverse–Coding"><a href="#6-2-Inverse–Coding" class="headerlink" title="6.2 Inverse–Coding"></a>6.2 Inverse–Coding</h2><p>参考书目以及参考的资料：</p><p>《An Introduction to Mathematical Cryptography》</p><p><a class="link"   href="https://blog.csdn.net/weixin_40156933/article/details/83866348?ops_request_misc=%7B%22request_id%22:%22166850957516800184169684%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166850957516800184169684&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-83866348-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=python%E6%B1%82%E9%80%86%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F&spm=1018.2226.3001.4187" >(3条消息) Python在GF(2⁸)有限域上求解多项式的乘法逆元——基于扩展欧几里得算法_海绵菌的博客-CSDN博客_有限域多项式乘法<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-、RSA&quot;&gt;&lt;a href=&quot;#一-、RSA&quot; class=&quot;headerlink&quot; title=&quot;一 、RSA&quot;&gt;&lt;/a&gt;一 、RSA&lt;/h1&gt;&lt;h2 id=&quot;1-1-What-is-RSA&quot;&gt;&lt;a href=&quot;#1-1-What-is-RSA&quot; class</summary>
      
    
    
    
    
    <category term="面试小结" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>DES-Study</title>
    <link href="http://example.com/2023/04/13/DES-Study/"/>
    <id>http://example.com/2023/04/13/DES-Study/</id>
    <published>2023-04-13T13:27:38.000Z</published>
    <updated>2023-04-13T13:35:42.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DES-Study"><a href="#DES-Study" class="headerlink" title="DES-Study"></a>DES-Study</h1><p><strong>强加密算法</strong>（基于以下两种本源操作）：</p><p>（1）混淆（Confusion）：是一种使密钥与密文之间的关系尽可能模糊的加密操作。如今实 现混淆常用的一个元素就是替换；这个元素在DES和AES中都有使用。 </p><p>（2）扩散（Diffusion）：是一种为了隐藏明文的统计属性而将一个明文符号的影响扩散到 多个密文符号的加密操作。最简单的扩散元素就是位置换，它常用于DES中；而AES则使用更高级的 Mixcolumn 操作。 </p><h2 id="1-Define"><a href="#1-Define" class="headerlink" title="1.Define"></a>1.Define</h2><p>DES是一种使用56位密钥对64位长分组进行加密的密码（如图3-3）。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/04/13/DES-Study/image-20230313202706948.png"                      class="" title="image-20230313202706948"                ><p>DES是一种对称密码，即其加密过程和解密过程使用相同的密钥。与几乎所有现代分组加密一样，DES也是一种迭代算法。DES对明文中每个分组的加密过程都包含16轮，且每轮的操作完全相同。图3-4显示了DES的轮结构。每轮都会使用不同的子密钥，并且所有子密钥k；都从主密钥k中推导而来的。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/04/13/DES-Study/image-20230313202815077.png"                      class="" title="image-20230313202815077"                ><h2 id="2-Feistel网络"><a href="#2-Feistel网络" class="headerlink" title="2.Feistel网络"></a>2.Feistel网络</h2><p>每轮中仅加密输入为的一半，未加密右半部分，用的是伪随机数产生器的输出对左半部分进行XOR操作。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/04/13/DES-Study/image-20230313204920579.png"                      class="" title="image-20230313204920579"                >]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DES-Study&quot;&gt;&lt;a href=&quot;#DES-Study&quot; class=&quot;headerlink&quot; title=&quot;DES-Study&quot;&gt;&lt;/a&gt;DES-Study&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;强加密算法&lt;/strong&gt;（基于以下两种本源操作）：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Python-study</title>
    <link href="http://example.com/2023/02/24/Python-study/"/>
    <id>http://example.com/2023/02/24/Python-study/</id>
    <published>2023-02-24T09:10:59.000Z</published>
    <updated>2023-04-13T13:22:07.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python学习笔记"><a href="#Python学习笔记" class="headerlink" title="Python学习笔记"></a>Python学习笔记</h1><h1 id="Python教程-廖雪峰的官方网站-liaoxuefeng-com"><a href="#Python教程-廖雪峰的官方网站-liaoxuefeng-com" class="headerlink" title="(Python教程 - 廖雪峰的官方网站 (liaoxuefeng.com))"></a>(<a class="link"   href="https://www.liaoxuefeng.com/wiki/1016959663602400" >Python教程 - 廖雪峰的官方网站 (liaoxuefeng.com)<i class="fas fa-external-link-alt"></i></a>)</h1><p>By：jrl</p><h1 id="一、Python基础"><a href="#一、Python基础" class="headerlink" title="一、Python基础"></a>一、Python基础</h1><h2 id="1-多行注释："><a href="#1-多行注释：" class="headerlink" title="1.多行注释："></a>1.多行注释：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20221121161839273.png"                      alt="image-20221121161839273"                ></p><h2 id="2-变量："><a href="#2-变量：" class="headerlink" title="2.变量："></a>2.变量：</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="Python-study\image-20221121162220999.png"                      alt="image-20221121162220999" style="zoom:66%;"                 ><h2 id="3-除法："><a href="#3-除法：" class="headerlink" title="3.除法："></a>3.除法：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20221121163251476.png"                      alt="image-20221121163251476"                ></p><h2 id="4-Unicode与Utf-8："><a href="#4-Unicode与Utf-8：" class="headerlink" title="4.Unicode与Utf-8："></a>4.Unicode与Utf-8：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20221121164752301.png"                      alt="image-20221121164752301"                ></p><p>Unicode虽然范围广，可以编码汉字，但是占存储空间大，所以转为Utf-8储存。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20221122161837329.png"                      alt="image-20221122161837329"                ></p><h2 id="5-字符编码："><a href="#5-字符编码：" class="headerlink" title="5.字符编码："></a>5.字符编码：</h2><p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20221122162404728.png"                      alt="image-20221122162404728"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20221122163630967.png"                      alt="image-20221122163630967"                ></p><p>文件开头一般写入的注释：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20230224154919596.png"                      alt="image-20230224154919596"                ></p><h2 id="6-格式化字符串的方法："><a href="#6-格式化字符串的方法：" class="headerlink" title="6.格式化字符串的方法："></a>6.格式化字符串的方法：</h2><h3 id="1）使用占位符"><a href="#1）使用占位符" class="headerlink" title="1）使用占位符"></a>1）使用占位符</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20230224160555460.png"                      alt="image-20230224160555460"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Age: %s. Gender: %s&#x27;</span> % (<span class="number">25</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;growth rate: %d %%&#x27;</span> % <span class="number">7</span>   <span class="comment"># %%转义字符 表示一个%</span></span><br></pre></td></tr></table></figure></div><h3 id="2）foramt"><a href="#2）foramt" class="headerlink" title="2）foramt()"></a>2）foramt()</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20230224165831828.png"                      alt="image-20230224165831828"                ></p><p>3）f-strng</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="/Python-study%5Cimage-20230224165814292.png"                      alt="image-20230224165814292"                ></p><h2 id="7-list与tuple"><a href="#7-list与tuple" class="headerlink" title="7.list与tuple"></a>7.list与tuple</h2><h3 id="1-list"><a href="#1-list" class="headerlink" title="(1)list"></a>(1)list</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg</span></span><br><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(classmates)  <span class="comment">#获得list元素的个数</span></span><br><span class="line">classmates[<span class="number">0</span>]   <span class="comment">#用索引来访问list中每一个位置的元素</span></span><br><span class="line">classmates[-<span class="number">1</span>]  <span class="comment">#访问最后一个元素的位置</span></span><br><span class="line">classmates.append(<span class="string">&#x27;Adam&#x27;</span>)  <span class="comment"># append() 可以往list中追加元素到末尾</span></span><br><span class="line">classmates.insert(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>)  <span class="comment">#也可以把元素插入到指定的位置</span></span><br><span class="line">classmates.pop()  <span class="comment"># pop(i) 删除list末尾的元素</span></span><br></pre></td></tr></table></figure></div><h3 id="2-tuple"><a href="#2-tuple" class="headerlink" title="(2)tuple"></a>(2)tuple</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classmates = (<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>)</span><br><span class="line">t = () <span class="comment">#或者()  定义空tuple</span></span><br><span class="line">t=(<span class="number">1</span>,) <span class="comment">#定义只有一个元素的tuple</span></span><br></pre></td></tr></table></figure></div><h2 id="8-条件判断"><a href="#8-条件判断" class="headerlink" title="8.条件判断"></a>8.条件判断</h2><p>elif(else if)</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>input()的返回类型是str,str不能直接与整数比较，须转化</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="9-循环"><a href="#9-循环" class="headerlink" title="9.循环"></a>9.循环</h2><h3 id="1-for-in-循环"><a href="#1-for-in-循环" class="headerlink" title="(1)for  in  循环"></a>(1)for  in  循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#历遍list或者tulpe中的元素</span></span><br><span class="line">names = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#求和</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><p>当须历遍的范围过大时，可使用range()函数</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))    <span class="comment">#[0, 1, 2, 3, 4]  0-4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2-while循环"><a href="#2-while循环" class="headerlink" title="(2)while循环"></a>(2)while循环</h3><p>只要条件满足，就不断循环，条件不满足时退出循环</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><p><strong>break</strong></p><p>在循环中，break语句可以提前退出循环</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p><strong>continue</strong></p><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure></div><h2 id="10-dict和set"><a href="#10-dict和set" class="headerlink" title="10.dict和set"></a>10.dict和set</h2><h3 id="1-dict"><a href="#1-dict" class="headerlink" title="(1)dict"></a>(1)dict</h3><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><p>先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，给定一个名字，比如<code>&#39;Michael&#39;</code>，dict在内部就可以直接计算出<code>Michael</code>对应的存放成绩的“页码”，也就是<code>95</code>这个数字存放的内存地址，直接取出来，所以速度非常快。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;Adam&#x27;</span>] = <span class="number">67</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment">#要删除一个key，用pop(key)方法，对应的value也会从dict中删除：</span></span><br><span class="line"> d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉，如果key不存在，dict就会报错要避免key不存在的错误，有两种办法</p><p>一是通过<code>in</code>判断key是否存在：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br></pre></td></tr></table></figure></div><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.get(<span class="string">&#x27;Thomas&#x27;</span>)</span><br><span class="line">d.get(<span class="string">&#x27;Thomas&#x27;</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">要删除一个key，用pop(key)方法，对应的value也会从<span class="built_in">dict</span>中删除：</span><br><span class="line"> d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="dict与list比较"><a href="#dict与list比较" class="headerlink" title="dict与list比较"></a>dict与list比较</h4><p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p><p>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol><p>所以，dict是用空间来换取时间的一种方法。</p><p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是<strong>不可变对象</strong>。</p><p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。</p><p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p><h3 id="2-set"><a href="#2-set" class="headerlink" title="(2)set"></a>(2)set</h3><p> set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要创建一个set，需要提供一个list作为输入集合：</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，传入的参数[1, 2, 3]是一个list，而显示的&#123;1, 2, 3&#125;只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的     重复元素在set中自动被过滤：</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])                <span class="comment">#  &gt;&gt; s    &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过remove(key)方法可以删除元素：</span></span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></div><h4 id="set与dict比较"><a href="#set与dict比较" class="headerlink" title="set与dict比较"></a>set与dict比较</h4><p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><p>str是不变对象，而list是可变对象</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：</span></span><br><span class="line">a = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于不可变对象，比如str，对str进行操作呢：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#replace并不是真的改变了变量a所指向的字符串&quot;abc&quot;，而是创建了一个新的变量b，指向&quot;Abc&quot;</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230319191110780.png"                      alt="image-20230319191110780"                ></p><h1 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h1><h2 id="1-调用函数"><a href="#1-调用函数" class="headerlink" title="1.调用函数"></a>1.调用函数</h2><p>可以通过官网来调查函数： <a class="link"   href="http://docs.python.org/3/library/functions.html#abs" >http://docs.python.org/3/library/functions.html#abs<i class="fas fa-external-link-alt"></i></a></p><p>也可以在交互式命令行通过help(),查看函数的帮助信息。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg: 数据类型转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">&#x27;12.34&#x27;</span>)</span><br><span class="line"><span class="number">12.34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">1.23</span>)</span><br><span class="line"><span class="string">&#x27;1.23&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></div><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">abs</span> <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></div><h2 id="2-定义函数"><a href="#2-定义函数" class="headerlink" title="2.定义函数"></a>2.定义函数</h2><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><p>我们以自定义一个求绝对值的<code>my_abs</code>函数为例：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> 请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）：</span></span><br></pre></td></tr></table></figure></div><p><strong>交互式环境</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230320200608122.png"                      alt="image-20230320200608122"                ></p><h3 id="1-空函数"><a href="#1-空函数" class="headerlink" title="(1)空函数"></a>(1)空函数</h3><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nop</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。</span></span><br><span class="line"><span class="comment"># pass还可以用在其他语句里，比如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><h3 id="2-参数检查"><a href="#2-参数检查" class="headerlink" title="(2)参数检查"></a>(2)参数检查</h3><p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出<code>TypeError</code>：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br></pre></td></tr></table></figure></div><p>但是如果参数类型不对，Python解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: unorderable types: <span class="built_in">str</span>() &gt;= <span class="built_in">int</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></div><p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p><p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance()</code>实现：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;bad operand type&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure></div><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span></span><br></pre></td></tr></table></figure></div><h3 id="3-关于返回值"><a href="#3-关于返回值" class="headerlink" title="(3)关于返回值"></a>(3)关于返回值</h3><p>Python中的返回值是唯一的</p><p>Eg： 在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">x, y, step, angle=<span class="number">0</span></span>):</span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br></pre></td></tr></table></figure></div><p>然后，我们就可以同时获得返回值：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x, y)</span><br><span class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></span><br></pre></td></tr></table></figure></div><p>但其实这只是一种假象，Python函数返回的仍然是单一值：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r)</span><br><span class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</span><br></pre></td></tr></table></figure></div><p><strong>原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</strong></p><h2 id="3-函数的参数"><a href="#3-函数的参数" class="headerlink" title="3.函数的参数"></a>3.函数的参数</h2><p>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p><h3 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="(1)位置参数"></a>(1)位置参数</h3><p>我们先写一个计算x2的函数</p><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数</p><p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, n</span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></div><h3 id="2-默认参数"><a href="#2-默认参数" class="headerlink" title="(2)默认参数"></a>(2)默认参数</h3><p>新的<code>power(x, n)</code>函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: power() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;n&#x27;</span></span><br></pre></td></tr></table></figure></div><p>这个时候，默认参数就排上用场了。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></div><p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入n，比如<code>power(5, 3)</code>。</p><p>从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><p>一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；</p><p>二是如何设置默认参数。</p><p>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p><p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p><p>举个例子，我们写个一年级小学生注册的函数，需要传入<code>name</code>和<code>gender</code>两个参数：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enroll</span>(<span class="params">name, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;gender:&#x27;</span>, gender)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。我们可以把年龄和城市设为默认参数，这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enroll</span>(<span class="params">name, gender, age=<span class="number">6</span>, city=<span class="string">&#x27;Beijing&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;gender:&#x27;</span>, gender)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;age:&#x27;</span>, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;city:&#x27;</span>, city)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#只有与默认参数不符的学生才需要提供额外的信息：</span></span><br><span class="line">enroll(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">7</span>)</span><br><span class="line">enroll(<span class="string">&#x27;Adam&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, city=<span class="string">&#x27;Tianjin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll(&#x27;Adam&#x27;, &#x27;M&#x27;, city=&#x27;Tianjin&#x27;)，意思是，city参数用传进去的值，其他默认参数继续使用默认值。</span></span><br></pre></td></tr></table></figure></div><p><strong>默认函数最大的坑</strong>：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先定义一个函数，传入一个list，添加一个END再返回：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_end</span>(<span class="params">L=[]</span>):</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="comment">#当你正常调用时，结果似乎不错：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#当你使用默认参数调用时，一开始结果也是对的：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是，再次调用add_end()时，结果就不对了：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>这是因为：</p><p>Python函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p><p> <strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要修改上面的例子，我们可以用None这个不变对象来实现：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_end</span>(<span class="params">L=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="comment">#为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</span></span><br></pre></td></tr></table></figure></div><h3 id="3-可变参数"><a href="#3-可变参数" class="headerlink" title="(3)可变参数"></a>(3)可变参数</h3><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p><p>我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。</p><p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#但是调用的时候，需要先组装出一个list或tuple：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</span><br><span class="line"><span class="number">84</span></span><br></pre></td></tr></table></figure></div><p>我们把函数的参数改为可变参数：</p><p>Python允许你在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去：</p><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用该函数时，可以传入任意个参数，包括0个参数：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure></div><h3 id="4-关键字参数"><a href="#4-关键字参数" class="headerlink" title="(4)关键字参数"></a>(4)关键字参数</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python学习笔记&quot;&gt;&lt;a href=&quot;#Python学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记&quot;&gt;&lt;/a&gt;Python学习笔记&lt;/h1&gt;&lt;h1 id=&quot;Python教程-廖雪峰的官方网站-liaoxuefeng-com</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C-Study-1</title>
    <link href="http://example.com/2023/02/20/C-Study-1/"/>
    <id>http://example.com/2023/02/20/C-Study-1/</id>
    <published>2023-02-20T08:34:04.000Z</published>
    <updated>2023-02-20T08:36:12.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-STUDY-1"><a href="#C-STUDY-1" class="headerlink" title="C-STUDY-1"></a>C-STUDY-1</h1><h2 id="一、指针"><a href="#一、指针" class="headerlink" title="一、指针"></a>一、指针</h2><h2 id="（-14条消息-C语言指针详解-经典-非常详细-liu100m的博客-CSDN博客-c语言指针用法详解）"><a href="#（-14条消息-C语言指针详解-经典-非常详细-liu100m的博客-CSDN博客-c语言指针用法详解）" class="headerlink" title="（(14条消息) C语言指针详解(经典,非常详细)_liu100m的博客-CSDN博客_c语言指针用法详解）"></a>（<a class="link"   href="https://blog.csdn.net/liu100m/article/details/90731422?ops_request_misc=%7B%22request_id%22:%22167592955016800182737687%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167592955016800182737687&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90731422-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88&spm=1018.2226.3001.4187" >(14条消息) C语言指针详解(经典,非常详细)_liu100m的博客-CSDN博客_c语言指针用法详解<i class="fas fa-external-link-alt"></i></a>）</h2><h3 id="1-指针类型的意义"><a href="#1-指针类型的意义" class="headerlink" title="1.指针类型的意义"></a>1.指针类型的意义</h3><p>指针类型决定了：指针解引用的权限有多大，以及“+1”时走的步长(int,4字节  char，1字节，因为只跳过一个字符)</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span>*p=arr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)               //整形数据占<span class="number">4</span>字节，若换成 char*p则无法将arr中的元素全赋值为<span class="number">0</span></span><br><span class="line">    &#123;</span><br><span class="line">        *(p+i)=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;%d\n&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>记得将指针初始化，若不知道则赋值为空指针</p><p>int*p&#x3D;NULL;   &#x2F;&#x2F;此时仍然无法赋值，因为NULL不属于个人</p><h3 id="2-指针的运算"><a href="#2-指针的运算" class="headerlink" title="2.指针的运算"></a>2.指针的运算</h3><p>指针-指针  得到的是两个指针间元素的个数  (前提是指针类型相同且指向同一空间)</p><p>指针+指针   无意义</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>,&amp;arr[<span class="number">9</span>]-&amp;arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-指针与数组"><a href="#3-指针与数组" class="headerlink" title="3.指针与数组"></a>3.指针与数组</h3><p>数组名是数组首元素的首地址</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">  printf(<span class="string">&quot;%p&quot;</span>,arr);   //等价于  printf(<span class="string">&quot;%p&quot;</span>,&amp;arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="4-二级指针"><a href="#4-二级指针" class="headerlink" title="4.二级指针"></a>4.二级指针</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">int</span>*p=&amp;a;      //p是指针变量，一级指针</span><br><span class="line">    <span class="built_in">int</span>**pa=&amp;p;   //pa也是指针变量，二级指针   &amp;pa取出pa在内存中的起始地址</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="二、文件"><a href="#二、文件" class="headerlink" title="二、文件"></a>二、文件</h2><p>(<a class="link"   href="https://blog.csdn.net/ZJRUIII/article/details/120552735?ops_request_misc=%7B%22request_id%22:%22167621220216800211584148%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167621220216800211584148&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-120552735-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6&spm=1018.2226.3001.4187" >(14条消息) C语言文件操作（含详细步骤）_zjruiiiiii的博客-CSDN博客_c语言文件操作<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="三、链表"><a href="#三、链表" class="headerlink" title="三、链表"></a>三、链表</h2><p>(<a class="link"   href="https://blog.csdn.net/k666499436/article/details/124787990?ops_request_misc=%7B%22request_id%22:%22167621218716800186546589%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167621218716800186546589&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-124787990-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8&spm=1018.2226.3001.4187" >(14条消息) C语言链表超详解_rivencode的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a>)</p><p>？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-STUDY-1&quot;&gt;&lt;a href=&quot;#C-STUDY-1&quot; class=&quot;headerlink&quot; title=&quot;C-STUDY-1&quot;&gt;&lt;/a&gt;C-STUDY-1&lt;/h1&gt;&lt;h2 id=&quot;一、指针&quot;&gt;&lt;a href=&quot;#一、指针&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="C-study" scheme="http://example.com/tags/C-study/"/>
    
  </entry>
  
  <entry>
    <title>Hgame-2023-note</title>
    <link href="http://example.com/2023/01/17/Hgame-2023-note/"/>
    <id>http://example.com/2023/01/17/Hgame-2023-note/</id>
    <published>2023-01-17T11:16:36.000Z</published>
    <updated>2023-01-17T11:23:01.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p><strong>TASK：</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c=110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line"><span class="string">n=135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><p><strong>WP：</strong></p><p>直接分解N，求解</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HGAME-RSA</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2  </span><br><span class="line"></span><br><span class="line">n=<span class="number">135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line">p=<span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">q=<span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br><span class="line"></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure></div><p><strong>flag:</strong>  <strong>hgame{factordb.com_is_strong!}</strong></p><h3 id="MORSE"><a href="#MORSE" class="headerlink" title="MORSE+"></a>MORSE+</h3><p><strong>Task:</strong></p><p>学校突然放假了，tr0uble正在开开心心的收拾东西准备回家，但是手机铃声突然响起，tr0uble接起电话，但是只听到滴答滴答的声音。努力学习密码学的tr0uble一听就知道这是什么，于是马上记录下来并花了亿点时间成功破译了，但是怎么看这都不像是人能看懂的，还没等tr0uble反应过来，又一通电话打来，依然是滴答滴答的声音。tr0uble想到兔兔也在学习密码学，于是不负责任地把密文都交给了兔兔，兔兔收到密文后随便看了一眼就不屑地说”这么简单都不会？自己解去，别耽误我抢车票”。 </p><p>Encrypted_message:</p><p>5Yeg5Liq5pif5pyf5YmN77yM5oiR5Lus5pS25Yiw5LiA5Liq56We56eY55qE5raI5oGv44CC5L2G5piv6L+Z5Liq5raI5oGv6KKr6YeN6YeN5Yqg5a+G77yM5oiR5Lus5LiN55+l6YGT5a6D55qE55yf5q2j5ZCr5LmJ5piv5LuA5LmI44CC5ZSv5LiA55+l6YGT55qE5L+h5oGv5piv5YWz5LqO5a+G6ZKl55qE77ya4oCc5Y+q5pyJ5YCS552A57+76L+H5Y2B5YWr5bGC55qE56+x56yG5omN6IO95oq16L6+5YyX5qyn56We6K+d55qE57uI54K54oCd44CC</p><p>base64解密后得到：</p><p>几个星期前，我们收到一个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什么。唯一知道的信息是关于密钥的：“只有倒着翻过十八层的篱笆才能抵达北欧神话的终点”。</p><p>使用Audacity解析Morse得到加密信息：</p><p>0223e_priibly__honwa_jmgh_fgkcqaoqtmfr</p><p>逆序：</p><p>rfmtqoaqckgf_hgmj_awnoh__ylbiirp_e3220</p><p><strong>W型栅栏密码：</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_w</span>(<span class="params">string, n</span>): </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;将字符排列成w型&#x27;&#x27;&#x27;</span></span><br><span class="line">    array = [[<span class="string">&#x27;.&#x27;</span>]*<span class="built_in">len</span>(string) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="comment">#生成初始矩阵</span></span><br><span class="line">    row =<span class="number">0</span></span><br><span class="line">    upflag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#在矩阵上按w型画出string</span></span><br><span class="line">        array[row][col] = string[col]</span><br><span class="line">        <span class="keyword">if</span> row == n-<span class="number">1</span>:</span><br><span class="line">            upflag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">            upflag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> upflag:</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">string, n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;解密&#x27;&#x27;&#x27;</span></span><br><span class="line">    array = generate_w(string, n)</span><br><span class="line">    sub = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment">#将w型字符按行的顺序依次替换为string</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                array[row][col] = string[sub]</span><br><span class="line">                sub += <span class="number">1</span></span><br><span class="line">    msg = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#以列的顺序依次连接各字符</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                msg.append(array[row][col])</span><br><span class="line">    <span class="keyword">return</span> array, msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_cipher</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(string)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(n)+<span class="string">&#x27;栏:&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(decode(string,n)[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    string = <span class="string">&quot;rfmtqoaqckgf_hgmj_awnoh__ylbiirp_e3220&quot;</span></span><br><span class="line">    crack_cipher(string)</span><br><span class="line"><span class="comment">#18栏: rmocfhm_wo_ybipe2023_ril_hnajg_katfqqg</span></span><br></pre></td></tr></table></figure></div><p><strong>最后维吉尼亚密码解密：</strong></p><p>Key: vidar</p><p><strong>flag:hgame{welcome_to_hgame2023_and_enjoy_hacking}</strong></p><h3 id="Stream-Cipher"><a href="#Stream-Cipher" class="headerlink" title="Stream Cipher"></a>Stream Cipher</h3><p><strong>Task:</strong></p><p>很喜欢李小龙先生的一句话”Be water my friend”，但是这条小溪的水好像太多了。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span></span><br></pre></td></tr></table></figure></div><p><strong>wp:</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag        <span class="comment">#flag未知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span>   <span class="comment">#assert要求表达式的布尔值必须为真，说明flag的数据形式为bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"><span class="comment">#key=[4784265876259235186,2019423192753765707364]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]   <span class="comment">#key[0]=4784265876259235186</span></span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]   <span class="comment">#key[1]=2019423192753765707364</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):   </span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span>     <span class="comment">#地板除向下取整 114 110</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WEEK1&quot;&gt;&lt;a href=&quot;#WEEK1&quot; class=&quot;headerlink&quot; title=&quot;WEEK1&quot;&gt;&lt;/a&gt;WEEK1&lt;/h2&gt;&lt;h3 id=&quot;RSA&quot;&gt;&lt;a href=&quot;#RSA&quot; class=&quot;headerlink&quot; title=&quot;RSA&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="CTF小试" scheme="http://example.com/tags/CTF%E5%B0%8F%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SYC三面</title>
    <link href="http://example.com/2022/12/16/SYC/"/>
    <id>http://example.com/2022/12/16/SYC/</id>
    <published>2022-12-16T07:36:21.000Z</published>
    <updated>2022-12-16T07:46:02.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-对于Task代码注释的补齐"><a href="#1-对于Task代码注释的补齐" class="headerlink" title="1.对于Task代码注释的补齐"></a><em>1.对于Task代码注释的补齐</em></h2><h3 id="1-1-Task："><a href="#1-1-Task：" class="headerlink" title="1.1 Task："></a><em>1.1 <strong>Task：</strong></em></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">100</span>)    <span class="comment">#说明含义</span></span><br><span class="line">q = getPrime(<span class="number">100</span>)    <span class="comment">#说明含义</span></span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    <span class="comment">#说明含义</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)   <span class="comment">#说明含义</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:   <span class="comment">#说明含义</span></span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="1-2-注释与补齐："><a href="#1-2-注释与补齐：" class="headerlink" title="1.2 注释与补齐："></a><em>1.2 <strong>注释与补齐：</strong></em></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag  <span class="comment">#flag未知</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line"><span class="comment">#getPrime来自Crypto库中的Util.number模块，其作用是随机获得一个N比特位的素数，同时进行检验，确保正确性  </span></span><br><span class="line">p = getPrime(<span class="number">100</span>)   <span class="comment">#随机获得一个100比特位的素数，并将它的值赋值给p</span></span><br><span class="line">q = getPrime(<span class="number">100</span>)   <span class="comment">#随机获得一个100比特位的素数，并将它的值赋值给q</span></span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    <span class="comment">#将flag转为二进制数，获取从偏移为2到末尾的数，再历遍所有可能</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)   <span class="comment">#生成在1与n之间的整数x(1&lt;=x&lt;=n)</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:   <span class="comment">#引用gp.gcd函数，判断x与n是否互质</span></span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)  <span class="comment">#将c添加到clist列表末尾</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给出n与若干组c的值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="2-Paper‘s-notes"><a href="#2-Paper‘s-notes" class="headerlink" title="2.Paper‘s notes"></a><em>2.Paper‘s notes</em></h2><h3 id="2-1-关于数论："><a href="#2-1-关于数论：" class="headerlink" title="2.1 关于数论："></a><em>2.1 关于数论：</em></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128155523295.png"                      alt="image-20221128155523295"                ></p><p><strong>论文中会自主定义一些乘法群、域</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128160020999.png"                      alt="image-20221128160020999" style="zoom:80%;"                 ><h3 id="2-2-中国剩余定理与二次剩余："><a href="#2-2-中国剩余定理与二次剩余：" class="headerlink" title="2.2 中国剩余定理与二次剩余："></a><em>2.2 中国剩余定理与二次剩余：</em></h3><h4 id="2-2-1-中国剩余定理："><a href="#2-2-1-中国剩余定理：" class="headerlink" title="2.2.1 中国剩余定理："></a><em>2.2.1 中国剩余定理：</em></h4><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128161638439.png"                      alt="image-20221128161638439" style="zoom:80%;"                 ><p><strong>中国剩余定理公式：</strong></p><blockquote><p>设正整数<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184134796"                      alt="img"                >两两互素，则同余方程组</p><p>​               <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184240203"                      alt="img"                ></p><p>有整数解。并且在模<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184354156"                      alt="img"                >下的解是唯一的，解为</p><p>​                <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184502609"                      alt="img"                ></p><p>其中<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184601062"                      alt="img"                >，而<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184638140"                      alt="img"                >为<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184737359"                      alt="img"                >模<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140904164235549"                      alt="img"                >的逆元。</p></blockquote><p><a class="link"   href="https://www.cnblogs.com/MashiroSky/p/5918158.html" >中国剩余定理学习笔记 - MashiroSky - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><h4 id="2-2-2-二次剩余："><a href="#2-2-2-二次剩余：" class="headerlink" title="2.2.2 二次剩余："></a><em>2.2.2 二次剩余：</em></h4><h5 id="1-二次剩余定理："><a href="#1-二次剩余定理：" class="headerlink" title="1. 二次剩余定理："></a><em><strong>1. 二次剩余定理：</strong></em></h5><p>对于n和素数p来说，存在x使</p><p> 方程  x^2≡n(mod p)    </p><p>成立</p><h5 id="2-引入符号："><a href="#2-引入符号：" class="headerlink" title="2. 引入符号："></a><em>2. <strong>引入符号：</strong></em></h5><p>勒让德符号，这个符号里有两个值，一个是n,一个是p。假设p为奇素数，且n无法整除p时，有以下定义</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128164649412.png"                      alt="image-20221128164649412"                ></p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128164748783.png"                      alt="image-20221128164748783" style="zoom:80%;"                 ><p><strong>类似于paper中的雅可比符号</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128171832142.png"                      alt="image-20221128171832142"                ></p><h5 id="3-证明："><a href="#3-证明：" class="headerlink" title="3. 证明："></a><em>3. 证明：</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128165544913.png"                      alt="image-20221128165544913"                ></p><p><a class="link"   href="https://blog.csdn.net/weixin_44203780/article/details/104634637" >(5条消息) 二次剩余定理详解_gerayking的博客-CSDN博客_二次剩余定理<i class="fas fa-external-link-alt"></i></a></p><h3 id="2-3-笔记整理："><a href="#2-3-笔记整理：" class="headerlink" title="2.3 笔记整理："></a><em>2.3 笔记整理：</em></h3><h4 id="2-3-1-算法："><a href="#2-3-1-算法：" class="headerlink" title="2.3.1 算法："></a><em><strong>2.3.1 算法：</strong></em></h4><h5 id="1-判断x是否为二次剩余"><a href="#1-判断x是否为二次剩余" class="headerlink" title="1. 判断x是否为二次剩余"></a><em><strong>1. 判断x是否为二次剩余</strong></em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128222232986.png"                      alt="image-20221128222232986" style="zoom:80%;"                 ><h5 id="2-用N已知的因子p、q判断模N下数x是否为二次剩余"><a href="#2-用N已知的因子p、q判断模N下数x是否为二次剩余" class="headerlink" title="2. 用N已知的因子p、q判断模N下数x是否为二次剩余"></a><em><strong>2. 用N已知的因子p、q判断模N下数x是否为二次剩余</strong></em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128222558921.png"                      alt="image-20221128222558921" style="zoom:80%;"                 ><h5 id="3-已知条件"><a href="#3-已知条件" class="headerlink" title="3. 已知条件"></a><em>3. 已知条件</em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128232726545.png"                      alt="image-20221128232726545" style="zoom:80%;"                 ><h5 id="4-加密算法"><a href="#4-加密算法" class="headerlink" title="4. 加密算法"></a><em>4. 加密算法</em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128233704272.png"                      alt="image-20221128233704272" style="zoom:80%;"                 ><h5 id="5-解密算法"><a href="#5-解密算法" class="headerlink" title="5. 解密算法"></a><em>5. 解密算法</em></h5><p>由于接收者已知私钥：p、q，他就不需要另外单独的解密算法，通过判断c是否为二次剩余，他就可以知道密文为0还是1。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234457449.png"                      alt="image-20221128234457449" style="zoom:80%;"                 ><h4 id="2-3-2-命题："><a href="#2-3-2-命题：" class="headerlink" title="2.3.2 命题："></a><em>2.3.2 命题：</em></h4><h5 id="1-二次剩余"><a href="#1-二次剩余" class="headerlink" title="1. 二次剩余"></a><em><strong>1. 二次剩余</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234820942.png"                      alt="image-20221128234820942"                ></p><h5 id="2-雅可比符号"><a href="#2-雅可比符号" class="headerlink" title="2. 雅可比符号"></a><em><strong>2. 雅可比符号</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234849165.png"                      alt="image-20221128234849165"                ></p><h5 id="3-雅可比乘法性质"><a href="#3-雅可比乘法性质" class="headerlink" title="3. 雅可比乘法性质"></a><em><strong>3. 雅可比乘法性质</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234920652.png"                      alt="image-20221128234920652"                ></p><h5 id="4-二次剩余的复合运算"><a href="#4-二次剩余的复合运算" class="headerlink" title="4. 二次剩余的复合运算"></a><em><strong>4.</strong> 二次剩余的复合运算</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235001930.png"                      alt="image-20221128235001930"                ></p><h5 id="5-二次剩余与雅可比的分布"><a href="#5-二次剩余与雅可比的分布" class="headerlink" title="5. 二次剩余与雅可比的分布"></a><em>5. 二次剩余与雅可比的分布</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235046610.png"                      alt="image-20221128235046610"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235104749.png"                      alt="image-20221128235104749"                ></p><h5 id="6-雅可比的复合运算"><a href="#6-雅可比的复合运算" class="headerlink" title="6. 雅可比的复合运算"></a><em>6. 雅可比的复合运算</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235142046.png"                      alt="image-20221128235142046"                ></p><h2 id="3-Task解题"><a href="#3-Task解题" class="headerlink" title="3. Task解题"></a><em>3. Task解题</em></h2><h4 id="3-1-题目模型："><a href="#3-1-题目模型：" class="headerlink" title="3.1 题目模型："></a><em>3.1 题目模型：</em></h4><p>本task的模型是 <strong>Goldwasser-Micali Cryprosystem</strong>，即GM公钥加密系统</p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221129005320790.png"                      alt="image-20221129005320790" style="zoom:80%;"                 ><h4 id="3-2解题思路："><a href="#3-2解题思路：" class="headerlink" title="3.2解题思路："></a><em>3.2解题思路：</em></h4><h5 id="3-2-1-题目分析："><a href="#3-2-1-题目分析：" class="headerlink" title="3.2.1 题目分析："></a><em>3.2.1 题目分析：</em></h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">100</span>)   </span><br><span class="line">q = getPrime(<span class="number">100</span>)    </span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)  </span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:  </span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    </span><br><span class="line">    <span class="comment">#历遍转化为二进制数的flag，即逐位获得flag的二进制位</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)  </span><br><span class="line">        <span class="comment">#在（1，n）的范围内随机选择用于加密信息的x</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:  </span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><p>我们观察到本task的模型是 <strong>Goldwasser-Micali Cryprosystem</strong>，c的加密方式也已经给出，并且在clist数组内列出了每个c的值。</p><p>c是这样加密的：c&#x3D;(3^(int(i)+2x)*x^2)%n </p><p>仔细观察上式，发现当i&#x3D;0时情况特殊。若i&#x3D;0,则c&#x3D;(3^x*x)^2%n</p><p>而此时c是模n的二次剩余。</p><p>$$<br>总结一下，当c是模n的二次剩余，即J_n(c)&#x3D;1时，i&#x3D;0<br>$$</p><p>$$<br>那么相反，当c是模n的非二次剩余，即J_n(c)&#x3D;-1时，i&#x3D;1<br>$$</p><h5 id="3-2-2-破解流程："><a href="#3-2-2-破解流程：" class="headerlink" title="3.2.2 破解流程："></a><em>3.2.2 破解流程：</em></h5><p>我们先列出已知条件，即n与clist中若干组加密的c的值</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line">clist=[<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>通过分析，我们发现能够在仅知道公钥n的条件下，通过jacobi判断c是否为二次剩余对flag进行还原。</p><p>攻击设计如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#历遍给出的若干组c</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> clist:   </span><br><span class="line"><span class="comment">#判断“二次剩余”，逐个还原flag的二进制数</span></span><br><span class="line"><span class="keyword">if</span> gp.jacobi(c,n)==<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">if</span>  gp.jacobi(c,n)==-<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure></div><h5 id="3-2-3-攻击脚本："><a href="#3-2-3-攻击脚本：" class="headerlink" title="3.2.3 攻击脚本："></a><em>3.2.3 攻击脚本：</em></h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#GM脚本</span></span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">n=<span class="number">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line">clist=[<span class="number">112490766735794793494258589897687977797993914062877995369853</span>, <span class="number">423825989606899409733986824741778284626898537704684650054048</span>, <span class="number">1239912440099782777043012567198356769914426423982980091061342</span>, <span class="number">1078272043845620437375344423460688188703277391763226546180151</span>, <span class="number">159286594418951337823608883690981934876156746053051292254402</span>, <span class="number">189434397083734065502133592439774066008070864031834709620441</span>, <span class="number">264105932521685455831442874483122006851812174082486446496525</span>, <span class="number">252479590298382195780257510632414277760400686563367629394825</span>, <span class="number">34602153293813328946647556336715300088648653636913843351330</span>, <span class="number">808692976248223555967993480457680585654329233137701900525232</span>, <span class="number">836623390705731389723338030121423143060093415003999783847569</span>, <span class="number">1218829648463542488706300570862499177531816513847669694517865</span>, <span class="number">571795296699927140597629733281737316938588378300113684751321</span>, <span class="number">324408602401500017634991400429058861929441907523133040616718</span>, <span class="number">652309276856121062936275131393396513436481452168222192943617</span>, <span class="number">135368324264829776566203256490111602190045577103623626459391</span>, <span class="number">677807894471260530035795635544578014296111908610448488780236</span>, <span class="number">1135708831589387209825610411788217272141435421502826225558333</span>, <span class="number">196882176169680492388044653063809988445336200851553236565493</span>, <span class="number">1130705847039352086713022625138307016610235729598245321418537</span>, <span class="number">974627899979016730650505688458957247745733629797568884460037</span>, <span class="number">948987355716018600108888773982169186615279073844787201014331</span>, <span class="number">364200727831752453880724784142441918092136276002472196567297</span>, <span class="number">811786724825671349602848333002825903390189436235744947667153</span>, <span class="number">248544601758659627780643527412918707686666534454807514221527</span>, <span class="number">1078860601713092925823762998344218082511712606733279204236487</span>, <span class="number">634851505432770176888905188832078431577879067601938324607512</span>, <span class="number">232972021265122845242665536151391828176473610240017058444456</span>, <span class="number">1080796896535347345799923528377657622102130648424673730618155</span>, <span class="number">622059452832122796944248249707923610120342427983134655552340</span>, <span class="number">837257289852652447556360719449396492271622453092839975184158</span>, <span class="number">626327369687614106133688347844033161113612134573404258486630</span>, <span class="number">1233019194503373412608053469954621323121044455057773900406773</span>, <span class="number">912564467902216938034173803480737819092198560216579817988291</span>, <span class="number">408076399689155479697691914877522087726703540593136498587215</span>, <span class="number">1118745562641959211267518507476218888452509349041078337285098</span>, <span class="number">1103228775032586830415033772993541541820163005491285279882940</span>, <span class="number">680899077364553221002722115625274809744677788062477442312086</span>, <span class="number">355349436487753936000721704075588637048102593449252106813298</span>, <span class="number">5254361838244723184679801326407268664182654715017847086461</span>, <span class="number">480145671282471097574354032682584083826945502763658946101104</span>, <span class="number">249136810947175342894562520096603076879372702701088690594445</span>, <span class="number">175216547555975039599856545426098941943382367602172941744494</span>, <span class="number">436310864447848960706296122266108102033486860525693191197797</span>, <span class="number">342620466614509535208918527767209905005823047382938223113086</span>, <span class="number">369848992268737575958936185907214270590887322936419642815242</span>, <span class="number">278575045025661827978388874494219837629182438978526195181637</span>, <span class="number">1189171180780533071473125545247289861677955100195126109964590</span>, <span class="number">256190182678715266654387215899616014762531664768736561586327</span>, <span class="number">719160215933023695898776016718481385742508618676368640641809</span>, <span class="number">147033122794177086112261858085593706727904275426698884436011</span>, <span class="number">247466503394960387825735598976068779045757078494832316444804</span>, <span class="number">787155643450160361724955357286670519256662665704845721250609</span>, <span class="number">112101120505278148126370035869523081506090979629681063614381</span>, <span class="number">890009544685851814191758439205974159586245412054287515881584</span>, <span class="number">1168625756997945588141764967298286550498540363325170551587334</span>, <span class="number">946031342434770434479581499217378781992921204179509449159996</span>, <span class="number">759124753621557368233069144948668001126536400499520990700641</span>, <span class="number">930584421635842804698880452391670787414151645249729141739148</span>, <span class="number">140981825203074314092967178062754008486703246602401550271041</span>, <span class="number">880126454149733441805446179826584472107299085899567279467558</span>, <span class="number">510129631452465708304688340114214360026947205003705062663759</span>, <span class="number">857274757020001316639221394675820731579775247610619594760511</span>, <span class="number">444486969413575687285961819261097401974268741167841964919716</span>, <span class="number">645830958128126799221416466698967430939726760487764050203821</span>, <span class="number">128864469762235652994228226148325614187747349331618451490354</span>, <span class="number">732913002124581119538173953534485652651112140400076340646452</span>, <span class="number">1245672039639609341331477592944058028011275464117654972595670</span>, <span class="number">1160765030758624190775369713232721901616189349905945190302338</span>, <span class="number">745734132091942990384796294800038299023052878196943617322617</span>, <span class="number">34973161572808799782240527358912894045293050940490682156733</span>, <span class="number">507586651070816931641904112686082840821460472219390068396982</span>, <span class="number">359195216122538975934588740641220005777478961423841727365432</span>, <span class="number">60506687352654743312206686911057762445232526009857863834444</span>, <span class="number">402036521271253699065227780662896890228371046068283711170220</span>, <span class="number">465427226677337673103293964961886503610313835775181975449721</span>, <span class="number">925246962888172144515172444374190859841851825972285013006527</span>, <span class="number">542176614893876361668218387162168517498644799220587472896002</span>, <span class="number">852215132196560596695876248813488364201491362280912035912061</span>, <span class="number">945548964927065532651141821562204387565145712002346337639711</span>, <span class="number">736943822066388892909878515650831955490636214039062998720510</span>, <span class="number">766357526983761241394182000478355475617711906398422036954152</span>, <span class="number">77156525593382594092608158744099524034892127423492520631820</span>, <span class="number">562562817542804973601572838378263130638457829485887327130286</span>, <span class="number">768093992370198202822524520006977816845162154854939167515517</span>, <span class="number">1099957424762490943973557935337350760135180754563993547358098</span>, <span class="number">698816668614997174913438496891169625976027534942525487303513</span>, <span class="number">417641699919584202170293946436276552973997395211792288687960</span>, <span class="number">1006229610175567855209117721408416419896921240126676949824724</span>, <span class="number">4206431689326446028142220658552064336105749936096602165359</span>, <span class="number">893846509909828693967573302731018066461118006150050253703744</span>, <span class="number">878425189026235350891203121924637130803808920422558040493294</span>, <span class="number">730047416245095988472212050949689633327186823542036387345181</span>, <span class="number">648095719945750715387983948406690533087473721929975873848169</span>, <span class="number">213513454359755001454814601053555627585345770061082141021326</span>, <span class="number">350001050012957205656929492039628823072469208940960439158263</span>, <span class="number">1016858635000037892730835311903706149371704230428070443107320</span>, <span class="number">1040987439471207869975679257301693610464700899302787643642354</span>, <span class="number">1194690615352550474729309715449838057220521596135246725909553</span>, <span class="number">508165053077110820797186371383859674371399129952105597675096</span>, <span class="number">266494438294281492504556232035584920066331725618646155019547</span>, <span class="number">28469482072427012244441092412738741355431846649166066368980</span>, <span class="number">790175775999108776289865518368056397969387298334297622465909</span>, <span class="number">590581138260907253939363764832940322585129285968275409510634</span>, <span class="number">221909012579985462013325803334419731308959816500415305934495</span>, <span class="number">1063780559219791515938747204569742799329237935871594345400252</span>, <span class="number">977747525495509380693721486866821791065499754056415279744653</span>, <span class="number">346306061371595730004513789139807509540063462412619321003626</span>, <span class="number">456103179467597859705969406860196938169100856240100927540401</span>, <span class="number">969300078509189631808517876996065933181606409375207150288464</span>, <span class="number">1029806631220370012120597683927351131622576733031694535189521</span>, <span class="number">344896431603140401163996810922500893279239069499717183710501</span>, <span class="number">430000423804197030568046280589772094106128395099434235915031</span>, <span class="number">700179843567016021775399107572964843751703290591400960796112</span>, <span class="number">961227906080189143689698720420426659986080298413605666115640</span>, <span class="number">607209606799750473714271393200060455739097869884727178692312</span>, <span class="number">106958847163040842225140399905505511449479709017540851084532</span>, <span class="number">953369942103273809257762268859167463617831445026988544378658</span>, <span class="number">428269440686506672744282327102546440435442014650795927162711</span>, <span class="number">56621803434665963032193024056111306570802155743250152849716</span>, <span class="number">800707635631355839166448276143596444307614901816577459076131</span>, <span class="number">1032256515703247765067950588859299047987257001987777631061065</span>, <span class="number">813725055801254665600156259482200403981770576173968929131487</span>, <span class="number">940024839745068011043019236327963504645352520797347949823455</span>, <span class="number">1065005324140908547287467504568283884363143527586278243210801</span>, <span class="number">1087828777506290663525994551834233065465427418753806182842291</span>, <span class="number">668387132001968449612224853010931354244797738682007519611989</span>, <span class="number">563185246196177998134932666270526715161378776103340983046580</span>, <span class="number">148292872313931508344196679476720973752571125303712466045656</span>, <span class="number">413889563851226543249984374872220761253120628252088546262699</span>, <span class="number">853542105910386365929770611480736086723126396438880650918917</span>, <span class="number">59730458840715910492468261806200793684923819793480597554146</span>, <span class="number">792260492800286127199649276659137441324248689470594987965190</span>, <span class="number">753608630500639136668081531883097047491651258191552267413126</span>, <span class="number">33514911499472634865669915075769163328171019557849259474018</span>, <span class="number">634963859228206842307837566519244534650818456901841184879977</span>, <span class="number">219354096455968590219445072777282329948785844491217770978344</span>, <span class="number">1123377226439583158729762969668999276741275445803396272436031</span>, <span class="number">357765295513680388973981712560200525235334734759663454993805</span>, <span class="number">385868499980630535766019957877752149506518574529845752144666</span>, <span class="number">138578212294299392480319417966870656714476525885983752756188</span>, <span class="number">1110526796192425688386237355263892073046060477008920073455044</span>, <span class="number">244699783645221387947312903861559688207612147588246639081699</span>, <span class="number">583209905862562678600202085212425597809036630416117298854978</span>, <span class="number">1207854793808762194414317661151529169444903662139065050090746</span>, <span class="number">1127506983223466275821900811940356395242309493951089427884032</span>, <span class="number">526185119576631048584313761548704536031634598332129570964689</span>, <span class="number">266882032196696984660521486449809902101615921156569537960109</span>, <span class="number">1188118705564450461919200724390473040524626320052324478509883</span>, <span class="number">682831747455078454647149830819696088960233603851250102828667</span>, <span class="number">669419928942561433130809268138650695825596612075801278942980</span>, <span class="number">1077750630919867687880983437504767304166615787212813240073843</span>, <span class="number">486023540111308483450127320955599047045479654684477043315645</span>, <span class="number">409429366346146233850088863324915025465847596238000661872172</span>, <span class="number">779883595226131237594759409249289551033410304517183865388408</span>, <span class="number">1155872225708857920911178110668279174877878422508206228579940</span>, <span class="number">411063490066038942009369947241345843238439795078686488373864</span>, <span class="number">1243453053541946030699872676712518536022061850799945414120045</span>, <span class="number">871711034820169700581685353768658469631429266493677466057997</span>, <span class="number">601920686459160120670719526703980120744719013393032353678765</span>, <span class="number">329932100141177850249406090412821976994089707958551194468769</span>, <span class="number">558327299751202100333335353826111016492585371503632197870640</span>, <span class="number">113444032302978611299580451314055133491399096282744687816086</span>, <span class="number">152525914892717139057165748051966776217223953242540511499945</span>, <span class="number">965404850400527912039904270871065001313018148780552532312669</span>, <span class="number">313557099445185696402013375071955475516203519824979749629786</span>, <span class="number">952254159335810337756614972813240144837526566801182319987154</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> clist:</span><br><span class="line"><span class="keyword">if</span> gp.jacobi(c,n)==<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">if</span>  gp.jacobi(c,n)==-<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag二进制:&#x27;</span>,flag)</span><br><span class="line"><span class="comment">#二进制转化成十进制</span></span><br><span class="line">f=<span class="built_in">int</span>(flag,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag十进制:&#x27;</span>,f)</span><br><span class="line"><span class="built_in">print</span>(n2s(f))</span><br></pre></td></tr></table></figure></div><p><strong>运行结果：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221130000543407.png"                      alt="image-20221130000543407"                ></p><p><em>顺利得到flag：</em></p><p><strong>SYC{run_to_the_light}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-对于Task代码注释的补齐&quot;&gt;&lt;a href=&quot;#1-对于Task代码注释的补齐&quot; class=&quot;headerlink&quot; title=&quot;1.对于Task代码注释的补齐&quot;&gt;&lt;/a&gt;&lt;em&gt;1.对于Task代码注释的补齐&lt;/em&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-</summary>
      
    
    
    
    
    <category term="面试小结" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/12/16/hello-world/"/>
    <id>http://example.com/2022/12/16/hello-world/</id>
    <published>2022-12-16T03:48:54.740Z</published>
    <updated>2022-12-16T03:48:54.740Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
