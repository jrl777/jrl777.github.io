<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2023-04-13T13:07:18.025Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>123</title>
    <link href="http://example.com/2023/04/13/123/"/>
    <id>http://example.com/2023/04/13/123/</id>
    <published>2023-04-13T13:05:54.000Z</published>
    <updated>2023-04-13T13:07:18.025Z</updated>
    
    <content type="html"><![CDATA[<p>123</p><img                       lazyload                     src="/images/loading.svg"                     data-src="/2023/04/13/123/image-20230413210711178.png"                      class="" title="image-20230413210711178"                >]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;123&lt;/p&gt;
&lt;img  
                     lazyload
                     src=&quot;/images/loading.svg&quot;
                     data-src=&quot;/2023/04/13/12</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>DES-Study</title>
    <link href="http://example.com/2023/03/13/DES-Study/"/>
    <id>http://example.com/2023/03/13/DES-Study/</id>
    <published>2023-03-13T11:53:04.000Z</published>
    <updated>2023-04-13T11:42:05.711Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DES-Study"><a href="#DES-Study" class="headerlink" title="DES-Study"></a>DES-Study</h1><p><strong>强加密算法</strong>（基于以下两种本源操作）：</p><p>（1）混淆（Confusion）：是一种使密钥与密文之间的关系尽可能模糊的加密操作。如今实 现混淆常用的一个元素就是替换；这个元素在DES和AES中都有使用。 </p><p>（2）扩散（Diffusion）：是一种为了隐藏明文的统计属性而将一个明文符号的影响扩散到 多个密文符号的加密操作。最简单的扩散元素就是位置换，它常用于DES中；而AES则使用更高级的 Mixcolumn 操作。 </p><h2 id="1-Define"><a href="#1-Define" class="headerlink" title="1.Define"></a>1.Define</h2><p>DES是一种使用56位密钥对64位长分组进行加密的密码（如图3-3）。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\DES-Study.assets\image-20230313202706948.png"                      alt="image-20230313202706948"                ></p><p>DES是一种对称密码，即其加密过程和解密过程使用相同的密钥。与几乎所有现代分组加密一样，DES也是一种迭代算法。DES对明文中每个分组的加密过程都包含16轮，且每轮的操作完全相同。图3-4显示了DES的轮结构。每轮都会使用不同的子密钥，并且所有子密钥k；都从主密钥k中推导而来的。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\DES-Study.assets\image-20230313202815077.png"                      alt="image-20230313202815077"                ></p><h2 id="2-Feistel网络"><a href="#2-Feistel网络" class="headerlink" title="2.Feistel网络"></a>2.Feistel网络</h2><p>每轮中仅加密输入为的一半，未加密右半部分，用的是伪随机数产生器的输出对左半部分进行XOR操作。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\DES-Study.assets\image-20230313204920579.png"                      alt="image-20230313204920579"                ></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DES-Study&quot;&gt;&lt;a href=&quot;#DES-Study&quot; class=&quot;headerlink&quot; title=&quot;DES-Study&quot;&gt;&lt;/a&gt;DES-Study&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;强加密算法&lt;/strong&gt;（基于以下两种本源操作）：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Python-study</title>
    <link href="http://example.com/2023/02/24/Python-study/"/>
    <id>http://example.com/2023/02/24/Python-study/</id>
    <published>2023-02-24T09:10:59.000Z</published>
    <updated>2023-03-24T11:31:00.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python学习笔记"><a href="#Python学习笔记" class="headerlink" title="Python学习笔记"></a>Python学习笔记</h1><h1 id="Python教程-廖雪峰的官方网站-liaoxuefeng-com"><a href="#Python教程-廖雪峰的官方网站-liaoxuefeng-com" class="headerlink" title="(Python教程 - 廖雪峰的官方网站 (liaoxuefeng.com))"></a>(<a class="link"   href="https://www.liaoxuefeng.com/wiki/1016959663602400" >Python教程 - 廖雪峰的官方网站 (liaoxuefeng.com)<i class="fas fa-external-link-alt"></i></a>)</h1><p>By：jrl</p><h1 id="一、Python基础"><a href="#一、Python基础" class="headerlink" title="一、Python基础"></a>一、Python基础</h1><h2 id="1-多行注释："><a href="#1-多行注释：" class="headerlink" title="1.多行注释："></a>1.多行注释：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20221121161839273.png"                      alt="image-20221121161839273"                ></p><h2 id="2-变量："><a href="#2-变量：" class="headerlink" title="2.变量："></a>2.变量：</h2><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source\_posts\Python-study.assets\image-20221121162220999.png"                      alt="image-20221121162220999" style="zoom:66%;"                 ><h2 id="3-除法："><a href="#3-除法：" class="headerlink" title="3.除法："></a>3.除法：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20221121163251476.png"                      alt="image-20221121163251476"                ></p><h2 id="4-Unicode与Utf-8："><a href="#4-Unicode与Utf-8：" class="headerlink" title="4.Unicode与Utf-8："></a>4.Unicode与Utf-8：</h2><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20221121164752301.png"                      alt="image-20221121164752301"                ></p><p>Unicode虽然范围广，可以编码汉字，但是占存储空间大，所以转为Utf-8储存。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20221122161837329.png"                      alt="image-20221122161837329"                ></p><h2 id="5-字符编码："><a href="#5-字符编码：" class="headerlink" title="5.字符编码："></a>5.字符编码：</h2><p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20221122162404728.png"                      alt="image-20221122162404728"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20221122163630967.png"                      alt="image-20221122163630967"                ></p><p>文件开头一般写入的注释：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230224154919596.png"                      alt="image-20230224154919596"                ></p><h2 id="6-格式化字符串的方法："><a href="#6-格式化字符串的方法：" class="headerlink" title="6.格式化字符串的方法："></a>6.格式化字符串的方法：</h2><h3 id="1）使用占位符"><a href="#1）使用占位符" class="headerlink" title="1）使用占位符"></a>1）使用占位符</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230224160555460.png"                      alt="image-20230224160555460"                ></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Age: %s. Gender: %s&#x27;</span> % (<span class="number">25</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;growth rate: %d %%&#x27;</span> % <span class="number">7</span>   <span class="comment"># %%转义字符 表示一个%</span></span><br></pre></td></tr></table></figure></div><h3 id="2）foramt"><a href="#2）foramt" class="headerlink" title="2）foramt()"></a>2）foramt()</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230224165831828.png"                      alt="image-20230224165831828"                ></p><p>3）f-strng</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230224165814292.png"                      alt="image-20230224165814292"                ></p><h2 id="7-list与tuple"><a href="#7-list与tuple" class="headerlink" title="7.list与tuple"></a>7.list与tuple</h2><h3 id="1-list"><a href="#1-list" class="headerlink" title="(1)list"></a>(1)list</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg</span></span><br><span class="line">classmates = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(classmates)  <span class="comment">#获得list元素的个数</span></span><br><span class="line">classmates[<span class="number">0</span>]   <span class="comment">#用索引来访问list中每一个位置的元素</span></span><br><span class="line">classmates[-<span class="number">1</span>]  <span class="comment">#访问最后一个元素的位置</span></span><br><span class="line">classmates.append(<span class="string">&#x27;Adam&#x27;</span>)  <span class="comment"># append() 可以往list中追加元素到末尾</span></span><br><span class="line">classmates.insert(<span class="number">1</span>, <span class="string">&#x27;Jack&#x27;</span>)  <span class="comment">#也可以把元素插入到指定的位置</span></span><br><span class="line">classmates.pop()  <span class="comment"># pop(i) 删除list末尾的元素</span></span><br></pre></td></tr></table></figure></div><h3 id="2-tuple"><a href="#2-tuple" class="headerlink" title="(2)tuple"></a>(2)tuple</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classmates = (<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>)</span><br><span class="line">t = () <span class="comment">#或者()  定义空tuple</span></span><br><span class="line">t=(<span class="number">1</span>,) <span class="comment">#定义只有一个元素的tuple</span></span><br></pre></td></tr></table></figure></div><h2 id="8-条件判断"><a href="#8-条件判断" class="headerlink" title="8.条件判断"></a>8.条件判断</h2><p>elif(else if)</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;teenager&#x27;</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;adult&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;kid&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>input()的返回类型是str,str不能直接与整数比较，须转化</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">&#x27;birth: &#x27;</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00前&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;00后&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h2 id="9-循环"><a href="#9-循环" class="headerlink" title="9.循环"></a>9.循环</h2><h3 id="1-for-in-循环"><a href="#1-for-in-循环" class="headerlink" title="(1)for  in  循环"></a>(1)for  in  循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#历遍list或者tulpe中的元素</span></span><br><span class="line">names = [<span class="string">&#x27;Michael&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;Tracy&#x27;</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#求和</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><p>当须历遍的范围过大时，可使用range()函数</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))    <span class="comment">#[0, 1, 2, 3, 4]  0-4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2-while循环"><a href="#2-while循环" class="headerlink" title="(2)while循环"></a>(2)while循环</h3><p>只要条件满足，就不断循环，条件不满足时退出循环</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><p><strong>break</strong></p><p>在循环中，break语句可以提前退出循环</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;END&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p><strong>continue</strong></p><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure></div><h2 id="10-dict和set"><a href="#10-dict和set" class="headerlink" title="10.dict和set"></a>10.dict和set</h2><h3 id="1-dict"><a href="#1-dict" class="headerlink" title="(1)dict"></a>(1)dict</h3><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><p>先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，给定一个名字，比如<code>&#39;Michael&#39;</code>，dict在内部就可以直接计算出<code>Michael</code>对应的存放成绩的“页码”，也就是<code>95</code>这个数字存放的内存地址，直接取出来，所以速度非常快。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">d = &#123;<span class="string">&#x27;Michael&#x27;</span>: <span class="number">95</span>, <span class="string">&#x27;Bob&#x27;</span>: <span class="number">75</span>, <span class="string">&#x27;Tracy&#x27;</span>: <span class="number">85</span>&#125;</span><br><span class="line">d[<span class="string">&#x27;Adam&#x27;</span>] = <span class="number">67</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找</span></span><br><span class="line">d[<span class="string">&#x27;Michael&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment">#要删除一个key，用pop(key)方法，对应的value也会从dict中删除：</span></span><br><span class="line"> d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure></div><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉，如果key不存在，dict就会报错要避免key不存在的错误，有两种办法</p><p>一是通过<code>in</code>判断key是否存在：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">in</span> d</span><br></pre></td></tr></table></figure></div><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.get(<span class="string">&#x27;Thomas&#x27;</span>)</span><br><span class="line">d.get(<span class="string">&#x27;Thomas&#x27;</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">要删除一个key，用pop(key)方法，对应的value也会从<span class="built_in">dict</span>中删除：</span><br><span class="line"> d.pop(<span class="string">&#x27;Bob&#x27;</span>)</span><br></pre></td></tr></table></figure></div><h4 id="dict与list比较"><a href="#dict与list比较" class="headerlink" title="dict与list比较"></a>dict与list比较</h4><p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p><p>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol><p>所以，dict是用空间来换取时间的一种方法。</p><p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是<strong>不可变对象</strong>。</p><p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。</p><p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p><h3 id="2-set"><a href="#2-set" class="headerlink" title="(2)set"></a>(2)set</h3><p> set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要创建一个set，需要提供一个list作为输入集合：</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，传入的参数[1, 2, 3]是一个list，而显示的&#123;1, 2, 3&#125;只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的     重复元素在set中自动被过滤：</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])                <span class="comment">#  &gt;&gt; s    &#123;1, 2, 3&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过remove(key)方法可以删除元素：</span></span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">&#123;<span class="number">2</span>, <span class="number">3</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;</span><br></pre></td></tr></table></figure></div><h4 id="set与dict比较"><a href="#set与dict比较" class="headerlink" title="set与dict比较"></a>set与dict比较</h4><p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><p>str是不变对象，而list是可变对象</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：</span></span><br><span class="line">a = [<span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;a&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于不可变对象，比如str，对str进行操作呢：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">&#x27;abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;Abc&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">&#x27;abc&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#replace并不是真的改变了变量a所指向的字符串&quot;abc&quot;，而是创建了一个新的变量b，指向&quot;Abc&quot;</span></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230319191110780.png"                      alt="image-20230319191110780"                ></p><h1 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h1><h2 id="1-调用函数"><a href="#1-调用函数" class="headerlink" title="1.调用函数"></a>1.调用函数</h2><p>可以通过官网来调查函数： <a class="link"   href="http://docs.python.org/3/library/functions.html#abs" >http://docs.python.org/3/library/functions.html#abs<i class="fas fa-external-link-alt"></i></a></p><p>也可以在交互式命令行通过help(),查看函数的帮助信息。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg: 数据类型转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">&#x27;123&#x27;</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">&#x27;12.34&#x27;</span>)</span><br><span class="line"><span class="number">12.34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">1.23</span>)</span><br><span class="line"><span class="string">&#x27;1.23&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;100&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></div><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">abs</span> <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></div><h2 id="2-定义函数"><a href="#2-定义函数" class="headerlink" title="2.定义函数"></a>2.定义函数</h2><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><p>我们以自定义一个求绝对值的<code>my_abs</code>函数为例：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"> 请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。</span></span><br><span class="line"><span class="string"> &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）：</span></span><br></pre></td></tr></table></figure></div><p><strong>交互式环境</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="D:\Blog\source_posts\Python-study.assets\image-20230320200608122.png"                      alt="image-20230320200608122"                ></p><h3 id="1-空函数"><a href="#1-空函数" class="headerlink" title="(1)空函数"></a>(1)空函数</h3><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nop</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。</span></span><br><span class="line"><span class="comment"># pass还可以用在其他语句里，比如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><h3 id="2-参数检查"><a href="#2-参数检查" class="headerlink" title="(2)参数检查"></a>(2)参数检查</h3><p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出<code>TypeError</code>：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br></pre></td></tr></table></figure></div><p>但是如果参数类型不对，Python解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">2</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: unorderable types: <span class="built_in">str</span>() &gt;= <span class="built_in">int</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">&#x27;str&#x27;</span></span><br></pre></td></tr></table></figure></div><p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p><p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance()</code>实现：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">&#x27;bad operand type&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure></div><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">3</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span></span><br></pre></td></tr></table></figure></div><h3 id="3-关于返回值"><a href="#3-关于返回值" class="headerlink" title="(3)关于返回值"></a>(3)关于返回值</h3><p>Python中的返回值是唯一的</p><p>Eg： 在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">x, y, step, angle=<span class="number">0</span></span>):</span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br></pre></td></tr></table></figure></div><p>然后，我们就可以同时获得返回值：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x, y)</span><br><span class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></span><br></pre></td></tr></table></figure></div><p>但其实这只是一种假象，Python函数返回的仍然是单一值：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r)</span><br><span class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</span><br></pre></td></tr></table></figure></div><p><strong>原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</strong></p><h2 id="3-函数的参数"><a href="#3-函数的参数" class="headerlink" title="3.函数的参数"></a>3.函数的参数</h2><p>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p><h3 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="(1)位置参数"></a>(1)位置参数</h3><p>我们先写一个计算x2的函数</p><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数</p><p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, n</span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></div><h3 id="2-默认参数"><a href="#2-默认参数" class="headerlink" title="(2)默认参数"></a>(2)默认参数</h3><p>新的<code>power(x, n)</code>函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: power() missing <span class="number">1</span> required positional argument: <span class="string">&#x27;n&#x27;</span></span><br></pre></td></tr></table></figure></div><p>这个时候，默认参数就排上用场了。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></div><p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入n，比如<code>power(5, 3)</code>。</p><p>从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><p>一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；</p><p>二是如何设置默认参数。</p><p>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p><p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p><p>举个例子，我们写个一年级小学生注册的函数，需要传入<code>name</code>和<code>gender</code>两个参数：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enroll</span>(<span class="params">name, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;gender:&#x27;</span>, gender)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。我们可以把年龄和城市设为默认参数，这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enroll</span>(<span class="params">name, gender, age=<span class="number">6</span>, city=<span class="string">&#x27;Beijing&#x27;</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;name:&#x27;</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;gender:&#x27;</span>, gender)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;age:&#x27;</span>, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;city:&#x27;</span>, city)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#只有与默认参数不符的学生才需要提供额外的信息：</span></span><br><span class="line">enroll(<span class="string">&#x27;Bob&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, <span class="number">7</span>)</span><br><span class="line">enroll(<span class="string">&#x27;Adam&#x27;</span>, <span class="string">&#x27;M&#x27;</span>, city=<span class="string">&#x27;Tianjin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll(&#x27;Adam&#x27;, &#x27;M&#x27;, city=&#x27;Tianjin&#x27;)，意思是，city参数用传进去的值，其他默认参数继续使用默认值。</span></span><br></pre></td></tr></table></figure></div><p><strong>默认函数最大的坑</strong>：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先定义一个函数，传入一个list，添加一个END再返回：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_end</span>(<span class="params">L=[]</span>):</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="comment">#当你正常调用时，结果似乎不错：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>])</span><br><span class="line">[<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#当你使用默认参数调用时，一开始结果也是对的：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是，再次调用add_end()时，结果就不对了：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>, <span class="string">&#x27;END&#x27;</span>]</span><br></pre></td></tr></table></figure></div><p>这是因为：</p><p>Python函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p><p> <strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要修改上面的例子，我们可以用None这个不变对象来实现：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_end</span>(<span class="params">L=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">&#x27;END&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="comment">#为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</span></span><br></pre></td></tr></table></figure></div><h3 id="3-可变参数"><a href="#3-可变参数" class="headerlink" title="(3)可变参数"></a>(3)可变参数</h3><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p><p>我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。</p><p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#但是调用的时候，需要先组装出一个list或tuple：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</span><br><span class="line"><span class="number">84</span></span><br></pre></td></tr></table></figure></div><p>我们把函数的参数改为可变参数：</p><p>Python允许你在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去：</p><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用该函数时，可以传入任意个参数，包括0个参数：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure></div><h3 id="4-关键字参数"><a href="#4-关键字参数" class="headerlink" title="(4)关键字参数"></a>(4)关键字参数</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python学习笔记&quot;&gt;&lt;a href=&quot;#Python学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记&quot;&gt;&lt;/a&gt;Python学习笔记&lt;/h1&gt;&lt;h1 id=&quot;Python教程-廖雪峰的官方网站-liaoxuefeng-com</summary>
      
    
    
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C-Study-1</title>
    <link href="http://example.com/2023/02/20/C-Study-1/"/>
    <id>http://example.com/2023/02/20/C-Study-1/</id>
    <published>2023-02-20T08:34:04.000Z</published>
    <updated>2023-02-20T08:36:12.580Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-STUDY-1"><a href="#C-STUDY-1" class="headerlink" title="C-STUDY-1"></a>C-STUDY-1</h1><h2 id="一、指针"><a href="#一、指针" class="headerlink" title="一、指针"></a>一、指针</h2><h2 id="（-14条消息-C语言指针详解-经典-非常详细-liu100m的博客-CSDN博客-c语言指针用法详解）"><a href="#（-14条消息-C语言指针详解-经典-非常详细-liu100m的博客-CSDN博客-c语言指针用法详解）" class="headerlink" title="（(14条消息) C语言指针详解(经典,非常详细)_liu100m的博客-CSDN博客_c语言指针用法详解）"></a>（<a class="link"   href="https://blog.csdn.net/liu100m/article/details/90731422?ops_request_misc=%7B%22request_id%22:%22167592955016800182737687%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167592955016800182737687&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90731422-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88&spm=1018.2226.3001.4187" >(14条消息) C语言指针详解(经典,非常详细)_liu100m的博客-CSDN博客_c语言指针用法详解<i class="fas fa-external-link-alt"></i></a>）</h2><h3 id="1-指针类型的意义"><a href="#1-指针类型的意义" class="headerlink" title="1.指针类型的意义"></a>1.指针类型的意义</h3><p>指针类型决定了：指针解引用的权限有多大，以及“+1”时走的步长(int,4字节  char，1字节，因为只跳过一个字符)</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="built_in">int</span>*p=arr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)               //整形数据占<span class="number">4</span>字节，若换成 char*p则无法将arr中的元素全赋值为<span class="number">0</span></span><br><span class="line">    &#123;</span><br><span class="line">        *(p+i)=<span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(<span class="string">&quot;%d\n&quot;</span>,arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>记得将指针初始化，若不知道则赋值为空指针</p><p>int*p&#x3D;NULL;   &#x2F;&#x2F;此时仍然无法赋值，因为NULL不属于个人</p><h3 id="2-指针的运算"><a href="#2-指针的运算" class="headerlink" title="2.指针的运算"></a>2.指针的运算</h3><p>指针-指针  得到的是两个指针间元素的个数  (前提是指针类型相同且指向同一空间)</p><p>指针+指针   无意义</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">    printf(<span class="string">&quot;%d\n&quot;</span>,&amp;arr[<span class="number">9</span>]-&amp;arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="3-指针与数组"><a href="#3-指针与数组" class="headerlink" title="3.指针与数组"></a>3.指针与数组</h3><p>数组名是数组首元素的首地址</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> arr[<span class="number">10</span>]=&#123;<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line"></span><br><span class="line">  printf(<span class="string">&quot;%p&quot;</span>,arr);   //等价于  printf(<span class="string">&quot;%p&quot;</span>,&amp;arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h3 id="4-二级指针"><a href="#4-二级指针" class="headerlink" title="4.二级指针"></a>4.二级指针</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">int</span> a=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">int</span>*p=&amp;a;      //p是指针变量，一级指针</span><br><span class="line">    <span class="built_in">int</span>**pa=&amp;p;   //pa也是指针变量，二级指针   &amp;pa取出pa在内存中的起始地址</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div><h2 id="二、文件"><a href="#二、文件" class="headerlink" title="二、文件"></a>二、文件</h2><p>(<a class="link"   href="https://blog.csdn.net/ZJRUIII/article/details/120552735?ops_request_misc=%7B%22request_id%22:%22167621220216800211584148%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167621220216800211584148&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-120552735-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6&spm=1018.2226.3001.4187" >(14条消息) C语言文件操作（含详细步骤）_zjruiiiiii的博客-CSDN博客_c语言文件操作<i class="fas fa-external-link-alt"></i></a>)</p><h2 id="三、链表"><a href="#三、链表" class="headerlink" title="三、链表"></a>三、链表</h2><p>(<a class="link"   href="https://blog.csdn.net/k666499436/article/details/124787990?ops_request_misc=%7B%22request_id%22:%22167621218716800186546589%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167621218716800186546589&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-124787990-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8&spm=1018.2226.3001.4187" >(14条消息) C语言链表超详解_rivencode的博客-CSDN博客<i class="fas fa-external-link-alt"></i></a>)</p><p>？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-STUDY-1&quot;&gt;&lt;a href=&quot;#C-STUDY-1&quot; class=&quot;headerlink&quot; title=&quot;C-STUDY-1&quot;&gt;&lt;/a&gt;C-STUDY-1&lt;/h1&gt;&lt;h2 id=&quot;一、指针&quot;&gt;&lt;a href=&quot;#一、指针&quot; class=&quot;headerli</summary>
      
    
    
    
    
    <category term="C-study" scheme="http://example.com/tags/C-study/"/>
    
  </entry>
  
  <entry>
    <title>Hgame-2023-note</title>
    <link href="http://example.com/2023/01/17/Hgame-2023-note/"/>
    <id>http://example.com/2023/01/17/Hgame-2023-note/</id>
    <published>2023-01-17T11:16:36.000Z</published>
    <updated>2023-01-17T11:23:01.080Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p><strong>TASK：</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">&#x27;flag.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c=<span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n=<span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c=110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line"><span class="string">n=135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></div><p><strong>WP：</strong></p><p>直接分解N，求解</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HGAME-RSA</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2  </span><br><span class="line"></span><br><span class="line">n=<span class="number">135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line">p=<span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">q=<span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br><span class="line"></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure></div><p><strong>flag:</strong>  <strong>hgame{factordb.com_is_strong!}</strong></p><h3 id="MORSE"><a href="#MORSE" class="headerlink" title="MORSE+"></a>MORSE+</h3><p><strong>Task:</strong></p><p>学校突然放假了，tr0uble正在开开心心的收拾东西准备回家，但是手机铃声突然响起，tr0uble接起电话，但是只听到滴答滴答的声音。努力学习密码学的tr0uble一听就知道这是什么，于是马上记录下来并花了亿点时间成功破译了，但是怎么看这都不像是人能看懂的，还没等tr0uble反应过来，又一通电话打来，依然是滴答滴答的声音。tr0uble想到兔兔也在学习密码学，于是不负责任地把密文都交给了兔兔，兔兔收到密文后随便看了一眼就不屑地说”这么简单都不会？自己解去，别耽误我抢车票”。 </p><p>Encrypted_message:</p><p>5Yeg5Liq5pif5pyf5YmN77yM5oiR5Lus5pS25Yiw5LiA5Liq56We56eY55qE5raI5oGv44CC5L2G5piv6L+Z5Liq5raI5oGv6KKr6YeN6YeN5Yqg5a+G77yM5oiR5Lus5LiN55+l6YGT5a6D55qE55yf5q2j5ZCr5LmJ5piv5LuA5LmI44CC5ZSv5LiA55+l6YGT55qE5L+h5oGv5piv5YWz5LqO5a+G6ZKl55qE77ya4oCc5Y+q5pyJ5YCS552A57+76L+H5Y2B5YWr5bGC55qE56+x56yG5omN6IO95oq16L6+5YyX5qyn56We6K+d55qE57uI54K54oCd44CC</p><p>base64解密后得到：</p><p>几个星期前，我们收到一个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什么。唯一知道的信息是关于密钥的：“只有倒着翻过十八层的篱笆才能抵达北欧神话的终点”。</p><p>使用Audacity解析Morse得到加密信息：</p><p>0223e_priibly__honwa_jmgh_fgkcqaoqtmfr</p><p>逆序：</p><p>rfmtqoaqckgf_hgmj_awnoh__ylbiirp_e3220</p><p><strong>W型栅栏密码：</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_w</span>(<span class="params">string, n</span>): </span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;将字符排列成w型&#x27;&#x27;&#x27;</span></span><br><span class="line">    array = [[<span class="string">&#x27;.&#x27;</span>]*<span class="built_in">len</span>(string) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="comment">#生成初始矩阵</span></span><br><span class="line">    row =<span class="number">0</span></span><br><span class="line">    upflag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#在矩阵上按w型画出string</span></span><br><span class="line">        array[row][col] = string[col]</span><br><span class="line">        <span class="keyword">if</span> row == n-<span class="number">1</span>:</span><br><span class="line">            upflag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">            upflag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> upflag:</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">string, n</span>):</span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;解密&#x27;&#x27;&#x27;</span></span><br><span class="line">    array = generate_w(string, n)</span><br><span class="line">    sub = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment">#将w型字符按行的顺序依次替换为string</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                array[row][col] = string[sub]</span><br><span class="line">                sub += <span class="number">1</span></span><br><span class="line">    msg = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#以列的顺序依次连接各字符</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">&#x27;.&#x27;</span>:</span><br><span class="line">                msg.append(array[row][col])</span><br><span class="line">    <span class="keyword">return</span> array, msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_cipher</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(string)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(n)+<span class="string">&#x27;栏:&#x27;</span>+<span class="string">&#x27;&#x27;</span>.join(decode(string,n)[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    string = <span class="string">&quot;rfmtqoaqckgf_hgmj_awnoh__ylbiirp_e3220&quot;</span></span><br><span class="line">    crack_cipher(string)</span><br><span class="line"><span class="comment">#18栏: rmocfhm_wo_ybipe2023_ril_hnajg_katfqqg</span></span><br></pre></td></tr></table></figure></div><p><strong>最后维吉尼亚密码解密：</strong></p><p>Key: vidar</p><p><strong>flag:hgame{welcome_to_hgame2023_and_enjoy_hacking}</strong></p><h3 id="Stream-Cipher"><a href="#Stream-Cipher" class="headerlink" title="Stream Cipher"></a>Stream Cipher</h3><p><strong>Task:</strong></p><p>很喜欢李小龙先生的一句话”Be water my friend”，但是这条小溪的水好像太多了。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27;</span></span><br></pre></td></tr></table></figure></div><p><strong>wp:</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag        <span class="comment">#flag未知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span>   <span class="comment">#assert要求表达式的布尔值必须为真，说明flag的数据形式为bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b&quot;Be water&quot;</span>, <span class="string">&#x27;big&#x27;</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b&quot;my friend&quot;</span>, <span class="string">&#x27;big&#x27;</span>)]</span><br><span class="line"><span class="comment">#key=[4784265876259235186,2019423192753765707364]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]   <span class="comment">#key[0]=4784265876259235186</span></span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]   <span class="comment">#key[1]=2019423192753765707364</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):   </span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span>     <span class="comment">#地板除向下取整 114 110</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b&#x27;\x1a\x15\x05\t\x17\tu&quot;-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY&#x27; </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WEEK1&quot;&gt;&lt;a href=&quot;#WEEK1&quot; class=&quot;headerlink&quot; title=&quot;WEEK1&quot;&gt;&lt;/a&gt;WEEK1&lt;/h2&gt;&lt;h3 id=&quot;RSA&quot;&gt;&lt;a href=&quot;#RSA&quot; class=&quot;headerlink&quot; title=&quot;RSA&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="CTF小试" scheme="http://example.com/tags/CTF%E5%B0%8F%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SYC三面</title>
    <link href="http://example.com/2022/12/16/SYC/"/>
    <id>http://example.com/2022/12/16/SYC/</id>
    <published>2022-12-16T07:36:21.000Z</published>
    <updated>2022-12-16T07:46:02.209Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-对于Task代码注释的补齐"><a href="#1-对于Task代码注释的补齐" class="headerlink" title="1.对于Task代码注释的补齐"></a><em>1.对于Task代码注释的补齐</em></h2><h3 id="1-1-Task："><a href="#1-1-Task：" class="headerlink" title="1.1 Task："></a><em>1.1 <strong>Task：</strong></em></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">100</span>)    <span class="comment">#说明含义</span></span><br><span class="line">q = getPrime(<span class="number">100</span>)    <span class="comment">#说明含义</span></span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    <span class="comment">#说明含义</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)   <span class="comment">#说明含义</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:   <span class="comment">#说明含义</span></span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="1-2-注释与补齐："><a href="#1-2-注释与补齐：" class="headerlink" title="1.2 注释与补齐："></a><em>1.2 <strong>注释与补齐：</strong></em></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag  <span class="comment">#flag未知</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line"><span class="comment">#getPrime来自Crypto库中的Util.number模块，其作用是随机获得一个N比特位的素数，同时进行检验，确保正确性  </span></span><br><span class="line">p = getPrime(<span class="number">100</span>)   <span class="comment">#随机获得一个100比特位的素数，并将它的值赋值给p</span></span><br><span class="line">q = getPrime(<span class="number">100</span>)   <span class="comment">#随机获得一个100比特位的素数，并将它的值赋值给q</span></span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    <span class="comment">#将flag转为二进制数，获取从偏移为2到末尾的数，再历遍所有可能</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)   <span class="comment">#生成在1与n之间的整数x(1&lt;=x&lt;=n)</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:   <span class="comment">#引用gp.gcd函数，判断x与n是否互质</span></span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)  <span class="comment">#将c添加到clist列表末尾</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给出n与若干组c的值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="2-Paper‘s-notes"><a href="#2-Paper‘s-notes" class="headerlink" title="2.Paper‘s notes"></a><em>2.Paper‘s notes</em></h2><h3 id="2-1-关于数论："><a href="#2-1-关于数论：" class="headerlink" title="2.1 关于数论："></a><em>2.1 关于数论：</em></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128155523295.png"                      alt="image-20221128155523295"                ></p><p><strong>论文中会自主定义一些乘法群、域</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128160020999.png"                      alt="image-20221128160020999" style="zoom:80%;"                 ><h3 id="2-2-中国剩余定理与二次剩余："><a href="#2-2-中国剩余定理与二次剩余：" class="headerlink" title="2.2 中国剩余定理与二次剩余："></a><em>2.2 中国剩余定理与二次剩余：</em></h3><h4 id="2-2-1-中国剩余定理："><a href="#2-2-1-中国剩余定理：" class="headerlink" title="2.2.1 中国剩余定理："></a><em>2.2.1 中国剩余定理：</em></h4><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128161638439.png"                      alt="image-20221128161638439" style="zoom:80%;"                 ><p><strong>中国剩余定理公式：</strong></p><blockquote><p>设正整数<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184134796"                      alt="img"                >两两互素，则同余方程组</p><p>​               <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184240203"                      alt="img"                ></p><p>有整数解。并且在模<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184354156"                      alt="img"                >下的解是唯一的，解为</p><p>​                <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184502609"                      alt="img"                ></p><p>其中<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184601062"                      alt="img"                >，而<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184638140"                      alt="img"                >为<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184737359"                      alt="img"                >模<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140904164235549"                      alt="img"                >的逆元。</p></blockquote><p><a class="link"   href="https://www.cnblogs.com/MashiroSky/p/5918158.html" >中国剩余定理学习笔记 - MashiroSky - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><h4 id="2-2-2-二次剩余："><a href="#2-2-2-二次剩余：" class="headerlink" title="2.2.2 二次剩余："></a><em>2.2.2 二次剩余：</em></h4><h5 id="1-二次剩余定理："><a href="#1-二次剩余定理：" class="headerlink" title="1. 二次剩余定理："></a><em><strong>1. 二次剩余定理：</strong></em></h5><p>对于n和素数p来说，存在x使</p><p> 方程  x^2≡n(mod p)    </p><p>成立</p><h5 id="2-引入符号："><a href="#2-引入符号：" class="headerlink" title="2. 引入符号："></a><em>2. <strong>引入符号：</strong></em></h5><p>勒让德符号，这个符号里有两个值，一个是n,一个是p。假设p为奇素数，且n无法整除p时，有以下定义</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128164649412.png"                      alt="image-20221128164649412"                ></p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128164748783.png"                      alt="image-20221128164748783" style="zoom:80%;"                 ><p><strong>类似于paper中的雅可比符号</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128171832142.png"                      alt="image-20221128171832142"                ></p><h5 id="3-证明："><a href="#3-证明：" class="headerlink" title="3. 证明："></a><em>3. 证明：</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128165544913.png"                      alt="image-20221128165544913"                ></p><p><a class="link"   href="https://blog.csdn.net/weixin_44203780/article/details/104634637" >(5条消息) 二次剩余定理详解_gerayking的博客-CSDN博客_二次剩余定理<i class="fas fa-external-link-alt"></i></a></p><h3 id="2-3-笔记整理："><a href="#2-3-笔记整理：" class="headerlink" title="2.3 笔记整理："></a><em>2.3 笔记整理：</em></h3><h4 id="2-3-1-算法："><a href="#2-3-1-算法：" class="headerlink" title="2.3.1 算法："></a><em><strong>2.3.1 算法：</strong></em></h4><h5 id="1-判断x是否为二次剩余"><a href="#1-判断x是否为二次剩余" class="headerlink" title="1. 判断x是否为二次剩余"></a><em><strong>1. 判断x是否为二次剩余</strong></em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128222232986.png"                      alt="image-20221128222232986" style="zoom:80%;"                 ><h5 id="2-用N已知的因子p、q判断模N下数x是否为二次剩余"><a href="#2-用N已知的因子p、q判断模N下数x是否为二次剩余" class="headerlink" title="2. 用N已知的因子p、q判断模N下数x是否为二次剩余"></a><em><strong>2. 用N已知的因子p、q判断模N下数x是否为二次剩余</strong></em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128222558921.png"                      alt="image-20221128222558921" style="zoom:80%;"                 ><h5 id="3-已知条件"><a href="#3-已知条件" class="headerlink" title="3. 已知条件"></a><em>3. 已知条件</em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128232726545.png"                      alt="image-20221128232726545" style="zoom:80%;"                 ><h5 id="4-加密算法"><a href="#4-加密算法" class="headerlink" title="4. 加密算法"></a><em>4. 加密算法</em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128233704272.png"                      alt="image-20221128233704272" style="zoom:80%;"                 ><h5 id="5-解密算法"><a href="#5-解密算法" class="headerlink" title="5. 解密算法"></a><em>5. 解密算法</em></h5><p>由于接收者已知私钥：p、q，他就不需要另外单独的解密算法，通过判断c是否为二次剩余，他就可以知道密文为0还是1。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234457449.png"                      alt="image-20221128234457449" style="zoom:80%;"                 ><h4 id="2-3-2-命题："><a href="#2-3-2-命题：" class="headerlink" title="2.3.2 命题："></a><em>2.3.2 命题：</em></h4><h5 id="1-二次剩余"><a href="#1-二次剩余" class="headerlink" title="1. 二次剩余"></a><em><strong>1. 二次剩余</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234820942.png"                      alt="image-20221128234820942"                ></p><h5 id="2-雅可比符号"><a href="#2-雅可比符号" class="headerlink" title="2. 雅可比符号"></a><em><strong>2. 雅可比符号</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234849165.png"                      alt="image-20221128234849165"                ></p><h5 id="3-雅可比乘法性质"><a href="#3-雅可比乘法性质" class="headerlink" title="3. 雅可比乘法性质"></a><em><strong>3. 雅可比乘法性质</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234920652.png"                      alt="image-20221128234920652"                ></p><h5 id="4-二次剩余的复合运算"><a href="#4-二次剩余的复合运算" class="headerlink" title="4. 二次剩余的复合运算"></a><em><strong>4.</strong> 二次剩余的复合运算</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235001930.png"                      alt="image-20221128235001930"                ></p><h5 id="5-二次剩余与雅可比的分布"><a href="#5-二次剩余与雅可比的分布" class="headerlink" title="5. 二次剩余与雅可比的分布"></a><em>5. 二次剩余与雅可比的分布</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235046610.png"                      alt="image-20221128235046610"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235104749.png"                      alt="image-20221128235104749"                ></p><h5 id="6-雅可比的复合运算"><a href="#6-雅可比的复合运算" class="headerlink" title="6. 雅可比的复合运算"></a><em>6. 雅可比的复合运算</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235142046.png"                      alt="image-20221128235142046"                ></p><h2 id="3-Task解题"><a href="#3-Task解题" class="headerlink" title="3. Task解题"></a><em>3. Task解题</em></h2><h4 id="3-1-题目模型："><a href="#3-1-题目模型：" class="headerlink" title="3.1 题目模型："></a><em>3.1 题目模型：</em></h4><p>本task的模型是 <strong>Goldwasser-Micali Cryprosystem</strong>，即GM公钥加密系统</p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221129005320790.png"                      alt="image-20221129005320790" style="zoom:80%;"                 ><h4 id="3-2解题思路："><a href="#3-2解题思路：" class="headerlink" title="3.2解题思路："></a><em>3.2解题思路：</em></h4><h5 id="3-2-1-题目分析："><a href="#3-2-1-题目分析：" class="headerlink" title="3.2.1 题目分析："></a><em>3.2.1 题目分析：</em></h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">100</span>)   </span><br><span class="line">q = getPrime(<span class="number">100</span>)    </span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)  </span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:  </span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    </span><br><span class="line">    <span class="comment">#历遍转化为二进制数的flag，即逐位获得flag的二进制位</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)  </span><br><span class="line">        <span class="comment">#在（1，n）的范围内随机选择用于加密信息的x</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:  </span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><p>我们观察到本task的模型是 <strong>Goldwasser-Micali Cryprosystem</strong>，c的加密方式也已经给出，并且在clist数组内列出了每个c的值。</p><p>c是这样加密的：c&#x3D;(3^(int(i)+2x)*x^2)%n </p><p>仔细观察上式，发现当i&#x3D;0时情况特殊。若i&#x3D;0,则c&#x3D;(3^x*x)^2%n</p><p>而此时c是模n的二次剩余。</p><p>$$<br>总结一下，当c是模n的二次剩余，即J_n(c)&#x3D;1时，i&#x3D;0<br>$$</p><p>$$<br>那么相反，当c是模n的非二次剩余，即J_n(c)&#x3D;-1时，i&#x3D;1<br>$$</p><h5 id="3-2-2-破解流程："><a href="#3-2-2-破解流程：" class="headerlink" title="3.2.2 破解流程："></a><em>3.2.2 破解流程：</em></h5><p>我们先列出已知条件，即n与clist中若干组加密的c的值</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line">clist=[<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>通过分析，我们发现能够在仅知道公钥n的条件下，通过jacobi判断c是否为二次剩余对flag进行还原。</p><p>攻击设计如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#历遍给出的若干组c</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> clist:   </span><br><span class="line"><span class="comment">#判断“二次剩余”，逐个还原flag的二进制数</span></span><br><span class="line"><span class="keyword">if</span> gp.jacobi(c,n)==<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">if</span>  gp.jacobi(c,n)==-<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure></div><h5 id="3-2-3-攻击脚本："><a href="#3-2-3-攻击脚本：" class="headerlink" title="3.2.3 攻击脚本："></a><em>3.2.3 攻击脚本：</em></h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#GM脚本</span></span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">n=<span class="number">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line">clist=[<span class="number">112490766735794793494258589897687977797993914062877995369853</span>, <span class="number">423825989606899409733986824741778284626898537704684650054048</span>, <span class="number">1239912440099782777043012567198356769914426423982980091061342</span>, <span class="number">1078272043845620437375344423460688188703277391763226546180151</span>, <span class="number">159286594418951337823608883690981934876156746053051292254402</span>, <span class="number">189434397083734065502133592439774066008070864031834709620441</span>, <span class="number">264105932521685455831442874483122006851812174082486446496525</span>, <span class="number">252479590298382195780257510632414277760400686563367629394825</span>, <span class="number">34602153293813328946647556336715300088648653636913843351330</span>, <span class="number">808692976248223555967993480457680585654329233137701900525232</span>, <span class="number">836623390705731389723338030121423143060093415003999783847569</span>, <span class="number">1218829648463542488706300570862499177531816513847669694517865</span>, <span class="number">571795296699927140597629733281737316938588378300113684751321</span>, <span class="number">324408602401500017634991400429058861929441907523133040616718</span>, <span class="number">652309276856121062936275131393396513436481452168222192943617</span>, <span class="number">135368324264829776566203256490111602190045577103623626459391</span>, <span class="number">677807894471260530035795635544578014296111908610448488780236</span>, <span class="number">1135708831589387209825610411788217272141435421502826225558333</span>, <span class="number">196882176169680492388044653063809988445336200851553236565493</span>, <span class="number">1130705847039352086713022625138307016610235729598245321418537</span>, <span class="number">974627899979016730650505688458957247745733629797568884460037</span>, <span class="number">948987355716018600108888773982169186615279073844787201014331</span>, <span class="number">364200727831752453880724784142441918092136276002472196567297</span>, <span class="number">811786724825671349602848333002825903390189436235744947667153</span>, <span class="number">248544601758659627780643527412918707686666534454807514221527</span>, <span class="number">1078860601713092925823762998344218082511712606733279204236487</span>, <span class="number">634851505432770176888905188832078431577879067601938324607512</span>, <span class="number">232972021265122845242665536151391828176473610240017058444456</span>, <span class="number">1080796896535347345799923528377657622102130648424673730618155</span>, <span class="number">622059452832122796944248249707923610120342427983134655552340</span>, <span class="number">837257289852652447556360719449396492271622453092839975184158</span>, <span class="number">626327369687614106133688347844033161113612134573404258486630</span>, <span class="number">1233019194503373412608053469954621323121044455057773900406773</span>, <span class="number">912564467902216938034173803480737819092198560216579817988291</span>, <span class="number">408076399689155479697691914877522087726703540593136498587215</span>, <span class="number">1118745562641959211267518507476218888452509349041078337285098</span>, <span class="number">1103228775032586830415033772993541541820163005491285279882940</span>, <span class="number">680899077364553221002722115625274809744677788062477442312086</span>, <span class="number">355349436487753936000721704075588637048102593449252106813298</span>, <span class="number">5254361838244723184679801326407268664182654715017847086461</span>, <span class="number">480145671282471097574354032682584083826945502763658946101104</span>, <span class="number">249136810947175342894562520096603076879372702701088690594445</span>, <span class="number">175216547555975039599856545426098941943382367602172941744494</span>, <span class="number">436310864447848960706296122266108102033486860525693191197797</span>, <span class="number">342620466614509535208918527767209905005823047382938223113086</span>, <span class="number">369848992268737575958936185907214270590887322936419642815242</span>, <span class="number">278575045025661827978388874494219837629182438978526195181637</span>, <span class="number">1189171180780533071473125545247289861677955100195126109964590</span>, <span class="number">256190182678715266654387215899616014762531664768736561586327</span>, <span class="number">719160215933023695898776016718481385742508618676368640641809</span>, <span class="number">147033122794177086112261858085593706727904275426698884436011</span>, <span class="number">247466503394960387825735598976068779045757078494832316444804</span>, <span class="number">787155643450160361724955357286670519256662665704845721250609</span>, <span class="number">112101120505278148126370035869523081506090979629681063614381</span>, <span class="number">890009544685851814191758439205974159586245412054287515881584</span>, <span class="number">1168625756997945588141764967298286550498540363325170551587334</span>, <span class="number">946031342434770434479581499217378781992921204179509449159996</span>, <span class="number">759124753621557368233069144948668001126536400499520990700641</span>, <span class="number">930584421635842804698880452391670787414151645249729141739148</span>, <span class="number">140981825203074314092967178062754008486703246602401550271041</span>, <span class="number">880126454149733441805446179826584472107299085899567279467558</span>, <span class="number">510129631452465708304688340114214360026947205003705062663759</span>, <span class="number">857274757020001316639221394675820731579775247610619594760511</span>, <span class="number">444486969413575687285961819261097401974268741167841964919716</span>, <span class="number">645830958128126799221416466698967430939726760487764050203821</span>, <span class="number">128864469762235652994228226148325614187747349331618451490354</span>, <span class="number">732913002124581119538173953534485652651112140400076340646452</span>, <span class="number">1245672039639609341331477592944058028011275464117654972595670</span>, <span class="number">1160765030758624190775369713232721901616189349905945190302338</span>, <span class="number">745734132091942990384796294800038299023052878196943617322617</span>, <span class="number">34973161572808799782240527358912894045293050940490682156733</span>, <span class="number">507586651070816931641904112686082840821460472219390068396982</span>, <span class="number">359195216122538975934588740641220005777478961423841727365432</span>, <span class="number">60506687352654743312206686911057762445232526009857863834444</span>, <span class="number">402036521271253699065227780662896890228371046068283711170220</span>, <span class="number">465427226677337673103293964961886503610313835775181975449721</span>, <span class="number">925246962888172144515172444374190859841851825972285013006527</span>, <span class="number">542176614893876361668218387162168517498644799220587472896002</span>, <span class="number">852215132196560596695876248813488364201491362280912035912061</span>, <span class="number">945548964927065532651141821562204387565145712002346337639711</span>, <span class="number">736943822066388892909878515650831955490636214039062998720510</span>, <span class="number">766357526983761241394182000478355475617711906398422036954152</span>, <span class="number">77156525593382594092608158744099524034892127423492520631820</span>, <span class="number">562562817542804973601572838378263130638457829485887327130286</span>, <span class="number">768093992370198202822524520006977816845162154854939167515517</span>, <span class="number">1099957424762490943973557935337350760135180754563993547358098</span>, <span class="number">698816668614997174913438496891169625976027534942525487303513</span>, <span class="number">417641699919584202170293946436276552973997395211792288687960</span>, <span class="number">1006229610175567855209117721408416419896921240126676949824724</span>, <span class="number">4206431689326446028142220658552064336105749936096602165359</span>, <span class="number">893846509909828693967573302731018066461118006150050253703744</span>, <span class="number">878425189026235350891203121924637130803808920422558040493294</span>, <span class="number">730047416245095988472212050949689633327186823542036387345181</span>, <span class="number">648095719945750715387983948406690533087473721929975873848169</span>, <span class="number">213513454359755001454814601053555627585345770061082141021326</span>, <span class="number">350001050012957205656929492039628823072469208940960439158263</span>, <span class="number">1016858635000037892730835311903706149371704230428070443107320</span>, <span class="number">1040987439471207869975679257301693610464700899302787643642354</span>, <span class="number">1194690615352550474729309715449838057220521596135246725909553</span>, <span class="number">508165053077110820797186371383859674371399129952105597675096</span>, <span class="number">266494438294281492504556232035584920066331725618646155019547</span>, <span class="number">28469482072427012244441092412738741355431846649166066368980</span>, <span class="number">790175775999108776289865518368056397969387298334297622465909</span>, <span class="number">590581138260907253939363764832940322585129285968275409510634</span>, <span class="number">221909012579985462013325803334419731308959816500415305934495</span>, <span class="number">1063780559219791515938747204569742799329237935871594345400252</span>, <span class="number">977747525495509380693721486866821791065499754056415279744653</span>, <span class="number">346306061371595730004513789139807509540063462412619321003626</span>, <span class="number">456103179467597859705969406860196938169100856240100927540401</span>, <span class="number">969300078509189631808517876996065933181606409375207150288464</span>, <span class="number">1029806631220370012120597683927351131622576733031694535189521</span>, <span class="number">344896431603140401163996810922500893279239069499717183710501</span>, <span class="number">430000423804197030568046280589772094106128395099434235915031</span>, <span class="number">700179843567016021775399107572964843751703290591400960796112</span>, <span class="number">961227906080189143689698720420426659986080298413605666115640</span>, <span class="number">607209606799750473714271393200060455739097869884727178692312</span>, <span class="number">106958847163040842225140399905505511449479709017540851084532</span>, <span class="number">953369942103273809257762268859167463617831445026988544378658</span>, <span class="number">428269440686506672744282327102546440435442014650795927162711</span>, <span class="number">56621803434665963032193024056111306570802155743250152849716</span>, <span class="number">800707635631355839166448276143596444307614901816577459076131</span>, <span class="number">1032256515703247765067950588859299047987257001987777631061065</span>, <span class="number">813725055801254665600156259482200403981770576173968929131487</span>, <span class="number">940024839745068011043019236327963504645352520797347949823455</span>, <span class="number">1065005324140908547287467504568283884363143527586278243210801</span>, <span class="number">1087828777506290663525994551834233065465427418753806182842291</span>, <span class="number">668387132001968449612224853010931354244797738682007519611989</span>, <span class="number">563185246196177998134932666270526715161378776103340983046580</span>, <span class="number">148292872313931508344196679476720973752571125303712466045656</span>, <span class="number">413889563851226543249984374872220761253120628252088546262699</span>, <span class="number">853542105910386365929770611480736086723126396438880650918917</span>, <span class="number">59730458840715910492468261806200793684923819793480597554146</span>, <span class="number">792260492800286127199649276659137441324248689470594987965190</span>, <span class="number">753608630500639136668081531883097047491651258191552267413126</span>, <span class="number">33514911499472634865669915075769163328171019557849259474018</span>, <span class="number">634963859228206842307837566519244534650818456901841184879977</span>, <span class="number">219354096455968590219445072777282329948785844491217770978344</span>, <span class="number">1123377226439583158729762969668999276741275445803396272436031</span>, <span class="number">357765295513680388973981712560200525235334734759663454993805</span>, <span class="number">385868499980630535766019957877752149506518574529845752144666</span>, <span class="number">138578212294299392480319417966870656714476525885983752756188</span>, <span class="number">1110526796192425688386237355263892073046060477008920073455044</span>, <span class="number">244699783645221387947312903861559688207612147588246639081699</span>, <span class="number">583209905862562678600202085212425597809036630416117298854978</span>, <span class="number">1207854793808762194414317661151529169444903662139065050090746</span>, <span class="number">1127506983223466275821900811940356395242309493951089427884032</span>, <span class="number">526185119576631048584313761548704536031634598332129570964689</span>, <span class="number">266882032196696984660521486449809902101615921156569537960109</span>, <span class="number">1188118705564450461919200724390473040524626320052324478509883</span>, <span class="number">682831747455078454647149830819696088960233603851250102828667</span>, <span class="number">669419928942561433130809268138650695825596612075801278942980</span>, <span class="number">1077750630919867687880983437504767304166615787212813240073843</span>, <span class="number">486023540111308483450127320955599047045479654684477043315645</span>, <span class="number">409429366346146233850088863324915025465847596238000661872172</span>, <span class="number">779883595226131237594759409249289551033410304517183865388408</span>, <span class="number">1155872225708857920911178110668279174877878422508206228579940</span>, <span class="number">411063490066038942009369947241345843238439795078686488373864</span>, <span class="number">1243453053541946030699872676712518536022061850799945414120045</span>, <span class="number">871711034820169700581685353768658469631429266493677466057997</span>, <span class="number">601920686459160120670719526703980120744719013393032353678765</span>, <span class="number">329932100141177850249406090412821976994089707958551194468769</span>, <span class="number">558327299751202100333335353826111016492585371503632197870640</span>, <span class="number">113444032302978611299580451314055133491399096282744687816086</span>, <span class="number">152525914892717139057165748051966776217223953242540511499945</span>, <span class="number">965404850400527912039904270871065001313018148780552532312669</span>, <span class="number">313557099445185696402013375071955475516203519824979749629786</span>, <span class="number">952254159335810337756614972813240144837526566801182319987154</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> clist:</span><br><span class="line"><span class="keyword">if</span> gp.jacobi(c,n)==<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">if</span>  gp.jacobi(c,n)==-<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag二进制:&#x27;</span>,flag)</span><br><span class="line"><span class="comment">#二进制转化成十进制</span></span><br><span class="line">f=<span class="built_in">int</span>(flag,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag十进制:&#x27;</span>,f)</span><br><span class="line"><span class="built_in">print</span>(n2s(f))</span><br></pre></td></tr></table></figure></div><p><strong>运行结果：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221130000543407.png"                      alt="image-20221130000543407"                ></p><p><em>顺利得到flag：</em></p><p><strong>SYC{run_to_the_light}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-对于Task代码注释的补齐&quot;&gt;&lt;a href=&quot;#1-对于Task代码注释的补齐&quot; class=&quot;headerlink&quot; title=&quot;1.对于Task代码注释的补齐&quot;&gt;&lt;/a&gt;&lt;em&gt;1.对于Task代码注释的补齐&lt;/em&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-</summary>
      
    
    
    
    
    <category term="面试小结" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/12/16/hello-world/"/>
    <id>http://example.com/2022/12/16/hello-world/</id>
    <published>2022-12-16T03:48:54.740Z</published>
    <updated>2022-12-16T03:48:54.740Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
