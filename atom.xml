<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2024-06-22T10:39:36.158Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>EDA-Study</title>
    <link href="http://example.com/2024/06/22/EDA-Study/"/>
    <id>http://example.com/2024/06/22/EDA-Study/</id>
    <published>2024-06-22T07:51:26.000Z</published>
    <updated>2024-06-22T10:39:36.158Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EDA-Study-Diary"><a href="#EDA-Study-Diary" class="headerlink" title="EDA Study Diary"></a>EDA Study Diary</h1><h2 id="一、EDA-Knowledge"><a href="#一、EDA-Knowledge" class="headerlink" title="一、EDA Knowledge"></a>一、EDA Knowledge</h2><h3 id="1-PCB相关基础知识"><a href="#1-PCB相关基础知识" class="headerlink" title="1.PCB相关基础知识"></a>1.PCB相关基础知识</h3><p>  PCB(Printed Circuit Board),即印刷电路板，或印刷线路板。</p><p>  功能上类似导线，是连接电子元器件的载体，支撑并连接电子元器件。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/06/22/EDA-Study/image-20240622161038687.png" class="" title="image-20240622161038687"><h4 id="1-通孔、盲孔、埋孔"><a href="#1-通孔、盲孔、埋孔" class="headerlink" title="(1)通孔、盲孔、埋孔"></a>(1)通孔、盲孔、埋孔</h4><img lazyload="" src="/images/loading.svg" data-src="/2024/06/22/EDA-Study/image-20240622171155099.png" class="" title="image-20240622171155099"><ul><li>通孔：从顶层开孔到底层打通PCB，在内壁灌注铜皮。</li><li>埋孔：埋在内层中，内层间切换，于外部来说不可见 。</li><li>盲孔：始于第一层，顶层和除底层之间的中间层切换。</li></ul><h4 id="（2）元素总结"><a href="#（2）元素总结" class="headerlink" title="（2）元素总结"></a>（2）元素总结</h4><img lazyload="" src="/images/loading.svg" data-src="/2024/06/22/EDA-Study/image-20240622183259096.png" class="" title="image-20240622183259096"><ul><li>导线（连接）</li><li>过孔</li><li>丝印（用白油墨标记封装的元器件）</li><li>焊盘（焊接元器件如电阻等等 ）</li><li>定位孔（机械结构，安装PCB）</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;EDA-Study-Diary&quot;&gt;&lt;a href=&quot;#EDA-Study-Diary&quot; class=&quot;headerlink&quot; title=&quot;EDA Study Diary&quot;&gt;&lt;/a&gt;EDA Study Diary&lt;/h1&gt;&lt;h2 id=&quot;一、EDA-Knowled</summary>
      
    
    
    
    
    <category term="EDA" scheme="http://example.com/tags/EDA/"/>
    
  </entry>
  
  <entry>
    <title>MEMS-Study</title>
    <link href="http://example.com/2024/03/31/MEMS-Study/"/>
    <id>http://example.com/2024/03/31/MEMS-Study/</id>
    <published>2024-03-31T05:39:52.000Z</published>
    <updated>2024-04-05T12:32:56.702Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MEMS振荡器的结构优化和电路设计"><a href="#MEMS振荡器的结构优化和电路设计" class="headerlink" title="MEMS振荡器的结构优化和电路设计"></a>MEMS振荡器的结构优化和电路设计</h1><h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>  基于微机电系统(MEMS)技术的振荡器凭借着易集成、低成本和频率可调等诸多优秀特性正在逐步抢占时钟市场份额。本文在对硅 MEMS 振荡器的工作原理，国内外发展现状进行充分调研的基础上，主要从 MEMS 谐振器的结构设计优化，温度补偿电路设计经行研究。</p><p>  硅 MEMS 振荡器的输出频率随温度变化偏移较大，较差的频率温度稳定性限制了其在无线通信和导航等高精度场合中的应用。本文设计了基于锁相环的有源开环补偿电路，电路包括锁相环，温度传感器和微处理单元。分析了各模块的设计和构建方案，并对电路进行焊接制作构成了具有温度补偿功能的 MEMS振荡器。</p><p><strong>关键词：</strong> MEMS 振荡器，MEMS 谐振器，接口电路，温度补偿电路</p><h2 id="1-绪论"><a href="#1-绪论" class="headerlink" title="1 绪论"></a>1 绪论</h2><h3 id="1-1-研究背景"><a href="#1-1-研究背景" class="headerlink" title="1.1 研究背景"></a>1.1 研究背景</h3><p>  几乎在所有的电子设备中，都存在着一个时钟(clock)，时钟是用来测量时间或同步事件的准确参考源，是系统运行的时间参考，时钟的性能直接影响了系统性能的上限。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240331135725038.png" class="" title="image-20240331135725038"><p>  如今的时钟大多基于谐振器技术，谐振器往往有着固定的谐振频率，配合上一定的维持机制可构成振荡器输出稳定信号，  主要代表便是石英晶体振荡器。石英是一种压电材料，通过简单的外接电路便可发生振荡，不同的几何形状可以被用来实现不同的谐振频率。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240331135713044.png" class="" title="image-20240331135713044"><p>  石英还具有与其晶体结构有关的额外优点，当在一定角度切割时，石英晶体对温度的依赖性很小，温度稳定性是时钟的一个非常重要的特性，温度变化是大多数参考频率漂移的主要原因。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240331135654574.png" class="" title="image-20240331135654574"><p>  由于石英晶体振荡器构建简单并有着很高的频率稳定性，很快绝大部分的时钟市场,从用于无线电和手表的低稳定性振荡器到用于军用雷达和导航的高稳定性设备，都被石英所占据。但与此同时，一种以微机电系统(Micro-ElectroMechanical Systems, MEMS)为核心技术的微机械谐振器正蓬勃发展，微机械谐振器可以通过外部驱动将微机械结构激励在固定频率上。</p><h3 id="1-2-MEMS谐振器"><a href="#1-2-MEMS谐振器" class="headerlink" title="1.2 MEMS谐振器"></a>1.2 MEMS谐振器</h3><h4 id="1-2-1-MEMS谐振器概述"><a href="#1-2-1-MEMS谐振器概述" class="headerlink" title="1.2.1 MEMS谐振器概述"></a>1.2.1 MEMS谐振器概述</h4><p>  MEMS 谐振器是一种基于微机电系统的机械结构，不同的材料和结构具有不同的谐振频率，当外界电信号与 MEMS 谐振器的谐振频率一致时，谐振器便会发生共振输出电信号。其本质是一个换能器，通过振动将机械能和电能相互转化，在谐振频率处转化效率最高。历史上第一个 MEMS 谐振器是由 Nathanson 等人在 1967 年提出的，它由一个场效应晶体管构成，晶体管的金属栅极电极作为一个柔性悬臂梁悬浮在通道上，当栅极有一个工作在机械谐振频率上的电压驱动时，静电力使栅极上下振动，通过晶体管的沟道实现调制传导，从而在传统集成电路技术中实现了高 Q(品质因数)值的滤波(约 500)，这个演示标志着 MEMS 谐振器的诞生，但是直到 20 世纪 80 年代中后期梳状叉指电容换能器的出现，MEMS 谐振器才开始快速发展。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240331141823112.png" class="" title="image-20240331141823112"><h4 id="1-2-2-MEMS谐振器的震动模态"><a href="#1-2-2-MEMS谐振器的震动模态" class="headerlink" title="1.2.2 MEMS谐振器的震动模态"></a>1.2.2 MEMS谐振器的震动模态</h4><p>  由于制造的限制，MEMS 谐振器的主要结构包括梁、圆盘、圆环和平板等，这些结构在不同的谐振模态下工作，这些模态主要分为弯曲模态、体振动模态、剪切模态和扭转模态。其中体振动模态又可细分为纵向伸展模态，横向伸展模态，平方伸展模态和呼吸模态，剪切模态也可细分为 Lame 模态,面剪切模态和酒杯模态[7]。每个微机械谐振器都可以有多个不同振动模态，例如一个简单的梁可以在不同的弯曲模态和伸展模态下振动，如图 1.5(a)。 某些振动模式容易激励并振动稳定，而这些模态往往被设计成主导模态，通过设计相应得谐振器接口电路可以使谐振器工作在主导模态之中。</p><p>  虽然同一个结构有多种振动模式，但是振动模式与激励方式直接相关。例如，对于圆盘谐振器，如果采用周围布置的电容驱动，会以伸展模态或者酒杯模态振动；而如果在圆盘上方布置驱动电极，则可以获得的 Lame 振动模态。由于驱动电容可选位置的限制，MEMS 谐振器的驱动电极往往位于振动结构的周围。因此，对于圆盘、圆环和平板等结构，多以面内伸展模态和酒杯模态为主，如图 1.5(b)。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240331142624805.png" class="" title="image-20240331142624805"><h4 id="1-2-3-MEMS谐振器的驱动和检测"><a href="#1-2-3-MEMS谐振器的驱动和检测" class="headerlink" title="1.2.3 MEMS谐振器的驱动和检测"></a>1.2.3 MEMS谐振器的驱动和检测</h4><p>  MEMS 谐振器旨在利用机械领域的优良特性来解决电学系统的局限性，例如，在很多通信系统之中，需要高 Q 值的谐振器，但是依赖电学器件 RLC 实现的谐振器 Q 值很难超过 10，而由微机械构成的谐振器的 Q 值可以超过 106 [10]。因此，为了使机械元件在电学系统中充分发挥其优势，需要找到方法实现电信号和机械信号的转化，也就是对 MEMS 谐振器的驱动和检测。</p><p>  MEMS 谐振器的驱动和检测方法很丰富，在驱动方面，除了前文提到的电容式的静电驱动，还有压电驱动、电热驱动和磁驱动。</p><h2 id="2-MEMS谐振器的设计优化及电学模型"><a href="#2-MEMS谐振器的设计优化及电学模型" class="headerlink" title="2 MEMS谐振器的设计优化及电学模型"></a>2 MEMS谐振器的设计优化及电学模型</h2><p>  MEMS 领域内已经产生了大量的谐振器，这些谐振器有着不同的振动模态和不同的驱动方式。其中工作在体振动模态下的器件往往具有更高的谐振频率和 Q值，而电容式静电驱动的谐振器由于采用硅作为构建材料更符合 IC 工艺的发展，两者兼具的谐振器则无疑更受青睐。因此本章将以工作在体振动模态的电容式环形谐振器为基础展开研究，提出并设计了一款具有高 Q 值，低动态阻抗的六环MEMS 谐振器，对其设计过程进行了详细分析。最后为谐振器构建等效电学模型。</p><h3 id="2-1-六环MEMS谐振器设计"><a href="#2-1-六环MEMS谐振器设计" class="headerlink" title="2.1 六环MEMS谐振器设计"></a>2.1 六环MEMS谐振器设计</h3><h4 id="2-1-1-环形谐振器"><a href="#2-1-1-环形谐振器" class="headerlink" title="2.1.1  环形谐振器"></a>2.1.1  环形谐振器</h4><p>  环形谐振器是微机电系统中一种常见的电容式谐振器，其基本结构如图 2.1。在圆环的内外侧都布置了电极，当外电极作为驱动电极被施加了交流电压，外电极与圆环之间会产生静电力，当交流电压频率与圆环本身的谐振频率一致时，圆环便会发生共振，由此改变了内电极与圆环之间的电容大小，在输出端便会输出电流信号。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240331152828103.png" class="" title="image-20240331152828103"><h3 id="2-2-谐振器的等效电学模型"><a href="#2-2-谐振器的等效电学模型" class="headerlink" title="2.2 谐振器的等效电学模型"></a>2.2 谐振器的等效电学模型</h3><p>  为了更好的设计接口电路，需要将微机械结构转化成等效电路模型，以便于对其电气性能进行更好的分析。对于简单的单个电容式谐振器而言，整个系统包括输入输出端的机电换能器和机械谐振结构，如图 2.13。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240405202627230.png" class="" title="image-20240405202627230"><p>​    串联RLC等效电学模型如图2.14</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240405202938893.png" class="" title="image-20240405202938893"><p>  本文所研究的六环 MEMS 谐振器可以看成三个图 2.15 所示的双环级联结构，图 2.15 描述了双环谐振器的工作示意图，以及质量刚度阻尼模型和等效电学模型。其中耦合梁用 T 型电容器结构进行了等效。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/31/MEMS-Study/image-20240405203241583.png" class="" title="image-20240405203241583">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;MEMS振荡器的结构优化和电路设计&quot;&gt;&lt;a href=&quot;#MEMS振荡器的结构优化和电路设计&quot; class=&quot;headerlink&quot; title=&quot;MEMS振荡器的结构优化和电路设计&quot;&gt;&lt;/a&gt;MEMS振荡器的结构优化和电路设计&lt;/h1&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="MCU" scheme="http://example.com/categories/MCU/"/>
    
    
    <category term="true" scheme="http://example.com/tags/true/"/>
    
  </entry>
  
  <entry>
    <title>CVP_to_SVP</title>
    <link href="http://example.com/2024/03/16/CVP-to-SVP/"/>
    <id>http://example.com/2024/03/16/CVP-to-SVP/</id>
    <published>2024-03-16T07:05:39.000Z</published>
    <updated>2024-03-31T11:37:50.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="From-CVP-to-SVP"><a href="#From-CVP-to-SVP" class="headerlink" title="From CVP to SVP"></a>From CVP to SVP</h1><h2 id="1-SVP问题"><a href="#1-SVP问题" class="headerlink" title="1 SVP问题"></a>1 SVP问题</h2><p>  svp问题(Shortest Vector Problem），顾名思义，就是在格中寻找”长度“最短的向量。</p><p>  将抽象的问题定量分析，我们可以把格中的一个点设置为坐标轴0点。这样可以把问题转化为：找到距离 0 点最近的格点   <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.82ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1246.5 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></p><p>  一般而言，我们使用向量的欧几里得范数作为“距离”的定义。</p><p><strong>定义：对于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>维向量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.097ex" height="1.027ex" role="img" focusable="false" viewBox="0 -443 485 454"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g></g></g></svg></mjx-container>的欧几里得范数为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -1.287ex;" xmlns="http://www.w3.org/2000/svg" width="26.301ex" height="4.208ex" role="img" focusable="false" viewBox="0 -1291.1 11625.3 1860"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo" transform="translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(278,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mi" transform="translate(556,0)"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mo" transform="translate(1041,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1319,0) translate(0 -0.5)"><path data-c="7C" d="M139 -249H137Q125 -249 119 -235V251L120 737Q130 750 139 750Q152 750 159 735V-235Q151 -249 141 -249H139Z"></path></g><g data-mml-node="mo" transform="translate(1874.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msqrt" transform="translate(2930.6,0)"><g transform="translate(1020,0)"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,353.6) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(518,-297.3) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1143.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msubsup" transform="translate(2144,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,353.6) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mn" transform="translate(518,-297.3) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3287.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mo" transform="translate(4288,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(5682.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="msubsup" transform="translate(6682.4,0)"><g data-mml-node="mi"><path data-c="1D463" d="M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z"></path></g><g data-mml-node="mn" transform="translate(518,289) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g><g data-mml-node="mi" transform="translate(518,-247) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g><g data-mml-node="mo" transform="translate(0,81.1)"><path data-c="221A" d="M1001 1150Q1017 1150 1020 1132Q1020 1127 741 244L460 -643Q453 -650 436 -650H424Q423 -647 423 -645T421 -640T419 -631T415 -617T408 -594T399 -560T385 -512T367 -448T343 -364T312 -259L203 119L138 41L111 67L212 188L264 248L472 -474L983 1140Q988 1150 1001 1150Z"></path></g><rect width="7674.7" height="60" x="1020" y="1171.1"></rect></g></g></g></svg></mjx-container></strong></p><p>  对于<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>维的格，因为一个格基由<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>条向量组成，相应的就会有<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>条最短的向量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="18.783ex" height="1.927ex" role="img" focusable="false" viewBox="0 -694 8302 851.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1297.3,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(2353.1,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3650.4,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="mo" transform="translate(4706.2,0)"><path data-c="2026" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60ZM525 60Q525 84 542 102T585 120Q609 120 627 104T646 61Q646 36 629 18T586 0T543 17T525 60ZM972 60Q972 84 989 102T1032 120Q1056 120 1074 104T1093 61Q1093 36 1076 18T1033 0T990 17T972 60Z"></path></g><g data-mml-node="mo" transform="translate(6156,0)"><path data-c="2264" d="M674 636Q682 636 688 630T694 615T687 601Q686 600 417 472L151 346L399 228Q687 92 691 87Q694 81 694 76Q694 58 676 56H670L382 192Q92 329 90 331Q83 336 83 348Q84 359 96 365Q104 369 382 500T665 634Q669 636 674 636ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msub" transform="translate(7211.8,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mi" transform="translate(616,-150) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container>。</p><p>下图展示了一个2维的最短两条向量<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="5.619ex" height="2.009ex" role="img" focusable="false" viewBox="0 -694 2483.8 888"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(1019.6,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(1464.2,0)"><g data-mml-node="mi"><path data-c="1D706" d="M166 673Q166 685 183 694H202Q292 691 316 644Q322 629 373 486T474 207T524 67Q531 47 537 34T546 15T551 6T555 2T556 -2T550 -11H482Q457 3 450 18T399 152L354 277L340 262Q327 246 293 207T236 141Q211 112 174 69Q123 9 111 -1T83 -12Q47 -12 47 20Q47 37 61 52T199 187Q229 216 266 252T321 306L338 322Q338 323 288 462T234 612Q214 657 183 657Q166 657 166 673Z"></path></g><g data-mml-node="mn" transform="translate(616,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></svg></mjx-container></p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316173559344.png" class="" title="image-20240316173559344"><p>二维的SVP问题可以画同心圆来求解，但是如果维度上去了作图就行不通了。</p><p>但是，如果我们可以拿到<strong>相互正交的基格</strong>，那么我们只需要遍历基格中的各个向量就可以找到最短的向量了。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316175634642.png" class="" title="image-20240316175634642"><p><strong>为了找到最短的向量，就要尽量使基格正交。</strong></p><h2 id="2-CVP问题"><a href="#2-CVP问题" class="headerlink" title="2 CVP问题"></a>2 CVP问题</h2><p>  Lattice中另一大问题就是最近向量问题（CVP，Closest Vector Problem）了。问题的定义是这样的：给定连续空间中任意的一个点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container> ，找到距离这个点最近的格点 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.82ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1246.5 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container>。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316175930239.png" class="" title="image-20240316175930239"><p>​    其余包括还有 SIVP问题（Shortest Independent Vectors Problem）,BDD（Bounded Distance Decoding）问题 ,ADD（Absolute Distance Decoding）问题  等都是 <strong>SVP, CVP</strong> 的衍生，可以搞出如下的关联性</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316180025979.png" class="" title="image-20240316180025979"><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CVP--&gt;SVP</span><br></pre></td></tr></table></figure></div><p>假设我们有一个一维的格，然后我们需要找到距离点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>最近的格点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.82ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1246.5 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container></p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316180437683.png" class="" title="image-20240316180437683"><p>我们可以将格点”升维“，使得<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>也成为新格的一个格点。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316180745300.png" class="" title="image-20240316180745300"><p>  接下来，在这个新格中我们解决一下 <strong>SVP</strong>，找到最短向量，然后再将这个最短向量投影回原来的低维中，我们就能找到原来格中距离<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.817ex" height="1.441ex" role="img" focusable="false" viewBox="0 -626 361 637"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D461" d="M26 385Q19 392 19 395Q19 399 22 411T27 425Q29 430 36 430T87 431H140L159 511Q162 522 166 540T173 566T179 586T187 603T197 615T211 624T229 626Q247 625 254 615T261 596Q261 589 252 549T232 470L222 433Q222 431 272 431H323Q330 424 330 420Q330 398 317 385H210L174 240Q135 80 135 68Q135 26 162 26Q197 26 230 60T283 144Q285 150 288 151T303 153H307Q322 153 322 145Q322 142 319 133Q314 117 301 95T267 48T216 6T155 -11Q125 -11 98 4T59 56Q57 64 57 83V101L92 241Q127 382 128 383Q128 385 77 385H26Z"></path></g></g></g></svg></mjx-container>最近的格点<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.357ex;" xmlns="http://www.w3.org/2000/svg" width="2.82ex" height="1.902ex" role="img" focusable="false" viewBox="0 -683 1246.5 840.8"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msub"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mi" transform="translate(792,-150) scale(0.707)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></g></svg></mjx-container>了。</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316182314692.png" class="" title="image-20240316182314692"><p>这样，CVP问题能够转化为SVP问题，而解决SVP问题的关键还是<strong>找到正交基</strong></p><h2 id="3-Gram-Schmidt基格正交化"><a href="#3-Gram-Schmidt基格正交化" class="headerlink" title="3 Gram-Schmidt基格正交化"></a>3 Gram-Schmidt基格正交化</h2><p>  事实上，由于“离散”的特性，我们仅可以通过对格基进行一系列（系数为整数）的线性变换找到<strong>接近正交</strong>的基，而这一过程，我们称为<strong>格基规约（Lattice Basis Reduction）</strong></p><p>这里我们先介绍一种在线性代数中会学到的规约方法，即 <strong>Gram-Schmidt正交化</strong>，方便起见，我们在二维格上进行演示。</p><p>假设我们拥有一组基  <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="10.915ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 4824.3 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D435" d="M231 637Q204 637 199 638T194 649Q194 676 205 682Q206 683 335 683Q594 683 608 681Q671 671 713 636T756 544Q756 480 698 429T565 360L555 357Q619 348 660 311T702 219Q702 146 630 78T453 1Q446 0 242 0Q42 0 39 2Q35 5 35 10Q35 17 37 24Q42 43 47 45Q51 46 62 46H68Q95 46 128 49Q142 52 147 61Q150 65 219 339T288 628Q288 635 231 637ZM649 544Q649 574 634 600T585 634Q578 636 493 637Q473 637 451 637T416 636H403Q388 635 384 626Q382 622 352 506Q352 503 351 500L320 374H401Q482 374 494 376Q554 386 601 434T649 544ZM595 229Q595 273 572 302T512 336Q506 337 429 337Q311 337 310 336Q310 334 293 263T258 122L240 52Q240 48 252 48T333 46Q422 46 429 47Q491 54 543 105T595 229Z"></path></g><g data-mml-node="mo" transform="translate(1036.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2092.6,0)"><path data-c="5B" d="M118 -250V750H255V710H158V-210H255V-250H118Z"></path></g><g data-mml-node="msub" transform="translate(2370.6,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(3236.1,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="msub" transform="translate(3680.8,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(4546.3,0)"><path data-c="5D" d="M22 710V750H159V-250H22V-210H119V710H22Z"></path></g></g></g></svg></mjx-container></p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316182340876.png" class="" title="image-20240316182340876"><p>  在这个Lattice中，这两个基向量是不垂直的。接下来，我们尝试找到一组互相垂直的基满足  $b_1^<em>\perp b_2^</em><mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="29.412ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 13000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="TeXAtom" data-mjx-texclass="ORD"><g data-mml-node="mo"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">。</text></g></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">垂</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">直</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">是</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">相</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">互</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(7000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">所</text></g><g data-mml-node="mi" transform="translate(8000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">以</text></g><g data-mml-node="mi" transform="translate(9000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">我</text></g><g data-mml-node="mi" transform="translate(10000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">们</text></g><g data-mml-node="mi" transform="translate(11000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">先</text></g><g data-mml-node="mi" transform="translate(12000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">设</text></g></g></g></svg></mjx-container>b_1^*= b_1<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="15.837ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 7000 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><text data-variant="italic" transform="scale(1,-1)" font-size="884px" font-family="serif" font-style="italic">，</text></g><g data-mml-node="mi" transform="translate(1000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">然</text></g><g data-mml-node="mi" transform="translate(2000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">后</text></g><g data-mml-node="mi" transform="translate(3000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">尝</text></g><g data-mml-node="mi" transform="translate(4000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">试</text></g><g data-mml-node="mi" transform="translate(5000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">去</text></g><g data-mml-node="mi" transform="translate(6000,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">找</text></g></g></g></svg></mjx-container>b_2^*$ </p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316182705869.png" class="" title="image-20240316182705869"><p>  显然<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.595ex;" xmlns="http://www.w3.org/2000/svg" width="22.816ex" height="2.292ex" role="img" focusable="false" viewBox="0 -750 10084.5 1013.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(462,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(462,-263.2) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(1143.3,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msub" transform="translate(2199.1,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mn" transform="translate(462,-150) scale(0.707)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g><g data-mml-node="mo" transform="translate(3286.9,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(4287.1,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="msubsup" transform="translate(4808.1,0)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(462,363) scale(0.707)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mn" transform="translate(462,-263.2) scale(0.707)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g><g data-mml-node="mo" transform="translate(5673.7,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mi" transform="translate(6118.3,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(6917.1,0)"><path data-c="2208" d="M84 250Q84 372 166 450T360 539Q361 539 377 539T419 540T469 540H568Q583 532 583 520Q583 511 570 501L466 500Q355 499 329 494Q280 482 242 458T183 409T147 354T129 306T124 272V270H568Q583 262 583 250T568 230H124V228Q124 207 134 177T167 112T231 48T328 7Q355 1 466 0H570Q583 -10 583 -20Q583 -32 568 -40H471Q464 -40 446 -40T417 -41Q262 -41 172 45Q84 127 84 250Z"></path></g><g data-mml-node="mo" transform="translate(7861.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mn" transform="translate(8250.9,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g><g data-mml-node="mo" transform="translate(8750.9,0)"><path data-c="2C" d="M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z"></path></g><g data-mml-node="mn" transform="translate(9195.5,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(9695.5,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container> ，不过由于在格上我们仅可以通过对格基进行一系列系数为整数的线性变换我们最终所能得到的尽可能“垂直“的格基</p><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316182725698.png" class="" title="image-20240316182725698"><img lazyload="" src="/images/loading.svg" data-src="/2024/03/16/CVP-to-SVP/image-20240316183304843.png" class="" title="image-20240316183304843"><p>  高斯算法中蕴含的思想与欧几里得算法类似，两者都是不断地实施<strong>先约化后交换</strong>的策略。在伪代码中，**(2)(b)是约化步，(2)(c)是交换步**。</p><p>不停地<strong>让两个向量互相约化，直到它们无法变得更短为止</strong></p><p>低维</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#sage</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Gauss</span>(<span class="params">x,y</span>):</span><br><span class="line">    <span class="comment"># step 1</span></span><br><span class="line">    v1 = x; v2 = y</span><br><span class="line">    finished = <span class="literal">False</span></span><br><span class="line">    <span class="comment"># step 2</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> finished:</span><br><span class="line">        <span class="comment"># (a)</span></span><br><span class="line">        m = <span class="built_in">round</span>(( v2.dot_product(v1) / v1.dot_product(v1) ))</span><br><span class="line">        <span class="comment"># (b)</span></span><br><span class="line">        v2 = v2 - m*v1</span><br><span class="line">        <span class="comment"># (c)</span></span><br><span class="line">        <span class="keyword">if</span> v1.norm() &lt;= v2.norm():</span><br><span class="line">            finished = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            v1, v2 = v2, v1</span><br><span class="line">    </span><br><span class="line">   <span class="keyword">return</span> v1, v2</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>高维（LLL算法）</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">max</span>(<span class="params">a, b</span>):</span><br><span class="line">    <span class="keyword">return</span> a <span class="keyword">if</span> a &gt; b <span class="keyword">else</span> b</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LLL_v0</span>(<span class="params">M, delta=<span class="number">0.75</span></span>):</span><br><span class="line">    B = deepcopy(M)</span><br><span class="line">    Q, mu = B.gram_schmidt()</span><br><span class="line">    n, k = B.nrows(), <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> k &lt; n:</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># size reduction step</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">reversed</span>(<span class="built_in">range</span>(k)):</span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">abs</span>( mu[k][j] ) &gt; <span class="number">0.5</span>:</span><br><span class="line">                B[k] = B[k] - <span class="built_in">round</span>( mu[k][j] ) * B[j]</span><br><span class="line">                Q, mu = B.gram_schmidt()</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># swap step </span></span><br><span class="line">        <span class="keyword">if</span> Q[k].dot_product(Q[k]) &gt;= (delta - mu[k][k-<span class="number">1</span>]^<span class="number">2</span>) * Q[k-<span class="number">1</span>].dot_product(Q[k-<span class="number">1</span>]):</span><br><span class="line">            k = k + <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            B[k], B[k-<span class="number">1</span>] = B[k-<span class="number">1</span>], B[k]</span><br><span class="line">            Q, mu = B.gram_schmidt()</span><br><span class="line">            k = <span class="built_in">max</span>(k-<span class="number">1</span>,<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> B </span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><strong>Reference：</strong></p><ol><li><a class="link" href="https://blog.csdn.net/qq_42667481/article/details/118332181">格基规约算法：算法详解-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li><li>(<a class="link" href="https://mp.weixin.qq.com/s/nzFRgOUkffeUaF9PqtEnQA">https://mp.weixin.qq.com/s/nzFRgOUkffeUaF9PqtEnQA <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</li><li><a class="link" href="https://zhuanlan.zhihu.com/p/161622928">Lattice学习笔记02：格中难题 - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;From-CVP-to-SVP&quot;&gt;&lt;a href=&quot;#From-CVP-to-SVP&quot; class=&quot;headerlink&quot; title=&quot;From CVP to SVP&quot;&gt;&lt;/a&gt;From CVP to SVP&lt;/h1&gt;&lt;h2 id=&quot;1-SVP问题&quot;&gt;&lt;a h</summary>
      
    
    
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Geek2023</title>
    <link href="http://example.com/2023/11/23/Fi1nd_th3_x---WP%EF%BC%9A/"/>
    <id>http://example.com/2023/11/23/Fi1nd_th3_x---WP%EF%BC%9A/</id>
    <published>2023-11-23T15:32:52.000Z</published>
    <updated>2023-12-16T15:31:37.709Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Fi1nd-th3-x—WP："><a href="#Fi1nd-th3-x—WP：" class="headerlink" title="Fi1nd_th3_x—WP："></a>Fi1nd_th3_x—WP：</h1><p>  不难发现，dP、dQ、dR这三个模数两两之间并不互素。</p><p>  而中国剩余定理(CRT)不能解决模数不互质情况的模线性同余方程组。很明显，这是一道exCRT的题目。关键在于求出满足条件的解系，即x’。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Task-exp</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p= <span class="number">13014610351521460822156239705430709078128228907778181478242620569429327799535062679140131416771915929573454741755415612880788196172134695027201422226050343</span></span><br><span class="line">q= <span class="number">12772373441651008681294250861077909144300908972709561019514945881228862913558543752401850710742410181542277593157992764354184262443612041344749961361188667</span></span><br><span class="line">r= <span class="number">12128188838358065666687296689425460086282352520167544115899775800918383085863282204525519245937988837403739683061218279585168168892037039644924073220678419</span></span><br><span class="line">dP= <span class="number">116715737414908163105708802733763596338775040866822719131764691930369001776551671725363881836568414327815420649861207859100479999650414099346914809923964116101517432576562641857767638396325944526867458624878906968552835814078216316470330511385701105459053294771612727181278955929391807414985165924450505855941</span></span><br><span class="line">dQ= <span class="number">44209639124029393930247375993629669338749966042856653556428540234515804939791650065905841618344611216577807325504984178760405516121845853248373571704473449826683120387747977520655432396578361308033763778324817416507993263234206797363191089863381905902638111246229641698709383653501799974217118168526572365797</span></span><br><span class="line">dR= <span class="number">60735172709413093730902464873458655487237612458970735840670987186877666190533417038325630420791294593669609785154204677845781980482700493870590706892523016041087206844082222225206703139282240453277802870868459288354322845410191061009582969848870045522383447751431300627611762289800656277924903605593069856921</span></span><br><span class="line">c= <span class="number">93063188325241977486352111369210103514669725591157371105152980481620575818945846725056329712195176948376321676112726029400835578531311113991944495646259750817465291340479809938094295621728828133981781064352306623727112813796314947081857025012662546178066873083689559924412320123824601550896063037191589471066773464829226873338699012924080583389032903142107586722373131642720522453842444615499672193051587154108368643495983197891525747653618742702589711752256009</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#合并两个模不互素的同余方程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">x1, x2</span>):</span><br><span class="line">    a1, m1 = x1</span><br><span class="line">    a2, m2 = x2</span><br><span class="line">    d = gmpy2.gcd(m1, m2) <span class="comment">#寻找最大公约数d</span></span><br><span class="line">    <span class="keyword">assert</span> (a2 - a1) % d == <span class="number">0</span> <span class="comment">#确保是有解的情况，即d|(a2-a1),即能够合并两方程</span></span><br><span class="line"></span><br><span class="line">    p1= m1 // d</span><br><span class="line">    p2= m2 // d</span><br><span class="line">    _,l1,l2 = gmpy2.gcdext(p1,p2)</span><br><span class="line">    k1 = -l1*((a1 - a2) // d) </span><br><span class="line">    lcm = gmpy2.lcm(m1,m2) <span class="comment">#寻找最小公倍数lcm</span></span><br><span class="line">    x0 = <span class="built_in">pow</span>(a1 + k1 * m1,<span class="number">1</span>,lcm ) <span class="comment">#满足情况的特解</span></span><br><span class="line">    <span class="keyword">return</span> x0,lcm</span><br><span class="line"></span><br><span class="line"><span class="comment">#构建同余方程</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">excrt</span>(<span class="params">ai,mi</span>):</span><br><span class="line">    tmp = <span class="built_in">zip</span>(ai,mi)</span><br><span class="line">    <span class="keyword">return</span> reduce(merge, tmp)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mi = [(q - <span class="number">1</span>) * (r - <span class="number">1</span>),(p - <span class="number">1</span>) * (r - <span class="number">1</span>),(p - <span class="number">1</span>) * (q - <span class="number">1</span>)]</span><br><span class="line">ai = [dP,dQ,dR]</span><br><span class="line">d,lcm = excrt(ai,mi)</span><br><span class="line">n = p * q * r</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Fi1nd-th3-x—WP：&quot;&gt;&lt;a href=&quot;#Fi1nd-th3-x—WP：&quot; class=&quot;headerlink&quot; title=&quot;Fi1nd_th3_x—WP：&quot;&gt;&lt;/a&gt;Fi1nd_th3_x—WP：&lt;/h1&gt;&lt;p&gt;  不难发现，dP、dQ、dR这三个</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>MCU-Vehicle-Project</title>
    <link href="http://example.com/2023/11/23/Vehicle-Project/"/>
    <id>http://example.com/2023/11/23/Vehicle-Project/</id>
    <published>2023-11-23T15:32:52.000Z</published>
    <updated>2024-01-04T11:03:44.224Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Vehicle-Project"><a href="#Vehicle-Project" class="headerlink" title="Vehicle Project"></a>Vehicle Project</h1><p>Author: jrl777</p><p>  基于STM32F103C8T6的两轮自平衡小车的学习过程记录，与诸君分享。内容参考平衡车开发指南。</p><h1 id="1-原理分析"><a href="#1-原理分析" class="headerlink" title="1.原理分析"></a>1.原理分析</h1><h2 id="1-1-平衡原理"><a href="#1-1-平衡原理" class="headerlink" title="1.1 平衡原理"></a>1.1 平衡原理</h2><p>  控制平衡小车的基本原理是控制中的<strong>负反馈机制</strong>。</p><p>  由于小车只有两个轮子着地，车体只会在轮子滚动的方向上发生倾斜。控制轮子转动，抵消在一个维度上倾斜的趋势便可以保持车体平衡了。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231217154208876.png" class="" title="image-20231217154208876"><p>接下来需要解决的问题就转化成如何控制小车车轮的运动，以此控制小车的平衡了。需要建立两轮自平衡小车的<strong>运动学</strong>和<strong>动力学</strong>数学模型，设计反馈控制来保证车体的平衡。</p><h2 id="1-2-动力学分析"><a href="#1-2-动力学分析" class="headerlink" title="1.2 动力学分析"></a>1.2 动力学分析</h2><p>  保持车体平衡的控制规律可以简化为理想化的<strong>单摆</strong>物理模型。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231217165019714.png" class="" title="image-20231217165019714"><p>  对单摆模型进行受力分析。</p><p>  我们都知道，在单摆偏离平衡位置时会受到<strong>重力</strong>、和<strong>阻尼力</strong>的作用。而<strong>回复力</strong>是重力在切向上的分力（单摆在切向上作间简谐运动），属于作用力。</p><p>  当物体离开平衡位置后，会受到重力和绳子的合力的作用，使物体回到平衡位置。这个合力就称为：<strong>回复力</strong>。其大小为</p><p>​                                                                                <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="22.702ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 10034.1 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D439" d="M48 1Q31 1 31 11Q31 13 34 25Q38 41 42 43T65 46Q92 46 125 49Q139 52 144 61Q146 66 215 342T285 622Q285 629 281 629Q273 632 228 634H197Q191 640 191 642T193 659Q197 676 203 680H742Q749 676 749 669Q749 664 736 557T722 447Q720 440 702 440H690Q683 445 683 453Q683 454 686 477T689 530Q689 560 682 579T663 610T626 626T575 633T503 634H480Q398 633 393 631Q388 629 386 623Q385 622 352 492L320 363H375Q378 363 398 363T426 364T448 367T472 374T489 386Q502 398 511 419T524 457T529 475Q532 480 548 480H560Q567 475 567 470Q567 467 536 339T502 207Q500 200 482 200H470Q463 206 463 212Q463 215 468 234T473 274Q473 303 453 310T364 317H309L277 190Q245 66 245 60Q245 46 334 46H359Q365 40 365 39T363 19Q359 6 353 0H336Q295 2 185 2Q120 2 86 2T48 1Z"></path></g><g data-mml-node="mo" transform="translate(1026.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(2082.6,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2860.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(3738.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(4215.6,0)"><path data-c="1D460" d="M131 289Q131 321 147 354T203 415T300 442Q362 442 390 415T419 355Q419 323 402 308T364 292Q351 292 340 300T328 326Q328 342 337 354T354 372T367 378Q368 378 368 379Q368 382 361 388T336 399T297 405Q249 405 227 379T204 326Q204 301 223 291T278 274T330 259Q396 230 396 163Q396 135 385 107T352 51T289 7T195 -10Q118 -10 86 19T53 87Q53 126 74 143T118 160Q133 160 146 151T160 120Q160 94 142 76T111 58Q109 57 108 57T107 55Q108 52 115 47T146 34T201 27Q237 27 263 38T301 66T318 97T323 122Q323 150 302 164T254 181T195 196T148 231Q131 256 131 289Z"></path></g><g data-mml-node="mi" transform="translate(4684.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5029.6,0)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5629.6,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g><g data-mml-node="mo" transform="translate(6376.3,0)"><path data-c="2248" d="M55 319Q55 360 72 393T114 444T163 472T205 482Q207 482 213 482T223 483Q262 483 296 468T393 413L443 381Q502 346 553 346Q609 346 649 375T694 454Q694 465 698 474T708 483Q722 483 722 452Q722 386 675 338T555 289Q514 289 468 310T388 357T308 404T224 426Q164 426 125 393T83 318Q81 289 69 289Q55 289 55 319ZM55 85Q55 126 72 159T114 210T163 238T205 248Q207 248 213 248T223 249Q262 249 296 234T393 179L443 147Q502 112 553 112Q609 112 649 141T694 220Q694 249 708 249T722 217Q722 153 675 104T555 55Q514 55 468 76T388 123T308 170T224 192Q164 192 125 159T83 84Q80 55 69 55Q55 55 55 85Z"></path></g><g data-mml-node="mo" transform="translate(7432.1,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(8210.1,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(9088.1,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(9565.1,0)"><path data-c="1D703" d="M35 200Q35 302 74 415T180 610T319 704Q320 704 327 704T339 705Q393 701 423 656Q462 596 462 495Q462 380 417 261T302 66T168 -10H161Q125 -10 99 10T60 63T41 130T35 200ZM383 566Q383 668 330 668Q294 668 260 623T204 521T170 421T157 371Q206 370 254 370L351 371Q352 372 359 404T375 484T383 566ZM113 132Q113 26 166 26Q181 26 198 36T239 74T287 161T335 307L340 324H145Q145 321 136 286T120 208T113 132Z"></path></g></g></g></svg></mjx-container></p><p>  在偏移角度很小的情况下，回复力与偏移的角度之间大小成正比，方向相反。 在此回复力作用下，单摆便进行周期运动。在空气中运动的单摆，由于受到空气的阻尼力， 单摆最终会停止在垂直平衡位置。空气的阻尼力与单摆运动速度成正比，方向相反。阻尼力越大，单摆越会尽快在垂直位置稳定下来。</p><p>  在不同阻尼系数下，单摆的运动曲线也不同。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225001059945.png" class="" title="image-20231225001059945"><p>  我们都知道，对于单摆而言，稳定在垂直位置（平衡位置）的条件有两个：</p><ol><li>受到与位移（角度）相反的恢复力；</li><li>受到与运动速度（角速度）相反的阻尼力。</li></ol><p>  如果没有阻尼力，单摆会在垂直位置左右摆动。阻尼力会使得单摆最终停止在垂直位置。阻尼力过小（欠阻尼）会使得单摆在平衡位置附件来回震荡。阻尼力过大（过阻尼）会使得单摆到达平衡位置时间加长，比如气球单摆。因而存在一个临界阻尼系数，使得单摆稳定在平衡位置的时间最短。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225003040396.png" class="" title="image-20231225003040396"><p>  倒立摆之所以不能象单摆一样可以稳定在垂直位置，就是因为在它偏离平衡位置的时候，所受到的回复力与位移方向相同，而不是相反！因此，倒立摆便会加速偏离垂直位置，直到倒下。  所以我们需要给予倒立摆额外的力来使其稳定在批平衡位置。</p><h2 id="1-3-数学模型"><a href="#1-3-数学模型" class="headerlink" title="1.3 数学模型"></a>1.3 数学模型</h2><p> 下面对两轮自平衡小车进行简单数学建模，然后建立速度的比例微分负反馈控制，根据基本控制理论讨论小车通过闭环控制保持稳定的条件。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225003541488.png" class="" title="image-20231225003541488"><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225003606173.png" class="" title="image-20231225003606173"><p>  通过根轨迹示意图，可以很清晰的看出两轮自平衡小车的传递函数对应有两个零极点，有一个在 s 平面的右半平面。这说明两轮自平衡小车是不稳定的。</p><p>  小车引入比例、微分（PD）反馈之后的系统如下图所示：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225003644774.png" class="" title="image-20231225003644774"><h2 id="1-4-Simulink仿真"><a href="#1-4-Simulink仿真" class="headerlink" title="1.4 Simulink仿真"></a>1.4 Simulink仿真</h2><p>  通过对两轮自平衡小车系统进行动力学分析和数学建模，在理论上设计出了控制方法。下面，调用 Matlab 软件的 Simulink 仿真工具包对两轮自平衡小车的控制系统数学模型进行仿真验证，观察角度在干扰信号的作用下的自恢复情况。</p><p>  在 Simulink 文件中，建立两轮自平衡小车的数学模型，调用 PID 控制器构成控制系统的主要部分。设定输入信号值为 0，代表角度初始值为 0，小车初始在平衡位置。对输出节点，调用两个 Step 模块，通过设定 Step Time，使之构成宽度为 1s 的脉冲信号作为小车的外力干扰作用信号。整体系统构成负反馈形式，如下图所示。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225004034334.png" class="" title="image-20231225004034334"><h2 id="1-5-小车的速度控制原理与串级PID"><a href="#1-5-小车的速度控制原理与串级PID" class="headerlink" title="1.5 小车的速度控制原理与串级PID"></a>1.5 小车的速度控制原理与串级PID</h2><p><strong>PID原理</strong>：<a class="link" href="https://zhuanlan.zhihu.com/p/39573490">PID控制算法原理（抛弃公式，从本质上真正理解PID控制） - 知乎 (zhihu.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>  通常在三轮小车、四轮小车中，我们使用 PID 进行速度控制，大部分都是负反馈。但是两轮自平衡小车的速度控制不大一样，不是负反馈，而是正反馈，因为小车的两个电机需要进行直立控制的同时去进行速度控制。</p><p>  我们先使用常规的速度负反馈算法试一下，看在平衡小车上面是否有效果。首先我们给定一个目标速度值，由于在直立控制的作用下，此时小车要向前倾斜以获取加速度，车轮需要往后运动，这样小车的速度就会下降。因为是负反馈，速度下降之后，速度控制的偏差增大，小车往前倾斜的角度增大，如此反复，小车便会倒下。常规的速度负反馈在直立控制的影响下起到了正反馈效果。如下图所示。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225004240597.png" class="" title="image-20231225004240597"><p>  根据以上的分析，在直立控制里面加入速度负反馈无法达到速度闭环的目的，而且还会破坏直立控制系统。下面我们换一种思路。</p><p>  为保证直立控制的优先级，我们把速度控制放在直立控制的前面，也就是速度控制调节的结果仅仅是改变直立控制的目标值。因为根据经验可知，小车的运行速度和小车的倾角是相关的。比如要提高小车向前行驶的速度，就需要增加小车向前倾斜的角度，倾斜角度加大之后，车轮在直立控制的作用下需要向前运动保持小车平衡，速度增大；如果要降低小车向前行驶的速度，就需要减小小车向前的倾斜角度，倾斜角度减小之后，车轮在直立控制的作用下向后运动保持小车平衡，速度减小。如下图所示。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225004706970.png" class="" title="image-20231225004706970"><p>  根据上面的原理图，我们把速度和直立两个控制器串联起来工作，其中速度控制的输出作为直立控制的输入，而直立控制的输出作为系统的输出，这其实就是一个串级控制系统。直立控制在前面有介绍，使用的 PD 控制。因为编码器可能存在的噪声，为防止噪声被放大并消除系统的静差，这里我们速度控制使用 PI 控制。<img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225005115476.png" class="" title="image-20231225005115476"></p><p>  至此，我们得到了让小车保持直立且速度为给定值的控制算法，由一个负反馈的直立 PD 控制器和一个正反馈的速度 PI 控制器组成。控制原理图进行的演变，如下图所示。<img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225005153894.png" class="" title="image-20231225005153894"></p><h1 id="2-电路开发"><a href="#2-电路开发" class="headerlink" title="2. 电路开发"></a>2. 电路开发</h1><h2 id="2-1-系统框架一览"><a href="#2-1-系统框架一览" class="headerlink" title="2.1 系统框架一览"></a>2.1 系统框架一览</h2><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231225005541920.png" class="" title="image-20231225005541920"><p>  由上面系统框架图可以看到，整个系统围绕 STM32F103C8T6 主芯片运行，电池经过降压稳压后提供稳定的 5v 和 3.3v 给 STM32 主芯片和各电子模块，STM32 主芯片通过读取 MPU-6050 传感器芯片的数据，获取小车系统的运动状态，再通过 TB6612FNG 驱动芯片控制直流电机的运动，直流电机通过编码器反馈转速给 STM32 主芯片，这就构成了两轮自平衡小车的基本硬件框架。其他的辅助功能，比如蓝牙、OLED、超声波、红外等等都是可加可不加的功能，我们为了提高两轮自平衡小车的可玩性和操纵性，一并加进去。</p><h1 id="3-程序框架"><a href="#3-程序框架" class="headerlink" title="3.程序框架"></a>3.程序框架</h1><p>  打开自平衡小车的工程文件，展开的工程分组如下图所示：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20240103235126547.png" class="" title="image-20240103235126547"><p>如图所示，该工程共有6个具体的分组。</p><ol><li>FWlib分组：主要是HAL库的文件代码</li><li>CMSIS分组：主要是Cortex-M3 核心的文件代码</li><li>Startup 分组：stm32f10x 的启动文件代码</li><li>BSP 分组：外设硬件的驱动程序代码，例如MPU6050、oled 等等</li><li>SYS 分组：主要是滴答定时器和调试相关的配置代码</li><li>USER 分组：用户代码，主程序</li></ol><p><strong>讲解一下 USER 分组的 main.c。main.c 包含了所有硬件初始化和参数初始化代码。初始化代码如下：</strong></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{        </span><br><span class="line">    BspInit();       <span class="comment">//初始化BSP</span></span><br><span class="line">    PIDInit();       <span class="comment">//初始化PID    </span></span><br><span class="line">    CarUpstandInit();<span class="comment">//初始化系统参数</span></span><br><span class="line">    SysTick_Init();  <span class="comment">//初始化定时器        </span></span><br><span class="line">    <span class="keyword">if</span>(IsInfrareOK())<span class="comment">//检测是否悬挂红外模块</span></span><br><span class="line">        g_iGravity_Offset = <span class="number">1</span>; <span class="comment">//如果检测到悬挂红外模块，则更改偏移值。</span></span><br><span class="line">    ShowHomePageInit();<span class="comment">//初始化OLED显示屏主页</span></span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)<span class="comment">//进入主循环</span></span><br><span class="line">    {    </span><br><span class="line">        SecTask();<span class="comment">//秒级任务，主要是记录小车运行时间、读取电池电压等非实时任务</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(SoftTimer[<span class="number">1</span>] == <span class="number">0</span>)<span class="comment">//系统软件定时器1，分辨率为1ms，递减计数</span></span><br><span class="line">        {<span class="comment">// 每隔20ms 执行一次</span></span><br><span class="line">            SoftTimer[<span class="number">1</span>] = <span class="number">20</span>;</span><br><span class="line">            ResponseIMU();<span class="comment">//上报姿态数据到APP        </span></span><br><span class="line">            DebugService();    <span class="comment">//上位机调试数据发送        </span></span><br><span class="line">            Parse(Uart3Buffer);    <span class="comment">//APP数据解析函数    </span></span><br><span class="line">        }            </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(SoftTimer[<span class="number">2</span>] == <span class="number">0</span>)<span class="comment">//系统软件定时器2，分辨率为1ms，递减计数</span></span><br><span class="line">        {<span class="comment">// 每隔20ms 执行一次</span></span><br><span class="line">            SoftTimer[<span class="number">2</span>] = <span class="number">20</span>;</span><br><span class="line">            ShowHomePage();<span class="comment">//刷新OLED页面</span></span><br><span class="line">            Read_Distane();<span class="comment">//读取超声波测距距离</span></span><br><span class="line">            <span class="keyword">if</span>(g_CarRunningMode == ULTRA_FOLLOW_MODE){</span><br><span class="line">                <span class="keyword">if</span>(IsUltraOK())UltraControl(<span class="number">0</span>);    <span class="comment">//设置超声波跟随模式</span></span><br><span class="line">             }</span><br><span class="line">            <span class="keyword">if</span>(g_CarRunningMode == ULTRA_AVOID_MODE){</span><br><span class="line">                <span class="keyword">if</span>(IsUltraOK())UltraControl(<span class="number">1</span>);    <span class="comment">//设置超声波避障模式</span></span><br><span class="line">             }</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(g_CarRunningMode == INFRARED_TRACE_MODE){</span><br><span class="line">                TailingControl();<span class="comment">//设置红外循迹模式</span></span><br><span class="line">            }</span><br><span class="line">        }            </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>  代码初始化主要是硬件底驱动和系统参数的初始化。</p><h2 id="3-1-BspInit-函数"><a href="#3-1-BspInit-函数" class="headerlink" title="3.1 BspInit()函数"></a>3.1 BspInit()函数</h2><p>  <strong>BspInit</strong> 主要是硬件底层驱动的初始化，包括 STM32 外设的初始化、外围模块比如 MPU-6050 的初始化。具体见下面代码：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">BspInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    SWDConfig();            <span class="comment">//SWD 调试接口配置，使能 SWD，失能 JTAG</span></span><br><span class="line">    ADCInit();                <span class="comment">//ADC 初始化</span></span><br><span class="line">    USART1Init();            <span class="comment">//串口 1 初始化-底板预留下载及调试用</span></span><br><span class="line">    USART3Init(<span class="number">0</span>);            <span class="comment">//串口 3 初始化-用于蓝牙</span></span><br><span class="line">    TIM1_Cap_Init();        <span class="comment">//TIM1初始化-用于超声波跟随功能</span></span><br><span class="line">    TIM3_PWM_Init();         <span class="comment">//PWM初始化</span></span><br><span class="line">    TIM2_Encoder_Init();    <span class="comment">//TIM2 正交解码初始化-用于测速</span></span><br><span class="line">    TIM4_Encoder_Init();    <span class="comment">//TIM4 正交解码初始化-用于测速    </span></span><br><span class="line">    i2cInit();                 <span class="comment">//I2C 初始化    </span></span><br><span class="line">    InfraredIOInit();        <span class="comment">//红外 IO 口初始化</span></span><br><span class="line">    OLED_Init();            <span class="comment">//OLED 初始化</span></span><br><span class="line">    MPU6050_Init();            <span class="comment">//MPU6050 初始化    </span></span><br><span class="line">    LEDInit();                <span class="comment">//指示灯初始化    </span></span><br><span class="line">    UltraSelfCheck();        <span class="comment">//超声模块开机自检</span></span><br><span class="line">    InfrareSelfCheck();        <span class="comment">//红外模块开机自检    </span></span><br><span class="line">    delay_ms(<span class="number">500</span>);            <span class="comment">//延时 0.5s，等待蓝牙模块启动</span></span><br><span class="line">    Uart3SendStr(<span class="string">"\r\nAT+BAUD8\r\n"</span>); <span class="comment">//配置蓝牙串口波特率为 115200 ( 原波特率9600 ) </span></span><br><span class="line">    USART3Init(<span class="number">1</span>);            <span class="comment">//更改 UART3 波特率为 115200</span></span><br><span class="line">    delay_ms(<span class="number">20</span>);           <span class="comment">//延时 20ms,等待波特率稳定</span></span><br><span class="line">    SetBlueToothName();        <span class="comment">//配置蓝牙模块名称</span></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="3-2-PIDInit-函数"><a href="#3-2-PIDInit-函数" class="headerlink" title="3.2 PIDInit 函数"></a>3.2 PIDInit 函数</h2><p>PIDInit 函数主要是对小车系统的PID算法的参数进行初始化。</p><p>  PID 是 Proportional（比例）、Integral（积分）、Differential（微分）的首字母缩写；是一种结合比例、积分和微分三种环节于一体的闭环控制算法。PID 控制的实质是对目标值和实际值误差进行比例、积分、微分运算后的结果用来作用在输出上。</p><p>  自平衡小车的PID算法思路上文已经讲过，整理就不再赘述了。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">PIDInit</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">char</span> flag[<span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">ReadFlash(original_PID_Addr, flag, <span class="number">2</span>);</span><br><span class="line"><span class="keyword">if</span>((flag[<span class="number">0</span>] == <span class="number">0xa5</span>)&amp;&amp;(flag[<span class="number">1</span>] == <span class="number">0x5a</span>))</span><br><span class="line">{<span class="comment">// 非初次运行</span></span><br><span class="line">PIDRead();</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{<span class="comment">// 初次运行</span></span><br><span class="line">flag[<span class="number">0</span>] = <span class="number">0xa5</span>;</span><br><span class="line">flag[<span class="number">1</span>] = <span class="number">0x5a</span>;</span><br><span class="line">ProgramFlash(original_PID_Addr, flag, <span class="number">2</span>);</span><br><span class="line">ProgramFlash(original_PID_Addr+<span class="number">2</span>, (<span class="type">char</span>*)&amp;g_tCarAnglePID, <span class="keyword">sizeof</span>(PID_t));<span class="comment">// ±£´æ½Ç¶È»·Ä¬ÈÏpid²ÎÊý</span></span><br><span class="line">ProgramFlash(original_PID_Addr+<span class="number">2</span>+<span class="number">16</span>, (<span class="type">char</span>*)&amp;g_tCarSpeedPID, <span class="keyword">sizeof</span>(PID_t));<span class="comment">// ±£´æËÙ¶È»·Ä¬ÈÏPID²ÎÊý</span></span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="3-3-CarUpstandInit函数"><a href="#3-3-CarUpstandInit函数" class="headerlink" title="3.3 CarUpstandInit函数"></a>3.3 CarUpstandInit函数</h2><p>  CarUpstandInit 函数的主要功能是对小车系统的各种参数进行初始化。</p><p>  即全局变量初始化函数。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">CarUpstandInit</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">//g_iAccelInputVoltage_X_Axis = g_iGyroInputVoltage_Y_Axis = 0;</span></span><br><span class="line">g_s16LeftMotorPulse = g_s16RightMotorPulse = <span class="number">0</span>;</span><br><span class="line">g_s32LeftMotorPulseOld = g_s32RightMotorPulseOld = <span class="number">0</span>;</span><br><span class="line">g_s32LeftMotorPulseSigma = g_s32RightMotorPulseSigma = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">g_fCarSpeed = g_fCarSpeedOld = <span class="number">0</span>;</span><br><span class="line">g_fCarPosition = <span class="number">0</span>;</span><br><span class="line">g_fCarAngle    = <span class="number">0</span>;</span><br><span class="line">g_fGyroAngleSpeed = <span class="number">0</span>;</span><br><span class="line">g_fGravityAngle   = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">g_fAngleControlOut = g_fSpeedControlOut = g_fBluetoothDirectionOut = <span class="number">0</span>;</span><br><span class="line">g_fLeftMotorOut    = g_fRightMotorOut   = <span class="number">0</span>;</span><br><span class="line">g_fBluetoothSpeed  = g_fBluetoothDirection = <span class="number">0</span>;</span><br><span class="line">g_fBluetoothDirectionNew = g_fBluetoothDirectionOld = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  g_u8MainEventCount=<span class="number">0</span>;</span><br><span class="line">g_u8SpeedControlCount=<span class="number">0</span>;</span><br><span class="line"> g_u8SpeedControlPeriod=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="3-4-SysTick-Init函数"><a href="#3-4-SysTick-Init函数" class="headerlink" title="3.4 SysTick_Init函数"></a>3.4 SysTick_Init函数</h2><p>  SysTick_Init 是系统滴答定时器 SysTick 的初始化，在这里设置为 1ms 中断一次。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="comment">/* SystemFrequency / 100     10ms中断一次</span></span><br><span class="line"><span class="comment">   SystemFrequency / 1000    1ms中断一次</span></span><br><span class="line"><span class="comment"> * SystemFrequency / 100000 10us中断一次</span></span><br><span class="line"><span class="comment"> * SystemFrequency / 1000000 1us中断一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">SystemCoreClockUpdate();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SysTick_Config(SystemCoreClock / <span class="number">1000</span>))<span class="comment">// ST3.5.0库版本</span></span><br><span class="line">{ </span><br><span class="line"><span class="comment">/* Capture error */</span> </span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// 开启滴答定时器 </span></span><br><span class="line">SysTick-&gt;CTRL |=  SysTick_CTRL_ENABLE_Msk;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="3-5-其他函数"><a href="#3-5-其他函数" class="headerlink" title="3.5 其他函数"></a>3.5 其他函数</h2><p>  if(IsInfrareOK()) g_iGravity_Offset = 1; 检测是否悬挂红外循迹模块，如果有则需要修改重心偏移值。因为在一侧悬挂红外后，小车重心会偏移。</p><p>  ShowHomePageInit 主要是在 OLED 显示 logo。</p><p>  while(1) 主循环中主要是执行一些非实时任务（早些迟些执行都无所谓的任务），人为定义一个秒级任务，轮询执行这些任务。这些非实时任务有上报数据、调试数据、解析协议、刷新 OLED 数据、读取距离等。</p><p>  执行完初始化，代码会由于滴答定时器 SysTick 进入中断而转跳到 SysTick 定时中断服务函数中执行。在 stm32f10x_it.c 中可以找到 SysTick_Handler 定时中断服务函数。代码具体内容如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">SysTick_Handler</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{  </span><br><span class="line">    SoftTimerCountDown();             <span class="comment">//软定时器</span></span><br><span class="line">    g_u8MainEventCount++;            <span class="comment">//主事件计数变量</span></span><br><span class="line">    g_u8SpeedControlPeriod++;        <span class="comment">//速度环控制周期计数变量</span></span><br><span class="line">    SpeedControlOutput();            <span class="comment">//速度环控制输出函数，每1ms执行一次</span></span><br><span class="line">    <span class="keyword">if</span>(g_u8MainEventCount&gt;=<span class="number">5</span>)        <span class="comment">//5ms进入一次</span></span><br><span class="line">    {</span><br><span class="line">        g_u8MainEventCount=<span class="number">0</span>;</span><br><span class="line">        GetMotorPulse();             <span class="comment">//捕获电机脉冲（速度）函数，每5ms执行一次</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g_u8MainEventCount==<span class="number">1</span>)</span><br><span class="line">    {</span><br><span class="line">        MPU6050_Pose();                 <span class="comment">//读取MPU6050数据函数，每5ms执行一次</span></span><br><span class="line">        AngleCalculate();             <span class="comment">//角度环计算函数，每5ms执行一次</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g_u8MainEventCount==<span class="number">2</span>)</span><br><span class="line">    {</span><br><span class="line">        AngleControl();                 <span class="comment">//角度环控制函数，每5ms执行一次</span></span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g_u8MainEventCount==<span class="number">3</span>)</span><br><span class="line">    {</span><br><span class="line">        g_u8SpeedControlCount++;</span><br><span class="line">        <span class="keyword">if</span>(g_u8SpeedControlCount &gt;= <span class="number">5</span>)<span class="comment">//25ms</span></span><br><span class="line">        {        </span><br><span class="line">              SpeedControl();          <span class="comment">//车模速度控制函数，每25ms调用一次</span></span><br><span class="line">              g_u8SpeedControlCount=<span class="number">0</span>;</span><br><span class="line">                g_u8SpeedControlPeriod=<span class="number">0</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(g_u8MainEventCount==<span class="number">4</span>)</span><br><span class="line">    {</span><br><span class="line">        MotorManage();            <span class="comment">//电机使能/失能控制函数，每5ms执行一次</span></span><br><span class="line">        MotorOutput();             <span class="comment">//电机输出函数，每5ms执行一次</span></span><br><span class="line">    }</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h1 id="4-软件开发"><a href="#4-软件开发" class="headerlink" title="4. 软件开发"></a>4. 软件开发</h1><p>  我负责的是两轮自平衡小车的软件部分（下位机）的编写与验证。</p><p>  <strong>主要编程软件：</strong></p><p>MDK-ARM；STM32CubeMx；stlink烧入</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20240103235306412.png" class="" title="image-20240103235306412"><h2 id="4-1-STM32CubeMx生成工程"><a href="#4-1-STM32CubeMx生成工程" class="headerlink" title="4.1 STM32CubeMx生成工程"></a>4.1 STM32CubeMx生成工程</h2><p>  首先，先选择对应的主控芯片的型号：stm32f103c8tc</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231229163953002.png" class="" title="image-20231229163953002"><p>  接着，配置好工程的基本设置</p><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20231229164303421.png" class="" title="image-20231229164303421"> <h2 id="4-2Usart与Printf函数重定向"><a href="#4-2Usart与Printf函数重定向" class="headerlink" title="4.2Usart与Printf函数重定向"></a>4.2Usart与Printf函数重定向</h2><img lazyload="" src="/images/loading.svg" data-src="/2023/11/23/Vehicle-Project/image-20240102175836402.png" class="" title="image-20240102175836402"><p>MiaowLabs-STM32F1-Tiny 核心板板载 CH340 USB to TTL 芯片，该芯片连接 STM32F103C8T6 芯片的 Usart1 引脚 PA9/PA10。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Vehicle-Project&quot;&gt;&lt;a href=&quot;#Vehicle-Project&quot; class=&quot;headerlink&quot; title=&quot;Vehicle Project&quot;&gt;&lt;/a&gt;Vehicle Project&lt;/h1&gt;&lt;p&gt;Author: jrl777&lt;/p&gt;</summary>
      
    
    
    
    <category term="MCU" scheme="http://example.com/categories/MCU/"/>
    
    
    <category term="MCU" scheme="http://example.com/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>MCU-Study-Stm32</title>
    <link href="http://example.com/2023/10/06/MCU-Study-Stm32/"/>
    <id>http://example.com/2023/10/06/MCU-Study-Stm32/</id>
    <published>2023-10-06T08:17:42.000Z</published>
    <updated>2023-11-19T04:54:02.016Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Part1-初识Stm32"><a href="#Part1-初识Stm32" class="headerlink" title="Part1. 初识Stm32"></a>Part1. 初识Stm32</h1><h2 id="一、Preparation"><a href="#一、Preparation" class="headerlink" title="一、Preparation"></a>一、Preparation</h2><h3 id="1-编写软件的准备"><a href="#1-编写软件的准备" class="headerlink" title="1.编写软件的准备"></a>1.编写软件的准备</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022003519013.png" class="" title="image-20231022003519013"><p>  Keil5的arm版本，这个放在之前安装过的C51版本的根目录下即可。</p><p>  拿取CID激活LIC的步骤就不过多赘述了。</p><p>  之后还是需要安装STLink的USBdriver，识别成功即安装成功。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022003702727.png" class="" title="image-20231022003702727"><h2 id="二、About-Stm32"><a href="#二、About-Stm32" class="headerlink" title="二、About Stm32"></a>二、About Stm32</h2><h3 id="1-Introduction"><a href="#1-Introduction" class="headerlink" title="1.Introduction"></a>1.Introduction</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021231238977.png" class="" title="image-20231021231238977"><p>STM32相较于C51单片机，功能更加全面</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021231823090.png" class="" title="image-20231021231823090"><h3 id="2-STM32f103c8tc"><a href="#2-STM32f103c8tc" class="headerlink" title="2. STM32f103c8tc"></a>2. STM32f103c8tc</h3><h4 id="1-基本参数"><a href="#1-基本参数" class="headerlink" title="(1)基本参数"></a>(1)基本参数</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021231931442.png" class="" title="image-20231021231931442"><h4 id="2-外设"><a href="#2-外设" class="headerlink" title="(2)外设"></a>(2)外设</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021232450735.png" class="" title="image-20231021232450735"><h4 id="3-命名规则"><a href="#3-命名规则" class="headerlink" title="(3)命名规则"></a>(3)命名规则</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021232933401.png" class="" title="image-20231021232933401"><h4 id="4-系统结构"><a href="#4-系统结构" class="headerlink" title="(4)系统结构"></a>(4)系统结构</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021233116976.png" class="" title="image-20231021233116976"><h4 id="5-引脚定义"><a href="#5-引脚定义" class="headerlink" title="(5)引脚定义"></a>(5)引脚定义</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021233331414.png" class="" title="image-20231021233331414"><h4 id="6-启动配置和最小系统电路"><a href="#6-启动配置和最小系统电路" class="headerlink" title="(6)启动配置和最小系统电路"></a>(6)启动配置和最小系统电路</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021233728232.png" class="" title="image-20231021233728232"><p>  一般来说，在需要<strong>串口下载程序</strong>的时候才会设置为<strong>“系统存储器”</strong>启动模式。</p><p>  BOOT引脚的值是在上电复位后的一瞬间有效的。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231021234201827.png" class="" title="image-20231021234201827"><h1 id="Part2-编写STM32"><a href="#Part2-编写STM32" class="headerlink" title="Part2. 编写STM32"></a>Part2. 编写STM32</h1><p>编写STM32主要有以下几种方式：</p><ol><li>基于寄存器的方式（由于STM32机构复杂，寄存器多而繁杂，不推荐）</li><li>基于封装函数（库函数）的方式（调用方便，一般来说使用这种方法间接配置寄存器）</li><li>HAL库基于图形化界面快速配置STM32（快速方便，但需理解底层逻辑）</li></ol><h2 id="一、GPIOC口"><a href="#一、GPIOC口" class="headerlink" title="一、GPIOC口"></a>一、GPIOC口</h2><h3 id="1-硬件与软件的调试准备"><a href="#1-硬件与软件的调试准备" class="headerlink" title="1.硬件与软件的调试准备"></a>1.硬件与软件的调试准备</h3><p>首先需按图所示连接号STLINK与STM32</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022170535422.png" class="" title="image-20231022170535422"><p>在Keil5中，将调试器改为使用的ST-Link</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022170909786.png" class="" title="image-20231022170909786"><p>然后在Flash中勾选上，使程序在下载后立马复位执行</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022171112778.png" class="" title="image-20231022171112778"><h3 id="2-直接配置寄存器"><a href="#2-直接配置寄存器" class="headerlink" title="2.直接配置寄存器"></a>2.直接配置寄存器</h3><p>看出这样操作麻烦，工作量大，远没有封装的库函数来的简洁与方便。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">RCC-&gt;APB2ENR = <span class="number">0x00000010</span>; <span class="comment">//´ò¿ªGPIOC¼Ä´æÆ÷</span></span><br><span class="line">GPIOC-&gt;CRH = <span class="number">0x00300000</span>;</span><br><span class="line">GPIOC-&gt;ODR = <span class="number">0x00002000</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="3-通过调用库函数来调试GPIOC口"><a href="#3-通过调用库函数来调试GPIOC口" class="headerlink" title="3.通过调用库函数来调试GPIOC口"></a>3.通过调用库函数来调试GPIOC口</h3><p><strong>注意：</strong></p><p>  这里有一个条件编译，即若要使”stm32f10x_conf.h”生效，必须定义 USE_STDPERIPH_DRIVER</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022193824312.png" class="" title="image-20231022193824312"><p>在Define中输入，并添加好路径</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022194236221.png" class="" title="image-20231022194236221"><p>配置完之后编译检验是否配置成功。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022194505294.png" class="" title="image-20231022194505294"><h4 id="1-新建工程"><a href="#1-新建工程" class="headerlink" title="(1)新建工程"></a>(1)新建工程</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022224843330.png" class="" title="image-20231022224843330"><h4 id="2-工程架构"><a href="#2-工程架构" class="headerlink" title="(2)工程架构"></a>(2)工程架构</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231022225105736.png" class="" title="image-20231022225105736"><ul><li><p>**startup: **</p><p>  即启动文件，在Keil5中这是用汇编写的，内含中断向量表和中断服务函数等。中断服务函数里的复位函数是所有程序的入口，当STM32上电复位或者按下复位按键后就进入复位中断函数执行。它将调用SystemInit函数和main函数，然后结束。</p><p>（<strong>实际上单片机不会停止工作，因为main函数一般以while(1)死循环结尾</strong>）</p></li></ul><table><thead><tr><th>代码块如下</th></tr></thead></table><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"stm32f10x.h"</span>                  <span class="comment">// Device header</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOC,ENABLE);</span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure; <span class="comment">//结构体变量</span></span><br><span class="line">GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_Out_PP;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line"></span><br><span class="line">GPIO_Init(GPIOC,&amp;GPIO_InitStructure); <span class="comment">//取地址返回</span></span><br><span class="line">GPIO_SetBits(GPIOC,GPIO_Pin_13); <span class="comment">//将13号口置为高电平</span></span><br><span class="line">GPIO_ResetBits(GPIOC,GPIO_Pin_13); <span class="comment">//设置为低电平</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">GPIO_SetBits(GPIOC,GPIO_Pin_13);</span><br><span class="line">GPIO_ResetBits(GPIOC,GPIO_Pin_13);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="二、GPIO输出"><a href="#二、GPIO输出" class="headerlink" title="二、GPIO输出"></a>二、GPIO输出</h2><h3 id="1-GPIO相关知识"><a href="#1-GPIO相关知识" class="headerlink" title="1.GPIO相关知识"></a>1.GPIO相关知识</h3><h4 id="1-GPIO简介"><a href="#1-GPIO简介" class="headerlink" title="(1)GPIO简介"></a>(1)GPIO简介</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231027165228992.png" class="" title="image-20231027165228992"><p>只有部分引脚可以忍受5V的电压，即<strong>FT(Five Tolerate)</strong></p><h4 id="2-GPIO基本结构"><a href="#2-GPIO基本结构" class="headerlink" title="(2)GPIO基本结构"></a>(2)GPIO基本结构</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231027165923953.png" class="" title="image-20231027165923953"><p><strong>APB2：</strong>外接总线，在stm32中所有的GPIO都挂载在APB2上</p><p><strong>GPIO类别：</strong>GPIO(A–B–C)等等，每个GPIO口都有16个引脚</p><p><strong>32位寄存器：</strong> </p><p>  仅低16位起作用，因为只有16个端口</p><ul><li>输出寄存器写1，则输出引脚输出高电平；0—-低电平</li><li>输入寄存器读取1，则输入引脚为高电平；0—-低电平</li></ul><p><strong>驱动器：</strong></p><p>增加信号驱动能力</p><h4 id="3-GPIO位结构"><a href="#3-GPIO位结构" class="headerlink" title="(3)GPIO位结构"></a>(3)GPIO位结构</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231027170819213.png" class="" title="image-20231027170819213"><h4 id="4-GPIO模式"><a href="#4-GPIO模式" class="headerlink" title="(4)GPIO模式"></a>(4)GPIO模式</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231101214128903.png" class="" title="image-20231101214128903"><p>  由于浮空输入的电平是不确定的，所以在使用浮空输入时，<strong>端口一定要接上一个连续的驱动源</strong>，不能出现悬空的状态。</p><h5 id="a-浮空-上拉-下拉输入"><a href="#a-浮空-上拉-下拉输入" class="headerlink" title="a. 浮空/上拉/下拉输入"></a>a. 浮空/上拉/下拉输入</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231101215307646.png" class="" title="image-20231101215307646"><p>  VDD：上拉    </p><p>  VSS：下拉</p><p>输入通过施密特触发器进行波形整形后，连接到输入数据寄存器</p><h5 id="b-模拟输入（ADC专属）"><a href="#b-模拟输入（ADC专属）" class="headerlink" title="b.  模拟输入（ADC专属）"></a>b.  模拟输入（ADC专属）</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231101215634641.png" class="" title="image-20231101215634641"><p>  注意到，此时仅有<strong>I/O引脚和进入片上外设</strong>的一条线在起作用</p><p>  仅在模拟输入模式会关闭数字的输入功能</p><h5 id="c-开漏-推挽输出"><a href="#c-开漏-推挽输出" class="headerlink" title="c. 开漏/推挽输出"></a>c. 开漏/推挽输出</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231101220029038.png" class="" title="image-20231101220029038"><h5 id="d-复用开漏-推挽输出"><a href="#d-复用开漏-推挽输出" class="headerlink" title="d. 复用开漏/推挽输出"></a>d. 复用开漏/推挽输出</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231101220137314.png" class="" title="image-20231101220137314"><h2 id="三、OLED调试工具和OLED显示屏"><a href="#三、OLED调试工具和OLED显示屏" class="headerlink" title="三、OLED调试工具和OLED显示屏"></a>三、OLED调试工具和OLED显示屏</h2><h3 id="1-OLED调试工具"><a href="#1-OLED调试工具" class="headerlink" title="1. OLED调试工具"></a>1. OLED调试工具</h3><h4 id="1-OLED简介"><a href="#1-OLED简介" class="headerlink" title="(1)OLED简介"></a>(1)OLED简介</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231104235453381.png" class="" title="image-20231104235453381"><h4 id="2-调试方式"><a href="#2-调试方式" class="headerlink" title="(2)调试方式"></a>(2)调试方式</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231104235619066.png" class="" title="image-20231104235619066"><ul><li><strong>串口调试：</strong> 把电脑的屏幕挂在单片机上。通过电脑端调试，功能强大，可以显示图像，曲线，图像，自己做的软件。不利于人机交互，不能不断刷新数据。</li><li><strong>显示屏调试：</strong>对于不断变化的数据可以不断刷新显示</li></ul><h4 id="3-硬件电路"><a href="#3-硬件电路" class="headerlink" title="(3)硬件电路"></a>(3)硬件电路</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105000201595.png" class="" title="image-20231105000201595"><p>​SCL和SDA需要接在单片机的<strong>I2C通信引脚</strong>上</p><h4 id="4-OLED驱动函数"><a href="#4-OLED驱动函数" class="headerlink" title="(4)OLED驱动函数"></a>(4)OLED驱动函数</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105000405985.png" class="" title="image-20231105000405985"><h3 id="2-OLED显示屏"><a href="#2-OLED显示屏" class="headerlink" title="2.OLED显示屏"></a>2.OLED显示屏</h3><h4 id="1-引脚配置"><a href="#1-引脚配置" class="headerlink" title="1.引脚配置"></a>1.引脚配置</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*引脚配置*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_W_SCL(x)GPIO_WriteBit(GPIOB, GPIO_Pin_8, (BitAction)(x))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> OLED_W_SDA(x)GPIO_WriteBit(GPIOB, GPIO_Pin_9, (BitAction)(x))</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>SCL和SDA配置为开漏输出模式</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*引脚初始化*/</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">OLED_I2C_Init</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">{</span><br><span class="line">    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE);</span><br><span class="line"></span><br><span class="line">GPIO_InitTypeDef GPIO_InitStructure;</span><br><span class="line"> GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_OD;</span><br><span class="line">GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8;</span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line">GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;</span><br><span class="line"> GPIO_Init(GPIOB, &amp;GPIO_InitStructure);</span><br><span class="line"></span><br><span class="line">OLED_W_SCL(<span class="number">1</span>);</span><br><span class="line">OLED_W_SDA(<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h4 id="2-调试模式"><a href="#2-调试模式" class="headerlink" title="2.调试模式"></a>2.调试模式</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105002708324.png" class="" title="image-20231105002708324"><p>点击红色放大镜进入调试模式</p><h2 id="四、TIM定时中断"><a href="#四、TIM定时中断" class="headerlink" title="四、TIM定时中断"></a>四、TIM定时中断</h2><h3 id="1-TIM简介"><a href="#1-TIM简介" class="headerlink" title="1.TIM简介"></a>1.TIM简介</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105114005061.png" class="" title="image-20231105114005061"><p>  定时器是一个计数器，基本功能是定时触发中断</p><h4 id="1-TIM类型"><a href="#1-TIM类型" class="headerlink" title="(1)TIM类型"></a>(1)TIM类型</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105114305631.png" class="" title="image-20231105114305631"><p>APB2总线性能更高    定时器向下兼容</p><h5 id="a-基本定时器"><a href="#a-基本定时器" class="headerlink" title="a.基本定时器"></a>a.基本定时器</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105114739476.png" class="" title="image-20231105114739476"><p>时基单元：</p><p>TIMxCLK是72MHz</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105114802968.png" class="" title="image-20231105114802968"><p><strong>预分频器：</strong>  0，即不分频   ； 1，即2分频，36MHz </p><p><strong>CNT计数器：</strong>16位计数器，值0–65535，溢出则归零。 自增运行至目标值，产生中断。</p><p><strong>自动重装寄存器：</strong>存储目标值的寄存器，即写入的计数目标。当计数达到目标值，产生中断信号并清零计数器，自动开始下一次的计数计时。</p><table><thead><tr><th>更新中断： 计数值等于自动重装值产生的中断，产生更新中断后会通往NVIC，若配置好NVIC的定时器通道，那定时器的更新中断就能得到CPU的响应了。</th></tr></thead></table><h5 id="b-通用定时器"><a href="#b-通用定时器" class="headerlink" title="b.通用定时器"></a>b.通用定时器</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105120127375.png" class="" title="image-20231105120127375"><p>  除了基本的向上计数模式（基本定时器的计数模式）外，通用定时器和高级定时器还支持<strong>向下计数模式</strong>和<strong>中央对齐模式</strong>。</p><p>  <strong>向下计数模式：</strong> 从重装值开始向下自减，减到0，申请中断，循环。</p><p>  <strong>中央对齐模式：</strong> 从0开始，向上自增到重装值，申请中断；向下自减到0，再申请中断。循环。</p><h5 id="c-高级定时器"><a href="#c-高级定时器" class="headerlink" title="c.高级定时器"></a>c.高级定时器</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231105114557087.png" class="" title="image-20231105114557087"><h3 id="2-定时中断基本结构"><a href="#2-定时中断基本结构" class="headerlink" title="2.定时中断基本结构"></a>2.定时中断基本结构</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231115214517936.png" class="" title="image-20231115214517936"><p>  上述为定时器搜友可选时钟源</p><p>  若为<strong>高级定时器</strong>，则在自动重装器和中断输出控制之间还会多一个<strong>重复计数器</strong></p><p><strong>中断输出控制：</strong>中断输出的“允许位”，允许后，对应中断才可输出</p><h4 id="1-预分频器时序"><a href="#1-预分频器时序" class="headerlink" title="1. 预分频器时序"></a>1. 预分频器时序</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231115215044998.png" class="" title="image-20231115215044998"><table><thead><tr><th>预分频缓冲寄存器（影子寄存器）才是真正起作用的寄存器，当计数到一半时，若改变了分频值，变化不会立刻生效，会等到本次计数周期结束，产生了更新事件（UEV），预分频寄存器的值才会被传递到缓冲寄存器里面去，才会生效。</th></tr></thead></table><p><strong>CNT_EN：</strong>计时器使能，高电平计数器正常工作，低电平计数器停止</p><p><strong>CK_CNT：</strong>计数器时钟，使预分频器的时钟输出也是CNT计时器的时钟输入</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231115215332776.png" class="" title="image-20231115215332776"><h4 id="2-计数器时序"><a href="#2-计数器时序" class="headerlink" title="2.计数器时序"></a>2.计数器时序</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231115220309505.png" class="" title="image-20231115220309505"><p><strong>UIF</strong>只要置1了，就会去申请中断，中断响应后需要在中断程序中<strong>手动清零</strong></p><p><strong>ARR：</strong>自动重装定时器，它也有缓冲寄存器</p><h5 id="a-计数器无预装时序"><a href="#a-计数器无预装时序" class="headerlink" title="a. 计数器无预装时序"></a>a. 计数器无预装时序</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231115220835742.png" class="" title="image-20231115220835742"><h5 id="b-计数器有预装时序"><a href="#b-计数器有预装时序" class="headerlink" title="b.计数器有预装时序"></a>b.计数器有预装时序</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231115220908566.png" class="" title="image-20231115220908566"><p><strong>让值得变化和更新同步发生，防止在运行得途中更改发生错误</strong></p><h4 id="3-RCC时钟树"><a href="#3-RCC时钟树" class="headerlink" title="3.RCC时钟树"></a>3.RCC时钟树</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231115221310775.png" class="" title="image-20231115221310775"><h2 id="五、TIM输出比较"><a href="#五、TIM输出比较" class="headerlink" title="五、TIM输出比较"></a>五、TIM输出比较</h2><h3 id="1-输出比较简介"><a href="#1-输出比较简介" class="headerlink" title="1.输出比较简介"></a>1.输出比较简介</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119103311778.png" class="" title="image-20231119103311778"><p><strong>IC：</strong>Input Capture  输入捕获</p><p><strong>CC：</strong>Capture/Compare  输入捕获和输出比较的单元</p><p><strong>CNT</strong>计数器与<strong>CCR</strong>捕获比较寄存器</p><p>CNT自增，CCR为给定值，通过比较二者的值不断置1 ，置0，来达到输出PWM波形的效果。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119104148666.png" class="" title="image-20231119104148666"><h3 id="2-PWM波形"><a href="#2-PWM波形" class="headerlink" title="2.PWM波形"></a>2.PWM波形</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119104619860.png" class="" title="image-20231119104619860"><p>  PWM为数字输出信号，由高低电平组成。PWM的频率越快，它等效的模拟信号就约平稳。</p><p>  快频率通电断电，就可以得到一个平均输出值。</p><p>  <strong>分辨率：</strong>占空比变化的精细程度。</p><h3 id="3-输出比较部分电路"><a href="#3-输出比较部分电路" class="headerlink" title="3. 输出比较部分电路"></a>3. 输出比较部分电路</h3><h4 id="1-输出比较通道"><a href="#1-输出比较通道" class="headerlink" title="(1)输出比较通道"></a>(1)输出比较通道</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119105352951.png" class="" title="image-20231119105352951"><p>oc1ref：  reference（参考信号）</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119105625151.png" class="" title="image-20231119105625151"><p><strong>极性选择：</strong></p><p>  0–&gt;信号不反转</p><p> 1–&gt;非门取反，信号反转</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119105330300.png" class="" title="image-20231119105330300"><p>OC1右侧接推挽电路（2个，形成H桥），就可用于驱动电机（正反转）</p><h4 id="2-八种模式输出比较"><a href="#2-八种模式输出比较" class="headerlink" title="(2)八种模式输出比较"></a>(2)八种模式输出比较</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119105929383.png" class="" title="image-20231119105929383"><ul><li><p><strong>冻结：</strong>输出暂停，高低电平维持冻结状态保持不变。</p></li><li><p><strong>有效电平/无效电平</strong>（1/0）</p></li><li><p><strong>匹配时输出翻转：</strong>更新两次，输出才为一个周期。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/capture-2023-11-19-11-14-51.jpg" class="" title="capture-2023-11-19-11-14-51"></li></ul><h3 id="4-PWM基本结构"><a href="#4-PWM基本结构" class="headerlink" title="4.PWM基本结构"></a>4.PWM基本结构</h3><h4 id="1-总体结构"><a href="#1-总体结构" class="headerlink" title="(1)总体结构"></a>(1)总体结构</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119112018545.png" class="" title="image-20231119112018545"><p>PWM输出：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119112329161.png" class="" title="image-20231119112329161"><p>蓝色：CNT              黄色：ARR              红色：CCR</p><h4 id="2-参数计算"><a href="#2-参数计算" class="headerlink" title="(2)参数计算"></a>(2)参数计算</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119112557976.png" class="" title="image-20231119112557976"><h3 id="5-STM32外设"><a href="#5-STM32外设" class="headerlink" title="5.STM32外设"></a>5.STM32外设</h3><h4 id="1-舵机"><a href="#1-舵机" class="headerlink" title="(1)舵机"></a>(1)舵机</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119113413030.png" class="" title="image-20231119113413030"><p>  PWM信号输入到控制板，给控制板一个指定的角度。然后，电位器检测输出轴的当前角度。若大于目标角度，直流电机反转；小于，正传。最终使输出轴固定在指定角度。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119113735918.png" class="" title="image-20231119113735918"><h4 id="2-直流电机"><a href="#2-直流电机" class="headerlink" title="(2)直流电机"></a>(2)直流电机</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119113714067.png" class="" title="image-20231119113714067"><p>H桥： 由两路推挽电路组成</p><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119115025005.png" class="" title="image-20231119115025005"><img lazyload="" src="/images/loading.svg" data-src="/2023/10/06/MCU-Study-Stm32/image-20231119114921803.png" class="" title="image-20231119114921803">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Part1-初识Stm32&quot;&gt;&lt;a href=&quot;#Part1-初识Stm32&quot; class=&quot;headerlink&quot; title=&quot;Part1. 初识Stm32&quot;&gt;&lt;/a&gt;Part1. 初识Stm32&lt;/h1&gt;&lt;h2 id=&quot;一、Preparation&quot;&gt;&lt;a h</summary>
      
    
    
    
    <category term="MCU" scheme="http://example.com/categories/MCU/"/>
    
    
    <category term="MCU" scheme="http://example.com/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>Coppersmith-Study</title>
    <link href="http://example.com/2023/08/07/Coppersmith-Study/"/>
    <id>http://example.com/2023/08/07/Coppersmith-Study/</id>
    <published>2023-08-07T09:33:21.000Z</published>
    <updated>2023-08-07T14:03:29.644Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Coppersmith"><a href="#Coppersmith" class="headerlink" title="Coppersmith"></a>Coppersmith</h1><h2 id="一、Introduction"><a href="#一、Introduction" class="headerlink" title="一、Introduction"></a>一、Introduction</h2><p>Coppersmith定理在RSA中多有应用，最多的就是，</p><p><strong>高位攻击</strong>一类的</p><p>Coppersmith 可以用于求多项式的小根，经常用于 RSA 攻击中“已知某些二进制位，求剩余位”这一类问题。</p><h2 id="二、Deduction"><a href="#二、Deduction" class="headerlink" title="二、Deduction"></a>二、Deduction</h2><p>Coppersmith干了这么一件事：现有一个<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>阶的多项式<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="1.244ex" height="2.059ex" role="img" focusable="false" viewBox="0 -705 550 910"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D453" d="M118 -162Q120 -162 124 -164T135 -167T147 -168Q160 -168 171 -155T187 -126Q197 -99 221 27T267 267T289 382V385H242Q195 385 192 387Q188 390 188 397L195 425Q197 430 203 430T250 431Q298 431 298 432Q298 434 307 482T319 540Q356 705 465 705Q502 703 526 683T550 630Q550 594 529 578T487 561Q443 561 443 603Q443 622 454 636T478 657L487 662Q471 668 457 668Q445 668 434 658T419 630Q412 601 403 552T387 469T380 433Q380 431 435 431Q480 431 487 430T498 424Q499 420 496 407T491 391Q489 386 482 386T428 385H372L349 263Q301 15 282 -47Q255 -132 212 -173Q175 -205 139 -205Q107 -205 81 -186T55 -132Q55 -95 76 -78T118 -61Q162 -61 162 -103Q162 -122 151 -136T127 -157L118 -162Z"></path></g></g></g></svg></mjx-container>，那么可以：</p><ul><li>在模<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>意义下,快速求出<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="3.891ex" height="2.046ex" role="img" focusable="false" viewBox="0 -893.3 1719.6 904.3"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mn"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="TeXAtom" data-mjx-texclass="ORD" transform="translate(500,0)"><g data-mml-node="mo"><path data-c="2F" d="M423 750Q432 750 438 744T444 730Q444 725 271 248T92 -240Q85 -250 75 -250Q68 -250 62 -245T56 -231Q56 -221 230 257T407 740Q411 750 423 750Z"></path></g></g><g data-mml-node="mi" transform="translate(1000,0)"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></g></g></svg></mjx-container>以内的根</li><li>给定<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.439ex;" xmlns="http://www.w3.org/2000/svg" width="1.281ex" height="2.034ex" role="img" focusable="false" viewBox="0 -705 566 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></svg></mjx-container>，快速求出模某个<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="0.971ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 429 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g></g></g></svg></mjx-container>意义下较小的根，其中<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.312ex;" xmlns="http://www.w3.org/2000/svg" width="6.438ex" height="2.261ex" role="img" focusable="false" viewBox="0 -861.5 2845.8 999.5"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(706.8,0)"><path data-c="2265" d="M83 616Q83 624 89 630T99 636Q107 636 253 568T543 431T687 361Q694 356 694 346T687 331Q685 329 395 192L107 56H101Q83 58 83 76Q83 77 83 79Q82 86 98 95Q117 105 248 167Q326 204 378 228L626 346L360 472Q291 505 200 548Q112 589 98 597T83 616ZM84 -118Q84 -108 99 -98H678Q694 -104 694 -118Q694 -130 679 -138H98Q84 -131 84 -118Z"></path></g><g data-mml-node="msup" transform="translate(1762.6,0)"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="TeXAtom" transform="translate(633,363) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D6FD" d="M29 -194Q23 -188 23 -186Q23 -183 102 134T186 465Q208 533 243 584T309 658Q365 705 429 705H431Q493 705 533 667T573 570Q573 465 469 396L482 383Q533 332 533 252Q533 139 448 65T257 -10Q227 -10 203 -2T165 17T143 40T131 59T126 65L62 -188Q60 -194 42 -194H29ZM353 431Q392 431 427 419L432 422Q436 426 439 429T449 439T461 453T472 471T484 495T493 524T501 560Q503 569 503 593Q503 611 502 616Q487 667 426 667Q384 667 347 643T286 582T247 514T224 455Q219 439 186 308T152 168Q151 163 151 147Q151 99 173 68Q204 26 260 26Q302 26 349 51T425 137Q441 171 449 214T457 279Q457 337 422 372Q380 358 347 358H337Q258 358 258 389Q258 396 261 403Q275 431 353 431Z"></path></g></g></g></g></g></svg></mjx-container>，是<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.357ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 600 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>的因数。</li></ul><p>一般采用Sage实现的<strong>small_root</strong>方法</p><h2 id="三、Problem"><a href="#三、Problem" class="headerlink" title="三、Problem"></a>三、Problem</h2><h3 id="1-hash爆破"><a href="#1-hash爆破" class="headerlink" title="1.  hash爆破"></a>1.  hash爆破</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">proof: skr=os.urandom(<span class="number">8</span>)</span><br><span class="line">hashlib.sha256(skr).hexdigest()=246bfcbe8c7b0be0a3ee28840a276272ba4416cb650affd846e9f7f2db2820a9</span><br><span class="line">skr[<span class="number">0</span>:<span class="number">5</span>].encode(<span class="string">'hex'</span>)=c2183d3580</span><br><span class="line">skr.encode(<span class="string">'hex'</span>)=</span><br></pre></td></tr></table></figure></div><p>　给出了 <code>skr</code> 的前 5 位，需要找到正确的 <code>skr</code> 使得其 sha256 为给定值。显然直接爆破后三位就行。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phase1</span>(<span class="params">pre, target</span>):</span><br><span class="line">    pre = codecs.decode(pre.encode(), <span class="string">'hex'</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(<span class="number">256</span>), repeat=<span class="number">3</span>):</span><br><span class="line">        skr = pre + <span class="string">b''</span>.join([t.to_bytes(<span class="number">1</span>, <span class="string">'big'</span>) <span class="keyword">for</span> t <span class="keyword">in</span> x])</span><br><span class="line">        <span class="keyword">if</span> hashlib.sha256(skr).hexdigest() == target:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f'find <span class="subst">{skr}</span>'</span>)</span><br><span class="line">            <span class="keyword">return</span> codecs.encode(skr, <span class="string">'hex'</span>).decode()</span><br><span class="line"></span><br><span class="line">phase1(<span class="string">'c2183d3580'</span>, <span class="string">'246bfcbe8c7b0be0a3ee28840a276272ba4416cb650affd846e9f7f2db2820a9'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># find b'\xc2\x18=5\x80\x14Q9'</span></span><br><span class="line"><span class="comment"># 'c2183d3580145139'</span></span><br></pre></td></tr></table></figure></div><h3 id="2-已知明文高位，求低位"><a href="#2-已知明文高位，求低位" class="headerlink" title="2. 已知明文高位，求低位"></a>2. 已知明文高位，求低位</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">13112061820685643239663831166928327119579425830632458568801544406506769461279590962772340249183569437559394200635526183698604582385769381159563710823689417274479549627596095398621182995891454516953722025068926293512505383125227579169778946631369961753587856344582257683672313230378603324005337788913902434023431887061454368566100747618582590270385918204656156089053519709536001906964008635708510672550219546894006091483520355436091053866312718431318498783637712773878423777467316605865516248176248780637132615807886272029843770186833425792049108187487338237850806203728217374848799250419859646871057096297020670904211</span></span><br><span class="line"></span><br><span class="line">e=<span class="number">3</span></span><br><span class="line"></span><br><span class="line">m=random.getrandbits(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)=<span class="number">15987554724003100295326076036413163634398600947695096857803937998969441763014731720375196104010794555868069024393647966040593258267888463732184495020709457560043050577198988363754703741636088089472488971050324654162166657678376557110492703712286306868843728466224887550827162442026262163340935333721705267432790268517</span></span><br><span class="line"></span><br><span class="line">((m&gt;&gt;<span class="number">72</span>&lt;&lt;<span class="number">72</span>)=<span class="number">2519188594271759205757864486097605540135407501571078627238849443561219057751843170540261842677239681908736</span></span><br><span class="line"></span><br><span class="line">long_to_bytes(m).encode(<span class="string">'hex'</span>)=</span><br></pre></td></tr></table></figure></div><p>这里给出了<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>的高位440位，我们只需要推断出剩余发低位–72位即可。记真实的<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 878 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g></g></g></svg></mjx-container>为<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.464ex;" xmlns="http://www.w3.org/2000/svg" width="10.904ex" height="2.034ex" role="img" focusable="false" viewBox="0 -694 4819.4 899"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(576,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(921,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(1398,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(1974,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(3247.2,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(4247.4,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g></g></g></svg></mjx-container>，则<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="31.282ex" height="2.564ex" role="img" focusable="false" viewBox="0 -883.2 13826.6 1133.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mn" transform="translate(911,413) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(1536.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2537,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(3247.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mo" transform="translate(4303.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4692.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(5268.6,0)"><path data-c="1D456" d="M184 600Q184 624 203 642T247 661Q265 661 277 649T290 619Q290 596 270 577T226 557Q211 557 198 567T184 600ZM21 287Q21 295 30 318T54 369T98 420T158 442Q197 442 223 419T250 357Q250 340 236 301T196 196T154 83Q149 61 149 51Q149 26 166 26Q175 26 185 29T208 43T235 78T260 137Q263 149 265 151T282 153Q302 153 302 143Q302 135 293 112T268 61T223 11T161 -11Q129 -11 102 10T74 74Q74 91 79 106T122 220Q160 321 166 341T173 380Q173 404 156 404H154Q124 404 99 371T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5613.6,0)"><path data-c="1D454" d="M311 43Q296 30 267 15T206 0Q143 0 105 45T66 160Q66 265 143 353T314 442Q361 442 401 394L404 398Q406 401 409 404T418 412T431 419T447 422Q461 422 470 413T480 394Q480 379 423 152T363 -80Q345 -134 286 -169T151 -205Q10 -205 10 -137Q10 -111 28 -91T74 -71Q89 -71 102 -80T116 -111Q116 -121 114 -130T107 -144T99 -154T92 -162L90 -164H91Q101 -167 151 -167Q189 -167 211 -155Q234 -144 254 -122T282 -75Q288 -56 298 -13Q311 35 311 43ZM384 328L380 339Q377 350 375 354T369 368T359 382T346 393T328 402T306 405Q262 405 221 352Q191 313 171 233T151 117Q151 38 213 38Q269 38 323 108L331 118L384 328Z"></path></g><g data-mml-node="mi" transform="translate(6090.6,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g><g data-mml-node="mi" transform="translate(6666.6,0)"><path data-c="1D440" d="M289 629Q289 635 232 637Q208 637 201 638T194 648Q194 649 196 659Q197 662 198 666T199 671T201 676T203 679T207 681T212 683T220 683T232 684Q238 684 262 684T307 683Q386 683 398 683T414 678Q415 674 451 396L487 117L510 154Q534 190 574 254T662 394Q837 673 839 675Q840 676 842 678T846 681L852 683H948Q965 683 988 683T1017 684Q1051 684 1051 673Q1051 668 1048 656T1045 643Q1041 637 1008 637Q968 636 957 634T939 623Q936 618 867 340T797 59Q797 55 798 54T805 50T822 48T855 46H886Q892 37 892 35Q892 19 885 5Q880 0 869 0Q864 0 828 1T736 2Q675 2 644 2T609 1Q592 1 592 11Q592 13 594 25Q598 41 602 43T625 46Q652 46 685 49Q699 52 704 61Q706 65 742 207T813 490T848 631L654 322Q458 10 453 5Q451 4 449 3Q444 0 433 0Q418 0 415 7Q413 11 374 317L335 624L267 354Q200 88 200 79Q206 46 272 46H282Q288 41 289 37T286 19Q282 3 278 1Q274 0 267 0Q265 0 255 0T221 1T157 2Q127 2 95 1T58 0Q43 0 39 2T35 11Q35 13 38 25T43 40Q45 46 65 46Q135 46 154 86Q158 92 223 354T289 629Z"></path></g><g data-mml-node="mo" transform="translate(7939.8,0)"><path data-c="2B" d="M56 237T56 250T70 270H369V420L370 570Q380 583 389 583Q402 583 409 568V270H707Q722 262 722 250T707 230H409V-68Q401 -82 391 -82H389H387Q375 -82 369 -68V230H70Q56 237 56 250Z"></path></g><g data-mml-node="mi" transform="translate(8940,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="msup" transform="translate(9512,0)"><g data-mml-node="mo"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mn" transform="translate(422,413) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g><g data-mml-node="mo" transform="translate(10559.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(11560,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mo" transform="translate(12270.8,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(13326.6,0)"><path data-c="30" d="M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z"></path></g></g></g></svg></mjx-container></p><p>这个方程的根很小，可以直接求解。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phase2</span>(<span class="params">high_m, n, c</span>):</span><br><span class="line">    R.&lt;x&gt; = PolynomialRing(Zmod(n), implementation=<span class="string">'NTL'</span>)</span><br><span class="line">    m = high_m + x</span><br><span class="line">    M = m((m^<span class="number">3</span> - c).small_roots()[<span class="number">0</span>])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(<span class="built_in">int</span>(M))[<span class="number">2</span>:])</span><br><span class="line"></span><br><span class="line">n = <span class="number">13112061820685643239663831166928327119579425830632458568801544406506769461279590962772340249183569437559394200635526183698604582385769381159563710823689417274479549627596095398621182995891454516953722025068926293512505383125227579169778946631369961753587856344582257683672313230378603324005337788913902434023431887061454368566100747618582590270385918204656156089053519709536001906964008635708510672550219546894006091483520355436091053866312718431318498783637712773878423777467316605865516248176248780637132615807886272029843770186833425792049108187487338237850806203728217374848799250419859646871057096297020670904211</span></span><br><span class="line">c = <span class="number">15987554724003100295326076036413163634398600947695096857803937998969441763014731720375196104010794555868069024393647966040593258267888463732184495020709457560043050577198988363754703741636088089472488971050324654162166657678376557110492703712286306868843728466224887550827162442026262163340935333721705267432790268517</span></span><br><span class="line">high_m = <span class="number">2519188594271759205757864486097605540135407501571078627238849443561219057751843170540261842677239681908736</span></span><br><span class="line"></span><br><span class="line">phase2(high_m, n, c)</span><br><span class="line"><span class="comment"># 464c41477b325e3872736137353839363933666336383963373763356635323632643635343237323432377d</span></span><br></pre></td></tr></table></figure></div><h3 id="3-广播攻击"><a href="#3-广播攻击" class="headerlink" title="3. 广播攻击"></a>3. 广播攻击</h3><p>CRT的应用场景</p><p>模数<code>n</code>、密文<code>c</code>不同，明文<code>m</code>、加密指数<code>e</code>相同。一般会是<code>e=k</code>，然后给<code>k</code>组数据<br>使用不同的模数<code>n</code>，相同的公钥指数<code>e</code>加密相同的信息。就会得到多个<code>(m^e) ==ci (mod ni)</code>，将<code>(m^e)</code>视为一个整体M，这就是典型的中国剩余定理适用情况。按照中国剩余定理容易求得<code>m^e</code>的值，当<code>e</code>较小时直接开<code>e</code>方即可，可使用<code>gmpy2.iroot(M,e)</code>方法。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">e=<span class="number">3</span></span><br><span class="line">m=random.getrandbits(<span class="number">512</span>)</span><br><span class="line"></span><br><span class="line">n1=<span class="number">78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989</span></span><br><span class="line">c1=<span class="built_in">pow</span>(m,e,n1)=<span class="number">23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860</span></span><br><span class="line"></span><br><span class="line">n2=<span class="number">98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647</span></span><br><span class="line">c2=<span class="built_in">pow</span>(m,e,n2)=<span class="number">72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676</span></span><br><span class="line"></span><br><span class="line">n3=<span class="number">91638855323231795590642755267985988356764327384001022396221901964430032527111968159623063760057482761918901490239790230176524505469897183382928646349163030620342744192731246392941227433195249399795012672172947919435254998997253131826888070173526892674308708289629739522194864912899817994807268945141349669311</span></span><br><span class="line">c3=<span class="built_in">pow</span>(m,e,n3)=<span class="number">22149989692509889061584875630258740744292355239822482581889060656197919681655781672277545701325284646570773490123892626601106871432216449814891757715588851851459306683123591338089745675044763551335899599807235257516935037356212345033087798267959242561085752109746935300735969972249665700075907145744305255616</span></span><br><span class="line"></span><br><span class="line">long_to_bytes(m).encode(<span class="string">'hex'</span>)=</span><br></pre></td></tr></table></figure></div><p>相同的消息用三个不同的公钥加密，且 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.054ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 466 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g></g></g></svg></mjx-container>=3，直接通过中国剩余定理得到 <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.042ex" height="1.91ex" role="img" focusable="false" viewBox="0 -833.2 902.6 844.2"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D452" d="M39 168Q39 225 58 272T107 350T174 402T244 433T307 442H310Q355 442 388 420T421 355Q421 265 310 237Q261 224 176 223Q139 223 138 221Q138 219 132 186T125 128Q125 81 146 54T209 26T302 45T394 111Q403 121 406 121Q410 121 419 112T429 98T420 82T390 55T344 24T281 -1T205 -11Q126 -11 83 42T39 168ZM373 353Q367 405 305 405Q272 405 244 391T199 357T170 316T154 280T149 261Q149 260 169 260Q282 260 327 284T373 353Z"></path></g><g data-mml-node="mn" transform="translate(499,363) scale(0.707)"><path data-c="33" d="M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z"></path></g></g></g></g></svg></mjx-container> 的确切值，开根号即可。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">phase5</span>(<span class="params">n1, c1, n2, c2, n3, c3</span>):</span><br><span class="line">    r = CRT([c1, c2, c3], [n1, n2, n3])</span><br><span class="line">    m = <span class="built_in">int</span>(r)^(<span class="number">1</span>/<span class="number">3</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line">    </span><br><span class="line">n1 = <span class="number">78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989</span></span><br><span class="line">c1 = <span class="number">23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860</span></span><br><span class="line">n2 = <span class="number">98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647</span></span><br><span class="line">c2 = <span class="number">72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676</span></span><br><span class="line">n3 = <span class="number">91638855323231795590642755267985988356764327384001022396221901964430032527111968159623063760057482761918901490239790230176524505469897183382928646349163030620342744192731246392941227433195249399795012672172947919435254998997253131826888070173526892674308708289629739522194864912899817994807268945141349669311</span></span><br><span class="line">c3 = <span class="number">22149989692509889061584875630258740744292355239822482581889060656197919681655781672277545701325284646570773490123892626601106871432216449814891757715588851851459306683123591338089745675044763551335899599807235257516935037356212345033087798267959242561085752109746935300735969972249665700075907145744305255616</span></span><br><span class="line"></span><br><span class="line">phase5(n1,c1,n2,c2,n3,c3)</span><br><span class="line"><span class="comment"># 464c41477b325e3872736138633566336366663462633039353334396665633635666332323633653837387d</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Coppersmith&quot;&gt;&lt;a href=&quot;#Coppersmith&quot; class=&quot;headerlink&quot; title=&quot;Coppersmith&quot;&gt;&lt;/a&gt;Coppersmith&lt;/h1&gt;&lt;h2 id=&quot;一、Introduction&quot;&gt;&lt;a href=&quot;#一、I</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>MCU-Study</title>
    <link href="http://example.com/2023/07/15/MCU-Study/"/>
    <id>http://example.com/2023/07/15/MCU-Study/</id>
    <published>2023-07-15T13:33:22.000Z</published>
    <updated>2023-10-03T07:45:47.881Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Contents</strong></p><p>[TOC]</p><h1 id="Part1–初识MCU"><a href="#Part1–初识MCU" class="headerlink" title="Part1–初识MCU"></a>Part1–初识MCU</h1><h2 id="一、Preparation"><a href="#一、Preparation" class="headerlink" title="一、Preparation"></a>一、Preparation</h2><h3 id="1-Two-applications"><a href="#1-Two-applications" class="headerlink" title="1. Two applications"></a>1. Two applications</h3><h4 id="Keil5（编写程序）"><a href="#Keil5（编写程序）" class="headerlink" title="Keil5（编写程序）"></a>Keil5（编写程序）</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230718114300607.png" class="" title="image-20230718114300607"><p>(1)从官网下载Keil5</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230718114530122.png" class="" title="image-20230718114530122"><p>(2)从License Magement中复制你的CID并将其输入keygen中激活</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230718114934737.png" class="" title="image-20230718114934737"><table><thead><tr><th>注意，以管理员身份运行程序，否则权限不够。  AND    在打开Keygen或者下载前，关闭防火墙，否则有一定概率误杀</th></tr></thead></table><p>(3)点击Generate，完成激活</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230718115826337.png" class="" title="image-20230718115826337"><h4 id="Stc-isp（下载程序）"><a href="#Stc-isp（下载程序）" class="headerlink" title="Stc-isp（下载程序）"></a>Stc-isp（下载程序）</h4><p>这个自行搜索下载</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230718114336762.png" class="" title="image-20230718114336762"><p>在成功下载之后，一般来说无法直接读取或识别外接的C51，这个时候需要安装相应的driver：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721233738490.png" class="" title="image-20230721233738490"><p>这时候如果在任务管理器中能够能看到USB-SERIAL，说明驱动安装成功，C51已被读取。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721233805538.png" class="" title="image-20230721233805538"><p>x def phase5(n1, c1, n2, c2, n3, c3):    r = CRT([c1, c2, c3], [n1, n2, n3])    m = int(r)^(1/3)    print(hex(m)[2:])    n1 = 78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989c1 = 23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860n2 = 98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647c2 = 72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676n3 = 91638855323231795590642755267985988356764327384001022396221901964430032527111968159623063760057482761918901490239790230176524505469897183382928646349163030620342744192731246392941227433195249399795012672172947919435254998997253131826888070173526892674308708289629739522194864912899817994807268945141349669311c3 = 22149989692509889061584875630258740744292355239822482581889060656197919681655781672277545701325284646570773490123892626601106871432216449814891757715588851851459306683123591338089745675044763551335899599807235257516935037356212345033087798267959242561085752109746935300735969972249665700075907145744305255616​phase5(n1,c1,n2,c2,n3,c3)# 464c41477b325e3872736138633566336366663462633039353334396665633635666332323633653837387dpython</p><h2 id="二、About-MCU"><a href="#二、About-MCU" class="headerlink" title="二、About  MCU"></a>二、About  MCU</h2><h3 id="1-Brief-introduction"><a href="#1-Brief-introduction" class="headerlink" title="1. Brief introduction"></a>1. Brief introduction</h3><p>单片机，英文Micro ControIIer Unit ， 简称MCU</p><ol><li>内部集成了CPU 、RAM 、ROM 、定时器、中断系统、通讯接口等一系列电脑的常用硬件功能</li><li>单片机的任务是信息采集（ 依靠传感器） 、处理（ 依靠CPU) 和硬件设备（ 例如电机， LED 等） 的控制</li><li>单片机跟计算机相比， 单片机算是一个袖珍版计算机， 一个芯片就能构成完整的计算机系统。但在性能上， 与计算机相差甚远， 但单片机成本低、体积小、结构简单， 在生活和工业控制领域大有所用。同时， 学习使用单片机是了解计算机原理与结构的最佳选择</li></ol><p>51单片机：指80年代Intel开发的8051内核的单片机的统称。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721233828196.png" class="" title="image-20230721233828196"><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721233855915.png" class="" title="image-20230721233855915"><p>*<code>类比电脑内存条</code>*：<strong>RAM</strong>（Random Access Memory，<strong>随机存取存储器</strong>）是计算机中的一种主要存储设备，用于临时存储和快速访问数据。它是计算机的一个重要组成部分，用于存储正在执行的程序和数据。</p><p>RAM与计算机的硬盘驱动器（或固态驱动器）不同，后者用于长期存储数据，而RAM是一种易失性存储器，意味着其存储的数据在断电或重新启动后会被清除。这是因为RAM是基于电子器件和电路构建的，需要持续的电源供应来保持存储的数据。</p><p>RAM被分为主存储器（Main Memory）和高速缓存（Cache Memory）。主存储器是计算机直接访问的存储区域，用于存储正在运行的程序和数据。它的存取速度比硬盘驱动器等次要存储设备要快得多。高速缓存是位于CPU内部的一种更快速的存储器，用于临时存储处理器频繁访问的数据，以提高计算机的性能。</p><p>RAM的容量通常以兆字节（MB）或千兆字节（GB）进行衡量。较大容量的RAM可以容纳更多的程序和数据，从而提供更好的性能和多任务处理能力。计算机的RAM容量可以根据需要进行扩展或升级。</p><p>总之，RAM是一种临时存储设备，用于存储正在执行的程序和数据，提供计算机的实时访问能力。它在计算机的性能和多任务处理方面起着重要的作用。</p><p>*<code>类比电脑硬盘</code>*：<strong>ROM</strong>（Read-Only Memory）是一种计算机芯片或存储设备中的一种存储器类型。与随机访问存储器（RAM）相比，ROM在断电后能够保持其存储的数据不变，因此也被称为非易失性存储器。ROM的数据一般是由制造厂商在生产过程中预先写入的，并且用户无法对其进行修改。这意味着ROM中存储的内容是只读的，无法被擦除或重写。</p><p>ROM有多种不同类型，包括：</p><ol><li>PROM（Programmable Read-Only Memory，可编程只读存储器）：这种ROM允许用户在一次性编程之前将数据写入其中。一旦编程完成，数据将永久固化在芯片中，不可更改。</li><li>EPROM（Erasable Programmable Read-Only Memory，可擦除可编程只读存储器）：这种ROM允许用户通过使用特定设备将其数据擦除，然后再次编程。擦除通常通过使用紫外线光线或电子擦除器来进行。</li><li>EEPROM（Electrically Erasable Programmable Read-Only Memory，电可擦除可编程只读存储器）：EEPROM与EPROM类似，但是擦除操作可以通过电源供电而不需要其他特殊设备。EEPROM的擦除和编程可以在特定的操作条件下进行。</li></ol><p>ROM的应用非常广泛，它被用于存储启动引导程序、固件、芯片内的固定数据以及其他一些需要在断电后保持不变的数据。有些游戏机、手机和电脑主板中也使用ROM存储固件或操作系统。总之，ROM在计算机和电子设备中起到了重要的作用，并且因其稳定性和数据不易丢失的特点而受到广泛使用。</p><h3 id="2-Application-field"><a href="#2-Application-field" class="headerlink" title="2. Application field"></a>2. Application field</h3><p>单片机的使用领域已十分广泛， 如智能仪表、实时工控、通讯设备、导航系统、家用电器等。各种产品一旦用上了单片机， 就能起到使<br>产品升级换代的功效， 常在产品名称前冠以形容词——“智能型”，如智能型洗衣机等。</p><h3 id="3-Naming-rules"><a href="#3-Naming-rules" class="headerlink" title="3. Naming rules"></a>3. Naming rules</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230720113130356.png" class="" title="image-20230720113130356"><h3 id="4-Structure"><a href="#4-Structure" class="headerlink" title="4. Structure"></a>4. Structure</h3><p><strong>单片机内部结构图：</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230720190656299.png" class="" title="image-20230720190656299"><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230720190715829.png" class="" title="image-20230720190715829"><p><strong>单片机管脚图</strong>：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230720190347143.png" class="" title="image-20230720190347143"><p>例如 Vcc代表 + 极，Gnd代表 - 极</p><p><strong>单片机的最小系统：</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230720191015968.png" class="" title="image-20230720191015968"><p>电容——过滤因为电源不稳定产生的电磁波</p><p>复位电路（中间的）——复位电路通常用来清除存储器中的数据、关闭所有开关和重置相关的逻辑电路。它可以在系统启动时，或在错误发生时，通过将相关电路重新初始化，确保系统处于可控状态。</p><p>晶振（左下角）——用于时钟电路和振荡电路中，以稳定电子设备的工作频率。晶振的主要原理是利用压电效应，在晶体振荡器中产生稳定的振荡信号。推动程序往下进行的关键。</p><h1 id="Part2–编写MCU"><a href="#Part2–编写MCU" class="headerlink" title="Part2–编写MCU"></a>Part2–编写MCU</h1><h2 id="一、Light-up-LED"><a href="#一、Light-up-LED" class="headerlink" title="一、Light up LED"></a>一、Light up LED</h2><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721205122034.png" class="" title="image-20230721205122034"> <p>LED，全称为Light Emitting Diode（发光二极管），是一种固体电子器件，可以将电能直接转化为光能。相对于传统的光源，如白炽灯和荧光灯，LED具有更高的能效、更长的使用寿命和更大的可靠性。</p><p>LED的工作原理是基于半导体材料的特性。当电流通过LED时，电子和空穴在半导体材料中重新组合，产生能量释放，从而产生可见光。不同半导体材料的能带结构决定了LED发出的光的颜色。</p><p>LED具有许多优点。首先，LED保存能量且效率高，相比传统光源，LED产生的光功率更大，但消耗的电能更少。其次，LED寿命长，通常可以达到数万个小时，远远超过传统光源。此外，LED具有快速开启和关闭的特性，并且可以根据需要调节亮度，因此被广泛应用于照明和显示领域。</p><p>LED在各个领域有广泛的应用。在照明领域，LED被用于家庭照明、商业照明和街道照明等。由于其高效节能的特性，LED也被用于太阳能照明和绿色建筑项目中。在电子显示领域，LED用于制造各种显示屏，如电视、计算机显示器和手机屏幕。此外，LED还常用于车辆照明、室内装饰、电子设备指示灯等。</p><h3 id="1-点亮一个LED"><a href="#1-点亮一个LED" class="headerlink" title="1. 点亮一个LED"></a>1. 点亮一个LED</h3><p>首先观察MCU里的LED模块</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234135751.png" class="" title="image-20230721234135751"><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234150197.png" class="" title="image-20230721234150197"><p>右边图片中的RP9、RP10是两个电阻                                                                          102=1k(10*10^2)元器件上的标号以此类推</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234217106.png" class="" title="image-20230721234217106"><p>P2口下的寄存器控制LED：       1–5V  不亮              0–0V  亮</p><hr><ol><li>创建一个Project，在列表里的Atmel下选择AT89C52</li></ol><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234242038.png" class="" title="image-20230721234242038"><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234253284.png" class="" title="image-20230721234253284"><ol start="2"><li>在该文件夹下创建一个C的文件，以便进一步编写程序</li></ol><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721203329446.png" class="" title="image-20230721203329446"><p> 3.编写控制LED的代码</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">P2=<span class="number">0xFE</span>;  </span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>4.将文件保存为hex格式，以便烧入</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234502390.png" class="" title="image-20230721234502390"><p>5.用stc-isp将程序烧入进MCU中，尝试运行</p><p>选择相应的单片机型号与串口号，并打开已写好的程序文件</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234514429.png" class="" title="image-20230721234514429"><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721230325802.png" class="" title="image-20230721230325802"><p>然后点击下载，重启单片机，发现成功点亮LED</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234524672.png" class="" title="image-20230721234524672"><h3 id="2-LED闪烁"><a href="#2-LED闪烁" class="headerlink" title="2. LED闪烁"></a>2. LED闪烁</h3><p>重复(1)中的操作步骤，新建一个Project</p><p>其实要完成闪烁只需要写一个while循环就可以了</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">P2=<span class="number">0xFE</span>;</span><br><span class="line">P2=<span class="number">0xFF</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>但这个时候发现LED闪烁周期过快，肉眼无法观察到明显现象，这个时候需要加大周期，即加入延时函数。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay500ms</span><span class="params">()</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">4</span>;</span><br><span class="line">j = <span class="number">205</span>;</span><br><span class="line">k = <span class="number">187</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">} <span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">P2=<span class="number">0xFE</span>;          <span class="comment">//0xAA    左右闪烁</span></span><br><span class="line">Delay500ms();</span><br><span class="line">P2=<span class="number">0xFF</span>;          <span class="comment">//0x55</span></span><br><span class="line">Delay500ms();</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="3-LED流水灯"><a href="#3-LED流水灯" class="headerlink" title="3. LED流水灯"></a>3. LED流水灯</h3><p>有了“前车之鉴”，再写流水灯其实就很简单了，逻辑是一样的。</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay250ms</span><span class="params">()</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j, k;</span><br><span class="line"></span><br><span class="line">_nop_();</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">231</span>;</span><br><span class="line">k = <span class="number">91</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--k);</span><br><span class="line">} <span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">P2=<span class="number">0xFE</span>;          </span><br><span class="line">Delay250ms();</span><br><span class="line">P2=<span class="number">0xFD</span>;          </span><br><span class="line">Delay250ms();</span><br><span class="line">P2=<span class="number">0xFB</span>;</span><br><span class="line">Delay250ms();</span><br><span class="line">P2=<span class="number">0xF7</span>;</span><br><span class="line">Delay250ms();</span><br><span class="line">P2=<span class="number">0xEF</span>;</span><br><span class="line">Delay250ms();</span><br><span class="line">P2=<span class="number">0xDF</span>;</span><br><span class="line">Delay250ms();</span><br><span class="line">P2=<span class="number">0xBF</span>;</span><br><span class="line">Delay250ms();</span><br><span class="line">P2=<span class="number">0x7F</span>;</span><br><span class="line">Delay250ms();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><strong>Pro版本：</strong></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n=<span class="number">50</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay1ms</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span>    <span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i,j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">{</span><br><span class="line">i=<span class="number">2</span>;</span><br><span class="line">  j=<span class="number">239</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(--j);</span><br><span class="line">} <span class="keyword">while</span>(--i);</span><br><span class="line">xms--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">P2=<span class="number">0xFE</span>;          </span><br><span class="line">Delay1ms(n);</span><br><span class="line">P2=<span class="number">0xFD</span>;          </span><br><span class="line">Delay1ms(n);</span><br><span class="line">P2=<span class="number">0xFB</span>;</span><br><span class="line">    Delay1ms(n);</span><br><span class="line">P2=<span class="number">0xF7</span>;</span><br><span class="line">Delay1ms(n);</span><br><span class="line">P2=<span class="number">0xEF</span>;</span><br><span class="line">Delay1ms(n);</span><br><span class="line">P2=<span class="number">0xDF</span>;</span><br><span class="line">Delay1ms(n);</span><br><span class="line">P2=<span class="number">0xBF</span>;</span><br><span class="line">Delay1ms(n);</span><br><span class="line">P2=<span class="number">0x7F</span>;</span><br><span class="line">Delay1ms(n);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="二、Individual-key"><a href="#二、Individual-key" class="headerlink" title="二、Individual key"></a>二、Individual key</h2><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230724152117265.png" class="" title="image-20230724152117265"><p>C51上的独立按键：底座+金属弹片+   +</p><p>不按下时4个引脚两两连接，按下去时4个引脚同时连接</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230722212835950.png" class="" title="image-20230722212835950"><p><strong>独立按键：</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230724152649697.png" class="" title="image-20230724152649697"><p>4个独立按键一端接 -极，另一端接I/O口（<strong>I/O口默认高电平</strong>）</p><p>寄存器检测I/O口电平</p><h3 id="1-独立按键控制LED亮灭"><a href="#1-独立按键控制LED亮灭" class="headerlink" title="1. 独立按键控制LED亮灭"></a>1. 独立按键控制LED亮灭</h3><p>sfr：整个8位的寄存器         </p><p> 寄存器中P2表示8位一体，不可单独控制单独位次</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230725101851144.png" class="" title="image-20230725101851144"><p>发现sbit可控制单独位次</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230725102105193.png" class="" title="image-20230725102105193"><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"> <span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line"> {</span><br><span class="line"><span class="comment">//P2=0xFE;</span></span><br><span class="line">       </span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)  <span class="comment">//单独控制P2的第0根管脚</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">P2_0=<span class="number">0</span>;     <span class="comment">//读取K1口寄存器</span></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">P2_0=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"> }</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="2-独立按键控制LED状态"><a href="#2-独立按键控制LED状态" class="headerlink" title="2. 独立按键控制LED状态"></a>2. 独立按键控制LED状态</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-07-29-21-08-14.jpg" class="" title="capture-2023-07-29-21-08-14"><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms)</span><br><span class="line">{</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">239</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">xms--;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)   <span class="comment">//检测按键是否按下，按下不操作，松手才开始操作（类比于电脑主表操作原理）</span></span><br><span class="line">{</span><br><span class="line">Delay(<span class="number">20</span>);  </span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">P2_0=~P2_0;  <span class="comment">//按位取反 P2_0只有一位，按位取反在0,1间变化</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="3-独立按键控制LED显示二进制"><a href="#3-独立按键控制LED显示二进制" class="headerlink" title="3. 独立按键控制LED显示二进制"></a>3. 独立按键控制LED显示二进制</h3><p>项目的创建以及准备工作就不再赘述</p><p>主要是利用 <strong>unsigned char</strong> 类型（0—255）与<strong>寄存器</strong>同样为8位的特性，来间接表示LED二进制</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">{</span><br><span class="line">i = <span class="number">12</span>;</span><br><span class="line">j = <span class="number">169</span>;  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LEDNum=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line">LEDNum++;   <span class="comment">//P2++;不行</span></span><br><span class="line">P2=~LEDNum;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>P2=1111 1111     //P2口默认高电平</p><p><strong>P2++</strong>  会使端口溢出，P2变成 0000 0000</p><p>再次取反P2将保持原样，即P2=1111 1111 ，表现为D1—D8全灭      </p><h3 id="4-独立按键控制LED移位"><a href="#4-独立按键控制LED移位" class="headerlink" title="4. 独立按键控制LED移位"></a>4. 独立按键控制LED移位</h3><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230722212835950.png" class="" title="image-20230722212835950"><p>项目预期：按下P3_1（左1），实现LED从左向右移位1</p><p>​                    按下P3_0（左2)，实现LED从右向左移位1                             </p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230721234150197.png" class="" title="image-20230721234150197"><p>[^如图所示]: </p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-07-30-16-43-46.jpg" class="" title="capture-2023-07-30-16-43-46"><p>实现移位的代码如下，主要使用C语言中的位运算：**&lt;&lt; 按位左移** 与 <strong>&gt;&gt;按位右移</strong></p><p>P3_1口闭合，左移</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LEDNum=<span class="number">0</span>;  </span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(LEDNum&gt;<span class="number">7</span>)</span><br><span class="line">{</span><br><span class="line">LEDNum=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;LEDNum);    </span><br><span class="line">LEDNum++;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">{</span><br><span class="line">i = <span class="number">12</span>;</span><br><span class="line">j = <span class="number">169</span>;  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>与左移逻辑一样，加上右移，完善代码，实现项目预期</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span>;   <span class="comment">//申明函数</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> LEDNum=<span class="number">0</span>;   <span class="comment">//8位的全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">P2=~<span class="number">0x01</span>;        <span class="comment">//点亮D1</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(P3_1==<span class="number">0</span>)    <span class="comment">//判断按键是否按下</span></span><br><span class="line">{</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line">             <span class="comment">//检测按键状态，即手是否在按下按键后抬起。若未抬起，则按键处于闭合状态，执行while死循环，防止误触</span></span><br><span class="line"><span class="keyword">while</span>(P3_1==<span class="number">0</span>);  </span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">LEDNum++;</span><br><span class="line"><span class="keyword">if</span>(LEDNum&gt;=<span class="number">8</span>)</span><br><span class="line">{</span><br><span class="line">LEDNum=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;LEDNum);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(P3_0==<span class="number">0</span>)      <span class="comment">//判断按键是否按下</span></span><br><span class="line">{</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P3_0==<span class="number">0</span>);</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(LEDNum==<span class="number">0</span>)</span><br><span class="line">{</span><br><span class="line">LEDNum=<span class="number">7</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">{</span><br><span class="line">LEDNum--;  <span class="comment">//自减，实现右移</span></span><br><span class="line">}</span><br><span class="line">P2=~(<span class="number">0x01</span>&lt;&lt;LEDNum);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">//延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">{</span><br><span class="line">i = <span class="number">12</span>;</span><br><span class="line">j = <span class="number">169</span>;  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="三、Static-digitron-display"><a href="#三、Static-digitron-display" class="headerlink" title="三、Static digitron display"></a>三、Static digitron display</h2><p><strong>(1)数码管介绍</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230805230332496.png" class="" title="image-20230805230332496"><p>控制数码管显示：</p><p>138译码器和数码管，两者共同作用下控制数码管的显示</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-05-23-06-33.jpg" class="" title="capture-2023-08-05-23-06-33"><p><strong>(2)数码管引脚定义：</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-07-31-20-35-24.jpg" class="" title="capture-2023-07-31-20-35-24"><h3 id="1-静态数码管显示"><a href="#1-静态数码管显示" class="headerlink" title="1. 静态数码管显示"></a>1. 静态数码管显示</h3><p>目标是使数码管的第三位单独显示数字“6”</p><p><strong>步骤为：</strong></p><p>1.控制138译码器选中LED6（标号从右到左）     Y5—101</p><p>2.给予P0口段码数据，经过信号缓冲，再传输至公共段码端</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230810110118401.png" class="" title="image-20230810110118401"><p>总共有以下几种实现方式：</p><p>1.共阴极连接</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-07-31-20-39-55.jpg" class="" title="capture-2023-07-31-20-39-55"><p>2.共阳极连接：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-07-31-20-42-20.jpg" class="" title="capture-2023-07-31-20-42-20"><p>代码如下：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//第三位数码(LED6)管显示“6”</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">P2_4=<span class="number">1</span>;    <span class="comment">// 101=5   LED6由Y5口控制，通过P_2,P_3,P_4口控制Y5输出低电平来点亮LED6</span></span><br><span class="line">P2_3=<span class="number">0</span>;</span><br><span class="line">P2_2=<span class="number">1</span>;</span><br><span class="line">P0=<span class="number">0x7D</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>完整的静态显示代码：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> NixieTable[]={<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x77</span>,<span class="number">0x7C</span>,<span class="number">0x39</span>,<span class="number">0x5E</span>,<span class="number">0x79</span>,<span class="number">0x71</span>,<span class="number">0x00</span>};</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Location,Number)</span>; <span class="comment">//首先控制P2口选中LED1~8中之一，再给P0口断码数据，选择显示的数字</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">Nixie(<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Location,Number)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">switch</span>(Location)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">P0=NixieTable[Number];</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="2-动态数码管显示"><a href="#2-动态数码管显示" class="headerlink" title="2. 动态数码管显示"></a>2. 动态数码管显示</h3><p>利用辉光现象造成的人眼视觉残留，不断扫描数码管，来动态显示多位数字。</p><p>可看成静态数码管的快随迭代显示。</p><h4 id="控制原理"><a href="#控制原理" class="headerlink" title="控制原理"></a>控制原理</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230825235013085.png" class="" title="image-20230825235013085"><p>LED1–8的一端直接连在138译码器的输出端</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230825235050273.png" class="" title="image-20230825235050273"><h5 id="1-138译码器："><a href="#1-138译码器：" class="headerlink" title="(1) 138译码器："></a>(1) <strong>138译码器</strong>：</h5><p>实际上就是用3个输入口控制8个输出口,以达到减少I/O口的目的，进而提高工作效率</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230826000937239.png" class="" title="image-20230826000937239"><p>P2_3口，P2_4 口，P2_5口，是”二进制“</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230826001409202.png" class="" title="image-20230826001409202"><h5 id="2-74HC245："><a href="#2-74HC245：" class="headerlink" title="(2) 74HC245："></a>(2) 74HC245：</h5><p>74HC245（双向数据缓冲器）其实是芯片，筛选弱信号通过芯片，过滤掉强信号</p><p>因为低电平的驱动能力强（LED在低电平驱动时远亮与被高电平驱动时）</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230826001941927.png" class="" title="image-20230826001941927"><p>排阻：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230826002212222.png" class="" title="image-20230826002212222"><hr><h4 id="动态显示原理"><a href="#动态显示原理" class="headerlink" title="动态显示原理"></a>动态显示原理</h4><p>控制数码管单独静态显示：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230826000309662.png" class="" title="image-20230826000309662"><p>动态数码管显示就是轮流“静态”显示，利用人的视觉残留从而实现动态效果</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230826000346162.png" class="" title="image-20230826000346162"><h4 id="消影"><a href="#消影" class="headerlink" title="消影"></a>消影</h4><p>即使能够利用视觉残留达成动态显示的效果，实际上依旧存在”窜位“问题</p><p>视觉上”1、2、3“，依旧在闪烁</p><p>这时就需要消影</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-26-22-41-12.jpg" class="" title="capture-2023-08-26-22-41-12"><h4 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230826002348625.png" class="" title="image-20230826002348625"><p>单片机直接扫描数码管：</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 段码表</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> NixieTable[]={<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x77</span>,<span class="number">0x7C</span>,<span class="number">0x39</span>,<span class="number">0x5E</span>,<span class="number">0x79</span>,<span class="number">0x71</span>,<span class="number">0x00</span>};</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态数码管显示函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Location,Number)</span>; </span><br><span class="line"><span class="comment">// 延时函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">Nixie(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line"><span class="comment">//Delay(0.002);</span></span><br><span class="line">Nixie(<span class="number">2</span>,<span class="number">2</span>);</span><br><span class="line"><span class="comment">//Delay(0.002);</span></span><br><span class="line">Nixie(<span class="number">3</span>,<span class="number">3</span>);</span><br><span class="line"><span class="comment">//Delay(0.002);</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Location,Number)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">switch</span>(Location)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">P0=NixieTable[Number];</span><br><span class="line">Delay(<span class="number">1</span>);</span><br><span class="line">P0=<span class="number">0x00</span>;  <span class="comment">//消影，即在段选和位选之间加入清零操作   排除窜位影响，即使窜位也没关系</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">{</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">239</span>;  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="四、模块化编程及LCD1602调试工具"><a href="#四、模块化编程及LCD1602调试工具" class="headerlink" title="四、模块化编程及LCD1602调试工具"></a>四、模块化编程及LCD1602调试工具</h2><h3 id="1-模块化编程"><a href="#1-模块化编程" class="headerlink" title="1.模块化编程"></a>1.模块化编程</h3><h4 id="1-介绍"><a href="#1-介绍" class="headerlink" title="(1) 介绍"></a>(1) 介绍</h4><p>模块化的编程可以提升效率，避免主函数显得冗长，使代码容易阅读。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-26-22-59-18.jpg" class="" title="capture-2023-08-26-22-59-18"><h4 id="2-框图表示"><a href="#2-框图表示" class="headerlink" title="(2) 框图表示"></a>(2) 框图表示</h4><p>模块化编程即使就是一个<strong>预编译</strong>的过程，例如在C语言中经常使用的 </p><p> <mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.452ex;" xmlns="http://www.w3.org/2000/svg" width="25.792ex" height="2.149ex" role="img" focusable="false" viewBox="0 -750 11400 950"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="merror" data-mjx-error="You can't use 'macro parameter character #' in math mode" title="You can't use 'macro parameter character #' in math mode"><rect data-background="true" width="11400" height="950" y="-200"></rect><title>You can't use 'macro parameter character #' in math mode</title><g data-mml-node="mtext" style="font-family: serif;"><text data-variant="-explicitFont" transform="scale(1,-1)" font-size="884px"> #include&lt;stido.h&gt; </text></g></g></g></g></svg></mjx-container>头文件</p><p>实际上，就是把函数的定义与声明分开来，使接口和实现分离开来</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-29-23-13-04.jpg" class="" title="capture-2023-08-29-23-13-04"><h4 id="3-预编译"><a href="#3-预编译" class="headerlink" title="(3) 预编译"></a>(3) 预编译</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-26-23-18-31.jpg" class="" title="capture-2023-08-26-23-18-31"><p>一般来说，预编译的实现如下：</p><p>有两个文件</p><p>一个是以<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="2.309ex" height="1.595ex" role="img" focusable="false" viewBox="0 -694 1020.7 705"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(444.7,0)"><path data-c="210E" d="M137 683Q138 683 209 688T282 694Q294 694 294 685Q294 674 258 534Q220 386 220 383Q220 381 227 388Q288 442 357 442Q411 442 444 415T478 336Q478 285 440 178T402 50Q403 36 407 31T422 26Q450 26 474 56T513 138Q516 149 519 151T535 153Q555 153 555 145Q555 144 551 130Q535 71 500 33Q466 -10 419 -10H414Q367 -10 346 17T325 74Q325 90 361 192T398 345Q398 404 354 404H349Q266 404 205 306L198 293L164 158Q132 28 127 16Q114 -11 83 -11Q69 -11 59 -2T48 16Q48 30 121 320L195 616Q195 629 188 632T149 637H128Q122 643 122 645T124 664Q129 683 137 683Z"></path></g></g></g></svg></mjx-container>结尾的头文件（用于声明函数）</p><p>还有一个是以<mjx-container class="MathJax" jax="SVG"><svg style="vertical-align: -0.025ex;" xmlns="http://www.w3.org/2000/svg" width="1.986ex" height="1.025ex" role="img" focusable="false" viewBox="0 -442 877.7 453"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="2E" d="M78 60Q78 84 95 102T138 120Q162 120 180 104T199 61Q199 36 182 18T139 0T96 17T78 60Z"></path></g><g data-mml-node="mi" transform="translate(444.7,0)"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g></g></g></svg></mjx-container>结尾的C语言文件（用于定义函数）</p><p>.h</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 头文件声明Delay函数</span></span><br><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __DELAY_H__    <span class="comment">// if not define </span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __DELAY_H__   <span class="comment">// define             #ifndef和#define的意义：防止重复包含，使函数只被定义一次，提高效率</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div><p>.c</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// C定义Delay函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Delay</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> xms)</span><span class="comment">//@12.000MHz</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i, j;</span><br><span class="line"><span class="keyword">while</span>(xms--)</span><br><span class="line">{</span><br><span class="line">i = <span class="number">2</span>;</span><br><span class="line">j = <span class="number">239</span>;  </span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">while</span> (--j);</span><br><span class="line">} <span class="keyword">while</span> (--i);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="4-注意事项"><a href="#4-注意事项" class="headerlink" title="(4) 注意事项"></a>(4) 注意事项</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-26-23-07-48.jpg" class="" title="capture-2023-08-26-23-07-48"><p>例如：</p><p>调用的函数一定要声明，否则会报错</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">ifndef</span> __NIXIE_H__</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> __NIXIE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Location,Number)</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span> <span class="comment">// 在数码管Nixie函数的定义中使用了Delay函数，那么在定义时必须引用"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> NixieTable[]={<span class="number">0x3F</span>,<span class="number">0x06</span>,<span class="number">0x5B</span>,<span class="number">0x4F</span>,<span class="number">0x66</span>,<span class="number">0x6D</span>,<span class="number">0x7D</span>,<span class="number">0x07</span>,<span class="number">0x7F</span>,<span class="number">0x6F</span>,<span class="number">0x77</span>,<span class="number">0x7C</span>,<span class="number">0x39</span>,<span class="number">0x5E</span>,<span class="number">0x79</span>,<span class="number">0x71</span>,<span class="number">0x00</span>};</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Nixie</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Location,Number)</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">switch</span>(Location)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">4</span>:P2_4=<span class="number">1</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">5</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">6</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">1</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">7</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">1</span>;<span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">8</span>:P2_4=<span class="number">0</span>;P2_3=<span class="number">0</span>;P2_2=<span class="number">0</span>;<span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line">P0=NixieTable[Number];</span><br><span class="line">Delay(<span class="number">1</span>);  </span><br><span class="line">P0=<span class="number">0x00</span>;  <span class="comment">//消影，即在段选和位选之间加入清零操作   排除窜位影响，即使窜位也没关系</span></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="2-LCD1602调试工具"><a href="#2-LCD1602调试工具" class="headerlink" title="2. LCD1602调试工具"></a>2. LCD1602调试工具</h3><p>在插入LCD显示屏后由于引脚的冲突，数码管将不再亮</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init(); <span class="comment">//初始化</span></span><br><span class="line">LCD_ShowChar(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'A'</span>);     <span class="comment">//在几行几列显示单个字符</span></span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">3</span>,<span class="string">"Hello"</span>);  <span class="comment">//显示字符串</span></span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">9</span>,<span class="string">"ZZH"</span>);</span><br><span class="line"></span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,<span class="number">123</span>,<span class="number">3</span>);  <span class="comment">//显示3位    若显示4位，则为0123，2位为23</span></span><br><span class="line">LCD_ShowSignedNum(<span class="number">2</span>,<span class="number">5</span>,<span class="number">-66</span>,<span class="number">2</span>);  <span class="comment">//符号位不算在内</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>每秒加1</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> a=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init(); <span class="comment">//初始化</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">a++;</span><br><span class="line">Delay(<span class="number">1000</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">1</span>,<span class="number">1</span>,a,<span class="number">3</span>);  <span class="comment">//每秒+1</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="五、-矩阵键盘"><a href="#五、-矩阵键盘" class="headerlink" title="五、 矩阵键盘"></a>五、 矩阵键盘</h2><h3 id="1-MatrixKey简介"><a href="#1-MatrixKey简介" class="headerlink" title="1. MatrixKey简介"></a>1. MatrixKey简介</h3><h4 id="1-矩阵按键"><a href="#1-矩阵按键" class="headerlink" title="(1) 矩阵按键"></a>(1) 矩阵按键</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-30-16-51-14.jpg" class="" title="capture-2023-08-30-16-51-14"><p>这种矩阵按键能很好的节省I/O口，提升工作效率。</p><h5 id="工作方式"><a href="#工作方式" class="headerlink" title="工作方式"></a>工作方式</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-01-23-07-38.jpg" class="" title="capture-2023-09-01-23-07-38"><p>若有多行/列会无法判断</p><h5 id="I-O口原理"><a href="#I-O口原理" class="headerlink" title="I/O口原理"></a>I/O口原理</h5><p>C51的I/O口是<strong>“弱上拉，强下拉”</strong>模式</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-01-23-08-19.jpg" class="" title="capture-2023-09-01-23-08-19"><p><strong>手绘简图介绍：</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-01-23-08-35.jpg" class="" title="capture-2023-09-01-23-08-35"><h4 id="2-扫描"><a href="#2-扫描" class="headerlink" title="(2) 扫描"></a>(2) 扫描</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-08-30-16-36-22.jpg" class="" title="capture-2023-08-30-16-36-22"><p>数码管快速扫描，但是会占用CPU的时间</p><table><thead><tr><th>显示器/手机屏幕：（利用矩阵的方式）对横竖交错的像素点进行扫描</th></tr></thead></table><h4 id="3-MatrixKey代码实现"><a href="#3-MatrixKey代码实现" class="headerlink" title="(3) MatrixKey代码实现"></a>(3) MatrixKey代码实现</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">MatrixKey</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> KeNumber=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一列置“0”</span></span><br><span class="line">P1=<span class="number">0xFF</span>;</span><br><span class="line">P1_3=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//s1的检测</span></span><br><span class="line">    <span class="keyword">if</span>(P1_7==<span class="number">0</span>)  <span class="comment">//判断s1是否按下</span></span><br><span class="line">{</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line"><span class="keyword">while</span>(P1_7==<span class="number">0</span>)  <span class="comment">//消抖，判断s1是否抬起   为“1”时才跳出死循环</span></span><br><span class="line">{</span><br><span class="line">}</span><br><span class="line">Delay(<span class="number">20</span>);</span><br><span class="line">KeyNumber=<span class="number">1</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">return</span> KeyNumber;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"MatrixKey.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 矩阵键盘读取按键键码</span></span><br><span class="line"><span class="comment">  * @param 无</span></span><br><span class="line"><span class="comment">  * @retval KeyNumber 按下按键的键码值</span></span><br><span class="line"><span class="comment">         如果按键按下不放，程序会停留在此函数，松手的一瞬间，返回按键键码，没有按键按下时，返回0</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> KeyNumber;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Hello ZZH"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">KeyNumber=MatrixKey();</span><br><span class="line"><span class="keyword">if</span>(KeyNumber)</span><br><span class="line">{</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,KeyNumber,<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="2-矩阵键盘密码锁"><a href="#2-矩阵键盘密码锁" class="headerlink" title="2. 矩阵键盘密码锁"></a>2. 矩阵键盘密码锁</h3><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Password:"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">KeyNumber=MatrixKey();</span><br><span class="line"><span class="keyword">if</span>(KeyNumber)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(KeyNumber&lt;=<span class="number">10</span>)  <span class="comment">//如果按键S1~S10按键按下，输入密码</span></span><br><span class="line">{</span><br><span class="line">Password*=<span class="number">10</span>;            <span class="comment">//密码左移一位</span></span><br><span class="line">Password+=KeyNumber%<span class="number">10</span>;  <span class="comment">//对10取余，目的是使10被定义为0  获取一位密码</span></span><br><span class="line">}</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,Password,<span class="number">4</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一位 0001 乘10      0010  实现左移</span></span><br></pre></td></tr></table></figure></div><p>简易的密码锁代码L:</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"MatrixKey.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> KeyNumber;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">int</span> Password,Count;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Password:"</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">KeyNumber=MatrixKey();</span><br><span class="line"><span class="keyword">if</span>(KeyNumber)</span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(KeyNumber&lt;=<span class="number">10</span>&amp;&amp;Count&lt;<span class="number">4</span>)  <span class="comment">//如果按键S1~S10按键按下，输入密码 控制密码为4位</span></span><br><span class="line">{</span><br><span class="line">Password*=<span class="number">10</span>;            <span class="comment">//密码左移一位</span></span><br><span class="line">Password+=KeyNumber%<span class="number">10</span>;  <span class="comment">//对10取余，目的是使10被定义为0  获取一位密码</span></span><br><span class="line">Count++;  <span class="comment">//计次加一</span></span><br><span class="line">}</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,Password,<span class="number">4</span>);   <span class="comment">//更新显示</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(KeyNumber==<span class="number">11</span>)  <span class="comment">//如果s11按下，确认密码</span></span><br><span class="line">  {</span><br><span class="line"><span class="keyword">if</span>(Password==<span class="number">521</span>)</span><br><span class="line">{</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">14</span>,<span class="string">"OK "</span>);</span><br><span class="line"><span class="comment">//密码和计次清0</span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"><span class="keyword">else</span>{LCD_ShowString(<span class="number">1</span>,<span class="number">14</span>,<span class="string">"ERR"</span>);}</span><br><span class="line">Password=<span class="number">0</span>;</span><br><span class="line">Count=<span class="number">0</span>;</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,Password,<span class="number">4</span>);   <span class="comment">//更新显示</span></span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line"><span class="comment">//按下取消</span></span><br><span class="line"><span class="keyword">if</span>(KeyNumber==<span class="number">12</span>)</span><br><span class="line">{</span><br><span class="line">Password=<span class="number">0</span>;</span><br><span class="line">Count=<span class="number">0</span>;</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,Password,<span class="number">4</span>);   <span class="comment">//更新显示</span></span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="六、-定时器"><a href="#六、-定时器" class="headerlink" title="六、 定时器"></a>六、 定时器</h2><h3 id="1-定时器"><a href="#1-定时器" class="headerlink" title="1. 定时器"></a>1. 定时器</h3><h4 id="1-简介"><a href="#1-简介" class="headerlink" title="(1)简介"></a>(1)简介</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-09-12-11-18.jpg" class="" title="capture-2023-09-09-12-11-18"><h4 id="2-工作原理及模块"><a href="#2-工作原理及模块" class="headerlink" title="(2)工作原理及模块"></a>(2)工作原理及模块</h4><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-03-15-27-31.jpg" class="" title="capture-2023-09-03-15-27-31"><h5 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-03-15-41-57.jpg" class="" title="capture-2023-09-03-15-41-57"><h5 id="工作模块"><a href="#工作模块" class="headerlink" title="工作模块"></a>工作模块</h5><p><strong>时钟</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-09-12-18-12.jpg" class="" title="capture-2023-09-09-12-18-12"><p><strong>计数系统和中断系统</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-09-12-18-21.jpg" class="" title="capture-2023-09-09-12-18-21"><p><strong>整体</strong></p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-09-12-18-55.jpg" class="" title="capture-2023-09-09-12-18-55"><h5 id="定时器时钟"><a href="#定时器时钟" class="headerlink" title="定时器时钟"></a>定时器时钟</h5><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-09-12-19-14.jpg" class="" title="capture-2023-09-09-12-19-14"><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-09-12-19-27.jpg" class="" title="capture-2023-09-09-12-19-27"><p>定时器0的代码：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230906193453149.png" class="" title="image-20230906193453149"><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Timer0Init</span><span class="params">(<span class="type">void</span>)</span><span class="comment">//1毫秒@12.000MHz</span></span><br><span class="line">{</span><br><span class="line">AUXR &amp;= <span class="number">0xF0</span>;<span class="comment">//定时器时钟1T模式</span></span><br><span class="line">TMOD |= <span class="number">0x01</span>;<span class="comment">//设置定时器模式</span></span><br><span class="line">TL0 = <span class="number">0x18</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">TF0 = <span class="number">0</span>;<span class="comment">//清除TF0标志</span></span><br><span class="line">TR0 = <span class="number">1</span>;<span class="comment">//定时器0开始计时</span></span><br><span class="line">ET0=<span class="number">1</span>;</span><br><span class="line">EA=<span class="number">1</span>;</span><br><span class="line">PT0=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h5 id="中断系统"><a href="#中断系统" class="headerlink" title="中断系统"></a>中断系统</h5><p>流程图如下：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-03-20-28-19.jpg" class="" title="capture-2023-09-03-20-28-19"><p>单片机中的中断资源</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/capture-2023-09-04-10-47-41.jpg" class="" title="capture-2023-09-04-10-47-41"><hr><p><strong>注意：</strong></p><p>1.中断函数一般都比较“短”，执行的都是一些简单的自增或是赋值操作，因为时间较长的话会影响main函数，即<strong>不分主次</strong></p><p>2.中断函数不能有形参和返回值</p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//中断子程序，加上“interrupt+中断号” 普通子函数就变成了终端服务子函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Routine</span><span class="params">()</span> interrupt 1</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="2-按键控制LED流水灯模式-定时器时钟"><a href="#2-按键控制LED流水灯模式-定时器时钟" class="headerlink" title="2. 按键控制LED流水灯模式&定时器时钟"></a>2. 按键控制LED流水灯模式&amp;定时器时钟</h3><h4 id="按键控制LED流水灯模式"><a href="#按键控制LED流水灯模式" class="headerlink" title="按键控制LED流水灯模式"></a>按键控制LED流水灯模式</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Timer0.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Key.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;INTRINS.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> KeyNum,LEDMode;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">P2=<span class="number">0xFE</span>;  <span class="comment">//给初值，最低位给0，点亮最低位LED</span></span><br><span class="line">Timer0Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">KeyNum=Key();<span class="comment">//获取独立按键键码</span></span><br><span class="line"><span class="keyword">if</span>(KeyNum)<span class="comment">//如果按键按下</span></span><br><span class="line">{</span><br><span class="line"><span class="keyword">if</span>(KeyNum==<span class="number">1</span>)<span class="comment">//如果K1按键按下</span></span><br><span class="line">{</span><br><span class="line">LEDMode++;<span class="comment">//模式切换，进行0，1循环</span></span><br><span class="line"><span class="keyword">if</span>(LEDMode&gt;=<span class="number">2</span>)LEDMode=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Routine</span><span class="params">()</span> interrupt 1</span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> T0Count;</span><br><span class="line">TL0 = <span class="number">0x18</span>;<span class="comment">//设置定时初值，清空计时器</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">T0Count++;<span class="comment">//T0Count计次，对中断频率进行分频</span></span><br><span class="line"><span class="keyword">if</span>(T0Count&gt;=<span class="number">500</span>)<span class="comment">//分频500次，500ms</span></span><br><span class="line">{</span><br><span class="line">T0Count=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(LEDMode==<span class="number">0</span>)<span class="comment">//模式判断</span></span><br><span class="line">P2=_crol_(P2,<span class="number">1</span>);<span class="comment">//LED输出   crol--循环左移   cror--循环右移         </span></span><br><span class="line"><span class="keyword">if</span>(LEDMode==<span class="number">1</span>)</span><br><span class="line">P2=_cror_(P2,<span class="number">1</span>);</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><p>注意</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">_crol_( , )  </span><br><span class="line">这两个函数均为循环移位函数，可循环（左/右）移动二进制位 0x01 》0x02》0x04   若移到最高位则循环</span><br></pre></td></tr></table></figure></div><h4 id="定时器时钟代码实现"><a href="#定时器时钟代码实现" class="headerlink" title="定时器时钟代码实现"></a>定时器时钟代码实现</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"LCD1602.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Timer0.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Sec=<span class="number">58</span>,Min=<span class="number">56</span>,Hour=<span class="number">22</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">LCD_Init();</span><br><span class="line">Timer0Init();</span><br><span class="line">LCD_ShowString(<span class="number">1</span>,<span class="number">1</span>,<span class="string">"Clock:"</span>);</span><br><span class="line">LCD_ShowString(<span class="number">2</span>,<span class="number">1</span>,<span class="string">"  :  :"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">7</span>,Sec,<span class="number">2</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">4</span>,Min,<span class="number">2</span>);</span><br><span class="line">LCD_ShowNum(<span class="number">2</span>,<span class="number">1</span>,Hour,<span class="number">2</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定时器中断函数模板</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">Timer0_Routine</span><span class="params">()</span> interrupt 1</span><br><span class="line">{</span><br><span class="line"><span class="type">static</span> <span class="type">unsigned</span> <span class="type">int</span> T0Count;</span><br><span class="line">TL0 = <span class="number">0x18</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">TH0 = <span class="number">0xFC</span>;<span class="comment">//设置定时初值</span></span><br><span class="line">T0Count++;</span><br><span class="line"><span class="keyword">if</span>(T0Count&gt;=<span class="number">1000</span>)</span><br><span class="line">{</span><br><span class="line">T0Count=<span class="number">0</span>;</span><br><span class="line">Sec++;</span><br><span class="line"><span class="keyword">if</span>(Sec&gt;=<span class="number">60</span>)</span><br><span class="line">{</span><br><span class="line">Sec=<span class="number">0</span>;</span><br><span class="line">Min++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(Min&gt;=<span class="number">60</span>)</span><br><span class="line">{</span><br><span class="line">Min=<span class="number">0</span>;</span><br><span class="line">Hour++;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">if</span>(Hour&gt;=<span class="number">24</span>)</span><br><span class="line">{</span><br><span class="line">Hour=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="七、串口"><a href="#七、串口" class="headerlink" title="七、串口"></a>七、串口</h2><h3 id="1-串口通信"><a href="#1-串口通信" class="headerlink" title="1.串口通信"></a>1.串口通信</h3><h3 id="2-串口向电脑发送数据-电脑通过串口控制LED"><a href="#2-串口向电脑发送数据-电脑通过串口控制LED" class="headerlink" title="2.串口向电脑发送数据&电脑通过串口控制LED"></a>2.串口向电脑发送数据&amp;电脑通过串口控制LED</h3><h4 id="串口每隔一秒向电脑发送数据"><a href="#串口每隔一秒向电脑发送数据" class="headerlink" title="串口每隔一秒向电脑发送数据"></a>串口每隔一秒向电脑发送数据</h4><table><thead><tr><th>串口初始化函数模块</th></tr></thead></table><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 串口初始化</span></span><br><span class="line"><span class="comment">  * @param 无</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Init</span><span class="params">()</span>   <span class="comment">//4800bps@11.0592MHz</span></span><br><span class="line">{</span><br><span class="line">SCON=<span class="number">0x40</span>;     <span class="comment">//使能波特率倍速位SMOD</span></span><br><span class="line">PCON|=<span class="number">0x80</span>;    <span class="comment">//8位数据，可变波特率</span></span><br><span class="line">TMOD &amp;= <span class="number">0x0F</span>;<span class="comment">//设置定时器模式，清除定时器1模式位</span></span><br><span class="line">TMOD |= <span class="number">0x20</span>;<span class="comment">//设置定时器模式，设置定时器1为8位自动重装方式</span></span><br><span class="line">TL1 = <span class="number">0xF4</span>;  <span class="comment">//设置定时初值</span></span><br><span class="line">TH1 = <span class="number">0xF4</span>;  <span class="comment">//设置定时初值</span></span><br><span class="line">ET1= <span class="number">0</span>;    <span class="comment">//禁止定时器1中断</span></span><br><span class="line">TR1=<span class="number">1</span>;        <span class="comment">//启动定时器1 </span></span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief 串口发送一个字节数据</span></span><br><span class="line"><span class="comment">  * @param Byte 要发送的一个字节数据</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_SendByte</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Byte)</span></span><br><span class="line">{</span><br><span class="line">SBUF=Byte;  <span class="comment">//只需要将数据写入SBUF，她就会自动发送</span></span><br><span class="line"><span class="comment">//检测是否完成</span></span><br><span class="line"><span class="keyword">while</span>(TI==<span class="number">0</span>);</span><br><span class="line">TI=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><strong>主函数：</strong></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"UART.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Sec;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">UART_Init();  <span class="comment">//循环之前进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">UART_SendByte(Sec);</span><br><span class="line">Sec++;</span><br><span class="line">Delay(<span class="number">1000</span>);</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h4 id="电脑通过串口控制LED"><a href="#电脑通过串口控制LED" class="headerlink" title="电脑通过串口控制LED"></a>电脑通过串口控制LED</h4><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"UART.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">UART_Init();  <span class="comment">//循环之前进行初始化</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">UART_Routine</span><span class="params">()</span> interrupt 4</span><br><span class="line">{</span><br><span class="line"><span class="comment">//判断是否是“读SBUF”，即接受中断   因为发送也会触发中断，为了区分开发送与接受</span></span><br><span class="line"><span class="keyword">if</span>(RI==<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">P2=~SBUF;</span><br><span class="line">UART_SendByte(SBUF);</span><br><span class="line">RI=<span class="number">0</span>; <span class="comment">//软件检测1后清零</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="八、LED点阵屏"><a href="#八、LED点阵屏" class="headerlink" title="八、LED点阵屏"></a>八、LED点阵屏</h2><p><strong>点阵屏显示笑脸：</strong></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sbit RCK=P3^<span class="number">5</span>;  <span class="comment">//RCLK</span></span><br><span class="line">sbit SCK=P3^<span class="number">6</span>;  <span class="comment">//SRCLK</span></span><br><span class="line">sbit SER=P3^<span class="number">4</span>;  <span class="comment">//SER</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MATRIX_LED_PORT  P0     <span class="comment">//定义P0口，因为它是一个寄存器（不能进行sbit声明）便于后续统一操作(只需修改串口，如P0)</span></span></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief  74HC595写入一个字节</span></span><br><span class="line"><span class="comment">  * @param  要写入的一个字节</span></span><br><span class="line"><span class="comment">  * @retval 无</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//将参数写入8个引脚，给其赋值</span></span><br><span class="line"><span class="type">void</span> _74HC595_WriteByte(<span class="type">unsigned</span> <span class="type">char</span> Byte)</span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">SER=Byte&amp;(<span class="number">0x80</span>&gt;&gt;i);  <span class="comment">//最高位为1时赋值为0x80......</span></span><br><span class="line">SCK=<span class="number">1</span>;    <span class="comment">//给高电平上推，上升沿移位</span></span><br><span class="line">SCK=<span class="number">0</span>;  <span class="comment">//清零</span></span><br><span class="line">}</span><br><span class="line">RCK=<span class="number">1</span>;  <span class="comment">//8位数据移位</span></span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * @brief   LED点阵屏显示一列</span></span><br><span class="line"><span class="comment">  * @param   Column 要选择的列，范围：0~7，0在最左边</span></span><br><span class="line"><span class="comment">* @retval  Data 选择的列所显示的数据，高位在上，1为亮，0为灭</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">MatrixLED_ShowColumn</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> Column,Date)</span></span><br><span class="line">{</span><br><span class="line">_74HC595_WriteByte(Date);</span><br><span class="line">MATRIX_LED_PORT=~(<span class="number">0x80</span>&gt;&gt;Column); <span class="comment">//取反，保持0亮，1灭</span></span><br><span class="line">Delay(<span class="number">1</span>);</span><br><span class="line">MATRIX_LED_PORT=<span class="number">0xFF</span>; <span class="comment">//位选清零，防止串位</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line">SCK=<span class="number">0</span>;</span><br><span class="line">RCK=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">0</span>,<span class="number">0x3C</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">1</span>,<span class="number">0x42</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">2</span>,<span class="number">0xA9</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">3</span>,<span class="number">0x85</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">4</span>,<span class="number">0x85</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">5</span>,<span class="number">0xA9</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">6</span>,<span class="number">0x42</span>);</span><br><span class="line">MatrixLED_ShowColumn(<span class="number">7</span>,<span class="number">0x3C</span>);</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230924140145902.png" class="" title="image-20230924140145902"><p><strong>使用文字取模软件来读取点阵数据</strong></p><p>横向取模，高位在上（不用选取字节倒序）</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230924140404107.png" class="" title="image-20230924140404107"><p>C51自动生成</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/15/MCU-Study/image-20230924182658752.png" class="" title="image-20230924182658752"><p><strong>动态动画显示：</strong></p><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;REGX52.H&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"Delay.h"</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">"MatrixLED.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// unsigned char code Animation   这里加上code后会把数组存储在Flash中，内存更大，但是，不可写入，只能读取（原来存储在RAM中，有溢出的风险）</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> Animation[]={</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0xFF</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0x18</span>,<span class="number">0xFF</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x15</span>,</span><br><span class="line"><span class="number">0x15</span>,<span class="number">0x15</span>,<span class="number">0x09</span>,<span class="number">0x00</span>,<span class="number">0x7E</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x7E</span>,<span class="number">0x01</span>,<span class="number">0x02</span>,<span class="number">0x00</span>,<span class="number">0x0E</span>,<span class="number">0x11</span>,<span class="number">0x11</span>,<span class="number">0x0E</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x7D</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line"><span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,<span class="number">0x00</span>,</span><br><span class="line">};  </span><br><span class="line"><span class="comment">//存放动画的数据，逐帧偏移即可实现动态效果</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">{</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> i,Offset,Count=<span class="number">0</span>;</span><br><span class="line">MatrixLED_Init();</span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">{</span><br><span class="line"><span class="comment">//显示静态图像</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">{</span><br><span class="line">MatrixLED_ShowColumn(i,Animation[i+Offset]);</span><br><span class="line">}</span><br><span class="line">Count++;</span><br><span class="line">        <span class="comment">//延时</span></span><br><span class="line"><span class="keyword">if</span>(Count&gt;<span class="number">10</span>)</span><br><span class="line">{</span><br><span class="line">Count=<span class="number">0</span>;</span><br><span class="line">Offset++; <span class="comment">//逐帧移动</span></span><br><span class="line"><span class="keyword">if</span>(Offset&gt;<span class="number">40</span>)</span><br><span class="line">{</span><br><span class="line">Offset=<span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="九、DS1302实时时钟"><a href="#九、DS1302实时时钟" class="headerlink" title="九、DS1302实时时钟"></a>九、DS1302实时时钟</h2><div class="highlight-container" data-rel="C"><figure class="iseeu highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">111</span></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;Contents&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;[TOC]&lt;/p&gt;
&lt;h1 id=&quot;Part1–初识MCU&quot;&gt;&lt;a href=&quot;#Part1–初识MCU&quot; class=&quot;headerlink&quot; title=&quot;Part1–初识MCU&quot;&gt;&lt;/a&gt;Part1–初</summary>
      
    
    
    
    <category term="MCU" scheme="http://example.com/categories/MCU/"/>
    
    
    <category term="MCU" scheme="http://example.com/tags/MCU/"/>
    
  </entry>
  
  <entry>
    <title>Theorem</title>
    <link href="http://example.com/2023/07/08/Theorem/"/>
    <id>http://example.com/2023/07/08/Theorem/</id>
    <published>2023-07-08T07:49:51.000Z</published>
    <updated>2023-08-07T11:03:27.424Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Theorem-in-Crypto"><a href="#Theorem-in-Crypto" class="headerlink" title="Theorem in Crypto"></a>Theorem in Crypto</h1><h2 id="一、Fermat’s-Little-Theorem（费马小定理）"><a href="#一、Fermat’s-Little-Theorem（费马小定理）" class="headerlink" title="一、Fermat’s Little Theorem（费马小定理）"></a>一、Fermat’s Little Theorem（费马小定理）</h2><h4 id="1-定理内容"><a href="#1-定理内容" class="headerlink" title="1.定理内容"></a>1.定理内容</h4><p>如果p是质数，并且a不是p的倍数。那么就有<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="15.541ex" height="2.565ex" role="img" focusable="false" viewBox="0 -883.9 6868.9 1133.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1281,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g></g></g><g data-mml-node="mo" transform="translate(2149.1,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mn" transform="translate(3204.9,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(3704.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4093.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4971.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(5456.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5976.9,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(6479.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container></p><p>对于正整数a和p，如果有<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="13.798ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 6098.6 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(529,0)"><path data-c="1D465" d="M52 289Q59 331 106 386T222 442Q257 442 286 424T329 379Q371 442 430 442Q467 442 494 420T522 361Q522 332 508 314T481 292T458 288Q439 288 427 299T415 328Q415 374 465 391Q454 404 425 404Q412 404 406 402Q368 386 350 336Q290 115 290 78Q290 50 306 38T341 26Q378 26 414 59T463 140Q466 150 469 151T485 153H489Q504 153 504 145Q504 144 502 134Q486 77 440 33T333 -11Q263 -11 227 52Q186 -10 133 -10H127Q78 -10 57 16T35 71Q35 103 54 123T99 143Q142 143 142 101Q142 81 130 66T107 46T94 41L91 40Q91 39 97 36T113 29T132 26Q168 26 194 71Q203 87 217 139T245 247T261 313Q266 340 266 352Q266 380 251 392T217 404Q177 404 142 372T93 290Q91 281 88 280T72 278H58Q52 284 52 289Z"></path></g><g data-mml-node="mo" transform="translate(1378.8,0)"><path data-c="2261" d="M56 444Q56 457 70 464H707Q722 456 722 444Q722 430 706 424H72Q56 429 56 444ZM56 237T56 250T70 270H707Q722 262 722 250T707 230H70Q56 237 56 250ZM56 56Q56 71 72 76H706Q722 70 722 56Q722 44 707 36H70Q56 43 56 56Z"></path></g><g data-mml-node="mn" transform="translate(2434.6,0)"><path data-c="31" d="M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z"></path></g><g data-mml-node="mo" transform="translate(2934.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(3323.6,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(4201.6,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(4686.6,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(5206.6,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(5709.6,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g></g></g></svg></mjx-container><br>，那么称x的最小整数解为a模p的逆元</p><p>由上面的结论我们可以得到a的逆元其实就是<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.023ex;" xmlns="http://www.w3.org/2000/svg" width="4.234ex" height="2.022ex" role="img" focusable="false" viewBox="0 -883.9 1871.4 893.9"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msup"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="TeXAtom" transform="translate(562,413) scale(0.707)" data-mjx-texclass="ORD"><g data-mml-node="mi"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(503,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mn" transform="translate(1281,0)"><path data-c="32" d="M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z"></path></g></g></g></g></g></svg></mjx-container><br>  对于这个数我们可以使用快速幂来计算结果</p><h4 id="2-费马小定理的运用"><a href="#2-费马小定理的运用" class="headerlink" title="2.费马小定理的运用"></a>2.费马小定理的运用</h4><p> 费马小定理可以用来解决求组合数的问题，在求解组合数的时候，我们虽然可以通过使用杨辉三角来进行求解，但是在一些情况下我们经常需要去求解一个组合数的模，但是那些阶乘超过了我们的运算范围，也需要对它们进行取模，可是这个时候上下同时进行取模的结果是错误的结果。下面我们来进行 a b m o d   p \frac{a}{b}mod\space p<br>b<br>a</p><p> mod p 的正确求解操作</p><p> 首先有一个前提条件是a mod b = 0 a/b = m</p><p> 假设存在一个数使得ax%p = m</p><p> 由于模运算对于乘法是有效的，所以两边同时乘上b，得到a%p = (m%p)*(b%p)%p</p><p> 两边再同时乘以x，得到m%p = (mb)*x%p，得到 1 = bx%p, 所以我们可以知道这个x其实就是b的逆元，基于这个结论我们可以得到求解<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -1.577ex;" xmlns="http://www.w3.org/2000/svg" width="24.606ex" height="4.104ex" role="img" focusable="false" viewBox="0 -1117 10875.7 1814"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mfrac"><g data-mml-node="mi" transform="translate(220,676)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mi" transform="translate(270,-686)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><rect width="729" height="60" x="120" y="220"></rect></g><g data-mml-node="mspace" transform="translate(969,0)"></g><g data-mml-node="mi" transform="translate(1969,0)"><path data-c="6D" d="M41 46H55Q94 46 102 60V68Q102 77 102 91T102 122T103 161T103 203Q103 234 103 269T102 328V351Q99 370 88 376T43 385H25V408Q25 431 27 431L37 432Q47 433 65 434T102 436Q119 437 138 438T167 441T178 442H181V402Q181 364 182 364T187 369T199 384T218 402T247 421T285 437Q305 442 336 442Q351 442 364 440T387 434T406 426T421 417T432 406T441 395T448 384T452 374T455 366L457 361L460 365Q463 369 466 373T475 384T488 397T503 410T523 422T546 432T572 439T603 442Q729 442 740 329Q741 322 741 190V104Q741 66 743 59T754 49Q775 46 803 46H819V0H811L788 1Q764 2 737 2T699 3Q596 3 587 0H579V46H595Q656 46 656 62Q657 64 657 200Q656 335 655 343Q649 371 635 385T611 402T585 404Q540 404 506 370Q479 343 472 315T464 232V168V108Q464 78 465 68T468 55T477 49Q498 46 526 46H542V0H534L510 1Q487 2 460 2T422 3Q319 3 310 0H302V46H318Q379 46 379 62Q380 64 380 200Q379 335 378 343Q372 371 358 385T334 402T308 404Q263 404 229 370Q202 343 195 315T187 232V168V108Q187 78 188 68T191 55T200 49Q221 46 249 46H265V0H257L234 1Q210 2 183 2T145 3Q42 3 33 0H25V46H41Z"></path><path data-c="6F" d="M28 214Q28 309 93 378T250 448Q340 448 405 380T471 215Q471 120 407 55T250 -10Q153 -10 91 57T28 214ZM250 30Q372 30 372 193V225V250Q372 272 371 288T364 326T348 362T317 390T268 410Q263 411 252 411Q222 411 195 399Q152 377 139 338T126 246V226Q126 130 145 91Q177 30 250 30Z" transform="translate(833,0)"></path><path data-c="64" d="M376 495Q376 511 376 535T377 568Q377 613 367 624T316 637H298V660Q298 683 300 683L310 684Q320 685 339 686T376 688Q393 689 413 690T443 693T454 694H457V390Q457 84 458 81Q461 61 472 55T517 46H535V0Q533 0 459 -5T380 -11H373V44L365 37Q307 -11 235 -11Q158 -11 96 50T34 215Q34 315 97 378T244 442Q319 442 376 393V495ZM373 342Q328 405 260 405Q211 405 173 369Q146 341 139 305T131 211Q131 155 138 120T173 59Q203 26 251 26Q322 26 373 103V342Z" transform="translate(1333,0)"></path></g><g data-mml-node="mstyle" transform="translate(3858,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mstyle" transform="translate(4025,0)"><g data-mml-node="mspace"></g></g><g data-mml-node="mi" transform="translate(4358.7,0)"><path data-c="1D45D" d="M23 287Q24 290 25 295T30 317T40 348T55 381T75 411T101 433T134 442Q209 442 230 378L240 387Q302 442 358 442Q423 442 460 395T497 281Q497 173 421 82T249 -10Q227 -10 210 -4Q199 1 187 11T168 28L161 36Q160 35 139 -51T118 -138Q118 -144 126 -145T163 -148H188Q194 -155 194 -157T191 -175Q188 -187 185 -190T172 -194Q170 -194 161 -194T127 -193T65 -192Q-5 -192 -24 -194H-32Q-39 -187 -39 -183Q-37 -156 -26 -148H-6Q28 -147 33 -136Q36 -130 94 103T155 350Q156 355 156 364Q156 405 131 405Q109 405 94 377T71 316T59 280Q57 278 43 278H29Q23 284 23 287ZM178 102Q200 26 252 26Q282 26 310 49T356 107Q374 141 392 215T411 325V331Q411 405 350 405Q339 405 328 402T306 393T286 380T269 365T254 350T243 336T235 326L232 322Q232 321 229 308T218 264T204 212Q178 106 178 102Z"></path></g><g data-mml-node="mo" transform="translate(5139.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(6195.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(6946.4,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(7446.7,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(7875.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">的</text></g><g data-mml-node="mi" transform="translate(8875.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">逆</text></g><g data-mml-node="mi" transform="translate(9875.7,0)"><text data-variant="normal" transform="scale(1,-1)" font-size="884px" font-family="serif">元</text></g></g></g></svg></mjx-container><br> 所以对于组合数<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -2.172ex;" xmlns="http://www.w3.org/2000/svg" width="31.045ex" height="5.321ex" role="img" focusable="false" viewBox="0 -1392 13722 2352"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="msubsup"><g data-mml-node="mi"><path data-c="1D436" d="M50 252Q50 367 117 473T286 641T490 704Q580 704 633 653Q642 643 648 636T656 626L657 623Q660 623 684 649Q691 655 699 663T715 679T725 690L740 705H746Q760 705 760 698Q760 694 728 561Q692 422 692 421Q690 416 687 415T669 413H653Q647 419 647 422Q647 423 648 429T650 449T651 481Q651 552 619 605T510 659Q484 659 454 652T382 628T299 572T226 479Q194 422 175 346T156 222Q156 108 232 58Q280 24 350 24Q441 24 512 92T606 240Q610 253 612 255T628 257Q648 257 648 248Q648 243 647 239Q618 132 523 55T319 -22Q206 -22 128 53T50 252Z"></path></g><g data-mml-node="mi" transform="translate(845.3,413) scale(0.707)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mi" transform="translate(748,-247) scale(0.707)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g></g><g data-mml-node="mo" transform="translate(1476.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mfrac" transform="translate(2532.2,0)"><g data-mml-node="mrow" transform="translate(1788.2,676)"><g data-mml-node="mi"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(529,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><g data-mml-node="mrow" transform="translate(220,-710)"><g data-mml-node="mi"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(429,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(707,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(1096,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(1847.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2847.4,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(3276.4,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(3665.4,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g><rect width="4143.4" height="60" x="120" y="220"></rect></g><g data-mml-node="mo" transform="translate(7193.4,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="mi" transform="translate(8249.2,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(8778.2,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(9278.4,0)"><path data-c="22C5" d="M78 250Q78 274 95 292T138 310Q162 310 180 294T199 251Q199 226 182 208T139 190T96 207T78 250Z"></path></g><g data-mml-node="mi" transform="translate(9778.6,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(10207.6,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g><g data-mml-node="mo" transform="translate(10485.6,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(10874.6,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(11625.8,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(12626,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(13055,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(13444,0)"><path data-c="21" d="M78 661Q78 682 96 699T138 716T180 700T199 661Q199 654 179 432T158 206Q156 198 139 198Q121 198 119 206Q118 209 98 431T78 661ZM79 61Q79 89 97 105T141 121Q164 119 181 104T198 61Q198 31 181 16T139 1Q114 1 97 16T79 61Z"></path></g></g></g></svg></mjx-container><br>对于p的逆元</p><p><strong>在RSA的ctf题目中总有其用武之地</strong></p><h2 id="二、Chinese-remainder-theorem（中国剩余定理）"><a href="#二、Chinese-remainder-theorem（中国剩余定理）" class="headerlink" title="二、Chinese remainder theorem（中国剩余定理）"></a>二、Chinese remainder theorem（中国剩余定理）</h2><h3 id="1-定理内容-1"><a href="#1-定理内容-1" class="headerlink" title="1.定理内容"></a>1.定理内容</h3><p>在《孙子算经》中有这样一个问题：“今有物不知其数，三三数之剩二（除以3余2），五五数之剩三（除以5余3），七七数之剩二（除以7余2），问物几何？”这个问题称为“孙子问题”，该问题的一般解法国际上称为“中国剩余定理”。具体解法分三步：</p><ol><li><ol><li>找出三个数：从3和5的公倍数中找出被7除余1的最小数15，从3和7的公倍数中找出被5除余1 的最小数21，最后从5和7的公倍数中找出除3余1的最小数70。</li><li>用15乘以2（2为最终结果除以7的余数），用21乘以3（3为最终结果除以5的余数），同理，用70乘以2（2为最终结果除以3的余数），然后把三个乘积相加15∗2+21∗3+70∗215∗2+21∗3+70∗2得到和233。</li><li>用233除以3，5，7三个数的最小公倍数105，得到余数23，即233%105=23233%105=23。这个余数23就是符合条件的最小数。</li></ol></li></ol><p>　　就这么简单。我们在感叹神奇的同时不禁想知道古人是如何想到这个方法的，有什么基本的数学依据吗？</p><p>　　我们将“孙子问题”拆分成几个简单的小问题，从零开始，试图揣测古人是如何推导出这个解法的。</p><p>　　首先，我们假设n1是满足除以3余2的一个数，比如2，5，8等等，也就是满足3∗k+2（k&gt;=0）的一个任意数。同样，我们假设n2是满足除以5余3的一个数，n3是满足除以7余2的一个数。</p><p>　　有了前面的假设，我们先从n1这个角度出发，已知n1满足除以3余2，能不能使得n1+n2的和仍然满足除以3余2？进而使得n1+n2+n3的和仍然满足除以3余2？</p><p>　　这就牵涉到一个最基本数学定理，如果有a%b=c，则有(a+k∗b)%b=c(k为非零整数)，换句话说，如果一个除法运算的余数为c�，那么被除数与k倍的除数相加（或相减）的和（差）再与除数相除，余数不变。这个是很好证明的。</p><p>　　以此定理为依据，如果n2是3的倍数，n1+n2就依然满足除以3余2。同理，如果n3也是3的倍数，那么n1+n2+n3的和就满足除以3余2。这是从n1的角度考虑的，再从n2，n3的角度出发，我们可推导出以下三点：</p><ol><li><ol><li>为使n1+n2+n3的和满足除以3余2，n2和n3必须是3的倍数。</li><li>为使n1+n2+n3的和满足除以5余3，n1和n3必须是5的倍数。</li><li>为使n1+n2+n3的和满足除以7余2，n1和n2必须是7的倍数。</li></ol></li></ol><p>　　因此，为使n1+n2+n3的和作为“孙子问题”的一个最终解，需满足：</p><ol><li><ol><li>n1除以3余2，且是5和7的公倍数。</li><li>n2除以5余3，且是3和7的公倍数。</li><li>n3除以7余2，且是3和5的公倍数。</li></ol></li></ol><p>　　所以，孙子问题解法的本质是从5和7的公倍数中找一个除以3余2的数n1，从3和7的公倍数中找一个除以5余3的数n2，从3和5的公倍数中找一个除以7余2的数n3，再将三个数相加得到解。在求n1，n2，n3时又用了一个小技巧，以n1为例，并非从5和7的公倍数中直接找一个除以3余2的数，而是先找一个除以3余1的数，再乘以2。也就是<strong>先求出5和7的公倍数模3下的逆元，再用逆元去乘余数</strong>。</p><p>　　这里又有一个数学公式，如果a%b=c，那么(a∗k)%b=a%b+a%b+…+a%b=c+c+…+c=k∗c(k&gt;0),也就是说，如果一个除法的余数为c�，那么被除数的k倍与除数相除的余数为k∗c。展开式中已证明。</p><p>　　最后，我们还要清楚一点，n1+n2+n3只是问题的一个解，并不是最小的解。如何得到最小解？我们只需要从中最大限度的减掉掉3，5，7的公倍数105即可。道理就是前面讲过的定理“如果a%b=c，则有<br><mjx-container class="MathJax" jax="SVG" display="true"><svg style="vertical-align: -0.566ex;" xmlns="http://www.w3.org/2000/svg" width="22.144ex" height="2.262ex" role="img" focusable="false" viewBox="0 -750 9787.7 1000"><g stroke="currentColor" fill="currentColor" stroke-width="0" transform="scale(1,-1)"><g data-mml-node="math"><g data-mml-node="mo"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(389,0)"><path data-c="1D44E" d="M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z"></path></g><g data-mml-node="mo" transform="translate(1140.2,0)"><path data-c="2212" d="M84 237T84 250T98 270H679Q694 262 694 250T679 230H98Q84 237 84 250Z"></path></g><g data-mml-node="mi" transform="translate(2140.4,0)"><path data-c="1D458" d="M121 647Q121 657 125 670T137 683Q138 683 209 688T282 694Q294 694 294 686Q294 679 244 477Q194 279 194 272Q213 282 223 291Q247 309 292 354T362 415Q402 442 438 442Q468 442 485 423T503 369Q503 344 496 327T477 302T456 291T438 288Q418 288 406 299T394 328Q394 353 410 369T442 390L458 393Q446 405 434 405H430Q398 402 367 380T294 316T228 255Q230 254 243 252T267 246T293 238T320 224T342 206T359 180T365 147Q365 130 360 106T354 66Q354 26 381 26Q429 26 459 145Q461 153 479 153H483Q499 153 499 144Q499 139 496 130Q455 -11 378 -11Q333 -11 305 15T277 90Q277 108 280 121T283 145Q283 167 269 183T234 206T200 217T182 220H180Q168 178 159 139T145 81T136 44T129 20T122 7T111 -2Q98 -11 83 -11Q66 -11 57 -1T48 16Q48 26 85 176T158 471L195 616Q196 629 188 632T149 637H144Q134 637 131 637T124 640T121 647Z"></path></g><g data-mml-node="mo" transform="translate(2883.7,0)"><path data-c="2217" d="M229 286Q216 420 216 436Q216 454 240 464Q241 464 245 464T251 465Q263 464 273 456T283 436Q283 419 277 356T270 286L328 328Q384 369 389 372T399 375Q412 375 423 365T435 338Q435 325 425 315Q420 312 357 282T289 250L355 219L425 184Q434 175 434 161Q434 146 425 136T401 125Q393 125 383 131T328 171L270 213Q283 79 283 63Q283 53 276 44T250 35Q231 35 224 44T216 63Q216 80 222 143T229 213L171 171Q115 130 110 127Q106 124 100 124Q87 124 76 134T64 161Q64 166 64 169T67 175T72 181T81 188T94 195T113 204T138 215T170 230T210 250L74 315Q65 324 65 338Q65 353 74 363T98 374Q106 374 116 368T171 328L229 286Z"></path></g><g data-mml-node="mi" transform="translate(3605.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(4034.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(4423.9,0)"><path data-c="28" d="M94 250Q94 319 104 381T127 488T164 576T202 643T244 695T277 729T302 750H315H319Q333 750 333 741Q333 738 316 720T275 667T226 581T184 443T167 250T184 58T225 -81T274 -167T316 -220T333 -241Q333 -250 318 -250H315H302L274 -226Q180 -141 137 -14T94 250Z"></path></g><g data-mml-node="mi" transform="translate(4812.9,0)"><path data-c="1D45A" d="M21 287Q22 293 24 303T36 341T56 388T88 425T132 442T175 435T205 417T221 395T229 376L231 369Q231 367 232 367L243 378Q303 442 384 442Q401 442 415 440T441 433T460 423T475 411T485 398T493 385T497 373T500 364T502 357L510 367Q573 442 659 442Q713 442 746 415T780 336Q780 285 742 178T704 50Q705 36 709 31T724 26Q752 26 776 56T815 138Q818 149 821 151T837 153Q857 153 857 145Q857 144 853 130Q845 101 831 73T785 17T716 -10Q669 -10 648 17T627 73Q627 92 663 193T700 345Q700 404 656 404H651Q565 404 506 303L499 291L466 157Q433 26 428 16Q415 -11 385 -11Q372 -11 364 -4T353 8T350 18Q350 29 384 161L420 307Q423 322 423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 181Q151 335 151 342Q154 357 154 369Q154 405 129 405Q107 405 92 377T69 316T57 280Q55 278 41 278H27Q21 284 21 287Z"></path></g><g data-mml-node="mi" transform="translate(5690.9,0)"><path data-c="1D45C" d="M201 -11Q126 -11 80 38T34 156Q34 221 64 279T146 380Q222 441 301 441Q333 441 341 440Q354 437 367 433T402 417T438 387T464 338T476 268Q476 161 390 75T201 -11ZM121 120Q121 70 147 48T206 26Q250 26 289 58T351 142Q360 163 374 216T388 308Q388 352 370 375Q346 405 306 405Q243 405 195 347Q158 303 140 230T121 120Z"></path></g><g data-mml-node="mi" transform="translate(6175.9,0)"><path data-c="1D451" d="M366 683Q367 683 438 688T511 694Q523 694 523 686Q523 679 450 384T375 83T374 68Q374 26 402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487H491Q506 153 506 145Q506 140 503 129Q490 79 473 48T445 8T417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157Q33 205 53 255T101 341Q148 398 195 420T280 442Q336 442 364 400Q369 394 369 396Q370 400 396 505T424 616Q424 629 417 632T378 637H357Q351 643 351 645T353 664Q358 683 366 683ZM352 326Q329 405 277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q233 26 290 98L298 109L352 326Z"></path></g><g data-mml-node="mi" transform="translate(6695.9,0)"><path data-c="1D44F" d="M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z"></path></g><g data-mml-node="mo" transform="translate(7124.9,0)"><path data-c="29" d="M60 749L64 750Q69 750 74 750H86L114 726Q208 641 251 514T294 250Q294 182 284 119T261 12T224 -76T186 -143T145 -194T113 -227T90 -246Q87 -249 86 -250H74Q66 -250 63 -250T58 -247T55 -238Q56 -237 66 -225Q221 -64 221 250T66 725Q56 737 55 738Q55 746 60 749Z"></path></g><g data-mml-node="mo" transform="translate(7791.7,0)"><path data-c="3D" d="M56 347Q56 360 70 367H707Q722 359 722 347Q722 336 708 328L390 327H72Q56 332 56 347ZM56 153Q56 168 72 173H708Q722 163 722 153Q722 140 707 133H70Q56 140 56 153Z"></path></g><g data-mml-node="msup" transform="translate(8847.4,0)"><g data-mml-node="mi"><path data-c="1D450" d="M34 159Q34 268 120 355T306 442Q362 442 394 418T427 355Q427 326 408 306T360 285Q341 285 330 295T319 325T330 359T352 380T366 386H367Q367 388 361 392T340 400T306 404Q276 404 249 390Q228 381 206 359Q162 315 142 235T121 119Q121 73 147 50Q169 26 205 26H209Q321 26 394 111Q403 121 406 121Q410 121 419 112T429 98T420 83T391 55T346 25T282 0T202 -11Q127 -11 81 37T34 159Z"></path></g><g data-mml-node="mi" transform="translate(466,413) scale(0.707)"><path data-c="1D45B" d="M21 287Q22 293 24 303T36 341T56 388T89 425T135 442Q171 442 195 424T225 390T231 369Q231 367 232 367L243 378Q304 442 382 442Q436 442 469 415T503 336T465 179T427 52Q427 26 444 26Q450 26 453 27Q482 32 505 65T540 145Q542 153 560 153Q580 153 580 145Q580 144 576 130Q568 101 554 73T508 17T439 -10Q392 -10 371 17T350 73Q350 92 386 193T423 345Q423 404 379 404H374Q288 404 229 303L222 291L189 157Q156 26 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 112 180T152 343Q153 348 153 366Q153 405 129 405Q91 405 66 305Q60 285 60 284Q58 278 41 278H27Q21 284 21 287Z"></path></g></g></g></g></svg></mjx-container><br>所以（n1+n2+n3）%105（就是最终的最小解。</p><p>　　这样一来就得到了中国剩余定理的公式：</p><blockquote><p>设正整数<img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618184134796.jpeg" class="" title="img">两两互素，则同余方程组</p><p>​               <img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618184240203.jpeg" class="" title="img"></p><p>有整数解。并且在模<img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618184354156.jpeg" class="" title="img">下的解是唯一的，解为</p><p>​                <img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618184502609.jpeg" class="" title="img"></p><p>其中<img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618184601062.jpeg" class="" title="img">，而<img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618184638140.jpeg" class="" title="img">为<img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618184737359.jpeg" class="" title="img">模<img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140904164235549.png" class="" title="img">的逆元。</p></blockquote><hr><h3 id="2-中国剩余定理扩展——求解模数不互质情况下的线性方程组："><a href="#2-中国剩余定理扩展——求解模数不互质情况下的线性方程组：" class="headerlink" title="2.中国剩余定理扩展——求解模数不互质情况下的线性方程组："></a>2.中国剩余定理扩展——求解模数不互质情况下的线性方程组：</h3><p>　　普通的中国剩余定理要求所有的<img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618185352656.jpeg" class="" title="img">互素，那么如果不互素呢，怎么求解同余方程组？</p><p>　　这种情况就采用两两合并的思想，假设要合并如下两个方程：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618185529953.jpeg" class="" title="img"><p>　　那么得到：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/20140618185628671.jpeg" class="" title="img"><p>　　我们需要求出一个最小的x使它满足：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/994344-20160928225142250-925008424.png" class="" title="img"><p>　　那么x1和x2就要尽可能的小，于是我们用扩展欧几里得算法求出x1的最小正整数解，将它代回a1+m1x1，得到x的一个特解x’，当然也是最小正整数解。</p><p>　　所以x的通解一定是x′加上lcm(m1,m2)∗k，这样才能保证x模m1和m2的余数是a1和a2。由此，我们把这个x′当做新的方程的余数，把lcm(m1,m2)当做新的方程的模数。（这一段是<strong>关键</strong>）</p><p>　　合并完成：</p><img lazyload="" src="/images/loading.svg" data-src="/2023/07/08/Theorem/994344-20160929150603750-268147485.png" class="" title="img">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Theorem-in-Crypto&quot;&gt;&lt;a href=&quot;#Theorem-in-Crypto&quot; class=&quot;headerlink&quot; title=&quot;Theorem in Crypto&quot;&gt;&lt;/a&gt;Theorem in Crypto&lt;/h1&gt;&lt;h2 id=&quot;一、Fer</summary>
      
    
    
    
    <category term="Crypto" scheme="http://example.com/categories/Crypto/"/>
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Buu-Crypto</title>
    <link href="http://example.com/2023/06/18/Buu-Crypto/"/>
    <id>http://example.com/2023/06/18/Buu-Crypto/</id>
    <published>2023-06-18T13:42:46.000Z</published>
    <updated>2023-08-25T06:07:48.097Z</updated>
    
    <content type="html"><![CDATA[<h1 id="BuuCTF刷题记录-Crypto"><a href="#BuuCTF刷题记录-Crypto" class="headerlink" title="BuuCTF刷题记录-Crypto"></a>BuuCTF刷题记录-Crypto</h1><h2 id="1-异性相吸"><a href="#1-异性相吸" class="headerlink" title="1.异性相吸"></a>1.异性相吸</h2><p><strong>TASK：</strong></p><p>最近出现了一个奇葩观点，说性别都不一样，怎么能谈恋爱？为了证明这个观点错误，请大家证明异性是相吸的。 </p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">key:asadsasdasdasdasdasdasdasdasdasdqwesqf</span><br><span class="line">密文：ἇ̀Ј唒ဃ塔屋䩘卖剄䐃堂ن䝔嘅均ቄ䩝ᬔ</span><br></pre></td></tr></table></figure></div><p><strong>WP：</strong></p><ul><li>用010打开两个文件，获得他们的二进制数，再进行异或</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">a = <span class="string">'0110000101110011011000010110010001110011011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011000010111001101100100011100010111011101100101011100110111000101100110'</span></span><br><span class="line">b = <span class="string">'0000011100011111000000000000001100001000000001000001001001010101000000110001000001010100010110000100101101011100010110000100101001010110010100110100010001010010000000110100010000000010010110000100011000000110010101000100011100000101010101100100011101010111010001000001001001011101010010100001010000011011'</span></span><br><span class="line">c = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    <span class="keyword">if</span>(a[i] == b[i]):</span><br><span class="line">        c+=<span class="string">'0'</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        c+=<span class="string">'1'</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment">#0110011001101100011000010110011101111011011001010110000100110001011000100110001100110000001110010011100000111000001110010011100100110010001100100011011100110110011000100011011101100110001110010011010101100010001101010011010001100001001101110011010000110011001101010110010100111000001110010110010101111101</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="number">13040004482825639027998127915416848738127988052104145969389882111109559127041106665604212093</span>))</span><br><span class="line"><span class="comment">#flag{ea1bc0988992276b7f95b54a7435e89e}</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="2-RSA（证书公钥解析）"><a href="#2-RSA（证书公钥解析）" class="headerlink" title="2.RSA（证书公钥解析）"></a>2.RSA（证书公钥解析）</h2><p><strong>TASK：</strong></p><p><img lazyload="" src="/images/loading.svg" data-src="/imBuu-Crypto/image-20230618214433507.png" alt="image-20230618214433507"></p><p>题目给了两个附件，没遇到过，了解后知道是证书公钥解析类型的题目。（<a class="link" href="https://www.cnblogs.com/whbCNW/p/4141353.html">证书公钥解析 - CNW - 博客园 (cnblogs.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</p><p><strong>WP：</strong></p><ul><li>pub-key:</li></ul><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-----BEGIN PUBLIC KEY-----</span><br><span class="line">MDwwDQYJKoZIhvcNAQEBBQADKwAwKAIhAMAzLFxkrkcYL2wch21CM2kQVFpY9+7+</span><br><span class="line">/AvKr1rzQczdAgMBAAE=</span><br><span class="line">-----END PUBLIC KEY-----</span><br></pre></td></tr></table></figure></div><img lazyload="" src="/images/loading.svg" data-src="/2023/06/18/Buu-Crypto/image-20230618215153956.png" class="" title="image-20230618215153956"><ul><li>公钥解析后就是基本的RSA，脚本如下：</li></ul><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> rsa</span><br><span class="line"></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">n= <span class="number">86934482296048119190666062003494800588905656017203025617216654058378322103517</span></span><br><span class="line">p= <span class="number">285960468890451637935629440372639283459</span></span><br><span class="line">q= <span class="number">304008741604601924494328155975272418463</span></span><br><span class="line">d= <span class="number">81176168860169991027846870170527607562179635470395365333547868786951080991441</span></span><br><span class="line"></span><br><span class="line">key = rsa.PrivateKey(n,e,d,q,p)         <span class="comment">#在pkcs标准中,pkcs#1规定,私钥包含(n,e,d,p,q)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">"D:\CTF\\buu\\0eaf8d6c-3fe5-4549-9e81-94ac42535e7b\\flag.enc"</span>,<span class="string">"rb"</span>) <span class="keyword">as</span> f:  <span class="comment">#以二进制读模式，读取密文</span></span><br><span class="line">    f = f.read()</span><br><span class="line">    <span class="built_in">print</span>(rsa.decrypt(f,key))           <span class="comment"># f:公钥加密结果  key:私钥</span></span><br></pre></td></tr></table></figure></div><p>得到flag：  flag{decrypt_256}</p><h2 id="3-RSA1（dp-dq泄露）"><a href="#3-RSA1（dp-dq泄露）" class="headerlink" title="3.RSA1（dp,dq泄露）"></a>3.RSA1（dp,dq泄露）</h2><p><strong>TASK：</strong></p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">p = 8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229 </span><br><span class="line">q = 12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469 </span><br><span class="line">dp = 6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929 </span><br><span class="line">dq = 783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041 </span><br><span class="line">c = 24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span><br></pre></td></tr></table></figure></div><p>题目给出了p,q,dp,dq,c </p><p>考虑使用crt，欧拉定理求解</p><p><strong>WP：</strong></p><ul><li>推导过程如下：</li></ul><img lazyload="" src="/images/loading.svg" data-src="/2023/06/18/Buu-Crypto/image-20230619173016124.png" class="" title="image-20230619173016124"><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">p = <span class="number">8637633767257008567099653486541091171320491509433615447539162437911244175885667806398411790524083553445158113502227745206205327690939504032994699902053229</span> </span><br><span class="line">q = <span class="number">12640674973996472769176047937170883420927050821480010581593137135372473880595613737337630629752577346147039284030082593490776630572584959954205336880228469</span> </span><br><span class="line">dp = <span class="number">6500795702216834621109042351193261530650043841056252930930949663358625016881832840728066026150264693076109354874099841380454881716097778307268116910582929</span> </span><br><span class="line">dq = <span class="number">783472263673553449019532580386470672380574033551303889137911760438881683674556098098256795673512201963002175438762767516968043599582527539160811120550041</span> </span><br><span class="line">c = <span class="number">24722305403887382073567316467649080662631552905960229399079107995602154418176056335800638887527614164073530437657085079676157350205351945222989351316076486573599576041978339872265925062764318536089007310270278526159678937431903862892400747915525118983959970607934142974736675784325993445942031372107342103852</span></span><br><span class="line"><span class="comment">#n=p*q</span></span><br><span class="line"></span><br><span class="line">I = invert(q,p)            <span class="comment">#求p的逆元</span></span><br><span class="line">mp = <span class="built_in">pow</span>(c,dp,p)           <span class="comment">#求幂取模运算</span></span><br><span class="line">mq = <span class="built_in">pow</span>(c,dq,q)           <span class="comment">#求幂取模运算</span></span><br><span class="line"></span><br><span class="line">m = <span class="built_in">int</span>((((mp-mq)*I)%p)*q+mq) </span><br><span class="line">m=m%n</span><br><span class="line"><span class="built_in">print</span>(n2s(m))             </span><br></pre></td></tr></table></figure></div><p>解出flag： noxCTF{W31c0m3_70_Ch1n470wn}</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;BuuCTF刷题记录-Crypto&quot;&gt;&lt;a href=&quot;#BuuCTF刷题记录-Crypto&quot; class=&quot;headerlink&quot; title=&quot;BuuCTF刷题记录-Crypto&quot;&gt;&lt;/a&gt;BuuCTF刷题记录-Crypto&lt;/h1&gt;&lt;h2 id=&quot;1-异性相</summary>
      
    
    
    
    
    <category term="CTF小试" scheme="http://example.com/tags/CTF%E5%B0%8F%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Summary</title>
    <link href="http://example.com/2023/06/18/Summary/"/>
    <id>http://example.com/2023/06/18/Summary/</id>
    <published>2023-06-18T08:43:53.000Z</published>
    <updated>2023-07-26T10:40:30.432Z</updated>
    
    <content type="html"><![CDATA[<h1 id="一-、RSA"><a href="#一-、RSA" class="headerlink" title="一 、RSA"></a>一 、RSA</h1><h2 id="1-1-What-is-RSA"><a href="#1-1-What-is-RSA" class="headerlink" title="1.1 What is RSA"></a><strong>1.1 What is RSA</strong></h2><h3 id="1-1-1-Define-RSA："><a href="#1-1-1-Define-RSA：" class="headerlink" title="1.1.1 Define RSA："></a>1.1.1 Define RSA：</h3><p> 1977年，麻省理工学院的 Ron Rivest、Adi Shamir 和 Leonard Adleman 共同提出了一种非对称加密</p><p>算法，用他们三人的姓氏缩写命名为 RSA。RSA 既不是惟一，也不是最早的非对称加密算法。但它是使</p><p>用最广泛，因而也是最重要的非对称加密算法。</p><h3 id="1-1-2-Basic-principle："><a href="#1-1-2-Basic-principle：" class="headerlink" title="1.1.2 Basic principle："></a>1.1.2 Basic principle：</h3><p>eg：假设Alice和Bob要在网上进行加密通信，他们要怎么应用RSA来加密和解密信息呢？步骤如下：</p><p>1.随机选择两个不相同的素数 p , q。</p><p>2.将p , q 相乘，记为n &#x3D; p × q 。</p><p>3.计算n的欧拉函数φ( n )，欧拉函数证明，当 p , q 为不相同的素数时，φ(n)&#x3D;(p−1)(q−1) 。</p><p>4.随机选择一个整数 e ，满足两个条件：φ(n)与e互质,且1&lt;e&lt;φ(n) 。</p><p>5.计算e对于φ(n) 的模反元素d，也就是说找到一个d满足 ed &#x3D; 1 mod φ(n)。这个式子等价于</p><p>ed−1&#x3D;kφ(n)，实际上就是对于方程ed−kφ(n)&#x3D;1求(d,k)的整数解。这个方程可以用扩展欧几里得算法求</p><p>解。</p><p>6.最终把(e,n)封装成公钥,(d,n)封装成私钥。</p><p><strong>公钥与私钥的产生 ：</strong></p><p>1.随机选择两个不同大质数 p 和 q，计算 N&#x3D;p×q</p><p>2.根据欧拉函数，求得 φ(N)&#x3D;φ(p)φ(q)&#x3D;(p−1)(q−1)</p><p>3.选择一个小于 φ(N)φ(N) 的整数 e，使 e 和 φ(N)互质。并求得 e 关于 φ(N) 的模反元素，命名为 d，有</p><p>ed≡1(mod φ(N))</p><p>4.将 p 和 q 的记录销毁，此时，(N,e))是公钥，(N,d) 是私钥。</p><p><strong>消息加密：</strong></p><p>首先需要将消息 以一个双方约定好的格式转化为一个小于 N，且与 N 互质的整数 m。如果消息太长，</p><p>可以将消息分为几段，这也就是我们所说的块加密，后对于每一部分利用如下公式加密：</p><p>m^e≡c (mod N)</p><p><strong>消息解密：</strong></p><p>利用密钥d进行解密。</p><p>c^d≡m (modN)</p><p><strong>正确性证明:</strong></p><p>即我们要证m^ed≡m mod N，已知ed≡1 mod ϕ(N)，那么 ed&#x3D;kϕ(N)+1，即需要证明</p><p>m^kϕ(N)+1≡m mod N</p><p>这里我们分两种情况证明</p><p>第一种情况 gcd(m,N)&#x3D;1，那么 m^ϕ(N)≡1 mod N，因此原式成立。</p><p>第二种情况 gcd(m,N)≠1，那么 m 必然是 p 或者 q的倍数，并且 n&#x3D;mn&#x3D;m 小于 N。我们假设</p><p>m&#x3D;xp</p><p>那么x必然小于 q，又由于q是素数。那么</p><p>m^{kϕ(N)+1}&#x3D;m+uqm&#x3D;m+uqxp&#x3D;m+uxN</p><p>所以原式成立。</p><h3 id="1-1-3-Summariz："><a href="#1-1-3-Summariz：" class="headerlink" title="1.1.3 Summariz："></a><strong>1.1.3 Summariz</strong>：</h3><p><em>欧拉函数与小费马定理</em></p><p>(<a class="link"   href="https://blog.csdn.net/weixin_30302609/article/details/96312617?ops_request_misc=%7B%22request_id%22:%22166827222816782391833081%22,%22scm%22:%2220140713.130102334.pc_all.%22%7D&request_id=166827222816782391833081&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-96312617-null-null.142" >https://blog.csdn.net/weixin_30302609/article/details/96312617?ops_request_misc=%7B%22request%5Fid%22%3A%22166827222816782391833081%22%2C%22scm%22%3A%2220140713.130102334.pc%5Fall.%22%7D&amp;request_id=166827222816782391833081&amp;biz_id=0&amp;utm_medium=distribute.pc_search_result.none-task-blog-2~all~first_rank_ecpm_v1~rank_v31_ecpm-3-96312617-null-null.142<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="http://blog.csdn.net/boksic/article/details/6912381" >http://blog.csdn.net/boksic/article/details/6912381<i class="fas fa-external-link-alt"></i></a></p><h2 id="1-2-Tools-and-third-party-libaries"><a href="#1-2-Tools-and-third-party-libaries" class="headerlink" title="1.2 Tools and third-party libaries"></a>1.2 Tools and third-party libaries</h2><h3 id="1-2-1-RSA-tool"><a href="#1-2-1-RSA-tool" class="headerlink" title="1.2.1 RSA-tool :"></a><strong>1.2.1 RSA-tool :</strong></h3><p>使用rsatool工具计算d的值，直接填入p,q,把e &#x3D; 65537转换为16进制在再填入，再点击Calc.D,即可获得</p><p>D的值。在已知d的情况下，我们可以使用此工具将d分解为两个质数p,q，便于解出密文。但前提是已知</p><p>的d不是一个非常大的整数，因为大整数很难被分解。</p><h3 id="1-2-2-Python"><a href="#1-2-2-Python" class="headerlink" title="1.2.2 Python :"></a>1.2.2 Python :</h3><p>Python中的第三方库中有许多有用的函数，通过调用不同的函数，可以进行高效的数学运算，这对于</p><p>RSA问题有极大的帮助，能大大提高破解的效率。</p><p>如 <strong>gmpy2</strong></p><p>gmpy2.invert(x,m)求大整数x模m的逆元</p><p>print(gmpy2.invert(4, 23)) # eg:4<em>6 ≡ 1 mod 23 –&gt; 6**gmpy2.powmod(x,y,m)求大整数x的y次幂模</em>m取余</p><h2 id="1-3-Eg-analyze"><a href="#1-3-Eg-analyze" class="headerlink" title="1.3 Eg analyze"></a>1.3 Eg analyze</h2><h3 id="1-3-1-Easy-RSA"><a href="#1-3-1-Easy-RSA" class="headerlink" title="1.3.1 Easy RSA:"></a><strong>1.3.1 Easy RSA:</strong></h3><p>from Geek Challenge 2022:</p><p>n&#x3D;</p><p>6998481475728885783197750918520850086672477175656162927968781930122248321872866</p><p>3</p><p>e&#x3D; 65537</p><p>c&#x3D;</p><p>6767284506351741544248617509644866461758157956488531184232610787180559569745470</p><p>1</p><p>思路分析：</p><p>题目中给出了n,e,c</p><p>通过观察发现n较小，可以尝试将其分解为p,q，再调用gmpy.2函数解出d,进而解出flag</p><p>代码如下：</p><p>print(gmpy2.powmod(3, 3, 5)) # eg: 3<em>3</em>3 mod 5 –&gt; 2 </p><p>print(gmpy2.powmod(3, 2, 5)) # eg: 3*3 mod 5 –&gt; 4 </p><p>import gmpy2 </p><p>import binascii </p><p>e &#x3D; 65537从而解出flag:</p><p>b’SYC{5t4rt_R5A_ls_1t_3a5y?}’</p><h3 id="1-3-2-Crypto–RSA"><a href="#1-3-2-Crypto–RSA" class="headerlink" title="1.3.2 Crypto–RSA:"></a>1.3.2 Crypto–RSA:</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;xxxxxxxxx&#x27;</span></span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p*q*q</span><br><span class="line">phi = q*(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = gp.invert(e,phi)</span><br><span class="line">c1 = gp.powmod(m,e,n)</span><br><span class="line">c2 = gp.powmod(d,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c1)</span><br><span class="line"><span class="built_in">print</span>(c2)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">145093797902822167319652632563913049204359441606914299371328132761737937841482985204772991693446558382687211295966125072432728114585260877882481917537185348909428560415929625399859565640798879751464916665858077652098718880371517761152276087514608872623033063875563356826449768135315600286686553435829384245134433664959750049696782982403767531350340684278871939622253835942508836597570164009480445326919831484001207931469848043961222999691304566605932331844481734994387604676780062351323993700832064016063406467090539944036593162781777831398673064877888159965880054730223661378027013210686762339031370347494499755842043157403690971225215004655175312643627502009620816754778588759723275253010895567475742391090669667988777717071600553719238830821999675630958162460547881544109850105236232159309537820403872727855391181941233211235876250798959167546860843659326405803024282470037020615626816534084522390299126332179146654832494</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2761037910837718967061344195511979487994565044893561932920759186334785007440675894550166860632297873008400477594874122549824259651042906989018873497146326283220733850925963615819718647323108403061127797014213550645256691439295240651416176938533365428855831510041737319867214689836476665916037080648303266162609644824679782767672958160634270996992056182050815770464509352352622343572368757425935514622305972419508210848875697588255141320862169327664900990336717957506626667360479823775813415882223445888081908620554011130435520271237674956274080261300861326040405663427207665868898706364396527241733714445261200657405654370573827465006950534665688659874266680482613402133022739399689452087542656641275043233968350187385896117067102805499443547191573033143066075983801853574223210095894776380595919582689776780821295300553389588380527659421512397786402384504538653817177037906936827812894673284872232424415086422934862915801337</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3287002712425388307525352609100624748000272472736874666500547841318591852594619595724087209914853196867692948250150501764076446154470673884523284309784517787183054246280337398098853243684127104584733672924352341481572093454807255602936733377039997650201840331363344239719297203152251916861311582291699460040753803661345073084832894779090488743449087119526126541942853573076715474894397009565884537900866295889520532273851131982999253534600891259155672158005086674638844910604020655531132043490450001206903667855774008230185435154887685054704162605627162865608268235359819470906793478144795375880249991003056592569994537140155966341660560671914544355445680021310815797523132967939090744815795215539133448449248304650191105105400480778072455609675366453408226825706923640521370456175259373003734277093133962318272307543941384223016249143554311711183964923672359210163040661231350422086972190979806820525109574548334715135305259</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><p>分析：1.p与q都是随机的1024位的二进制数，这使得n会变得非常大，加之大正整数是很难分解的，所以这道</p><p>题并不是通过分解n来求解的。</p><p>2.e &#x3D; 0x10001 十六进制转换为十进制及e&#x3D;65537</p><p>3.n &#x3D; p<em>q</em>q</p><p>phi &#x3D; q*(p-1)*(q-1)</p><p>观察发现n与phi有公因子q</p><p>4.c1 &#x3D; gp.powmod(m,e,n) 即 m^e&#x3D;k1<em>p</em>q*q+c1 *</p><p><em>c2 &#x3D; gp.powmod(d,e,n)</em> <em>即**d^e&#x3D;k2pqq+c2</em></p><p>解题思路：</p><p> 1.题目给出了一组c1,c2,n的值，泄露了d的信息，即d^e mod n。同时我们发现phi与n有公因子</p><p>q,n&#x3D;pqq,phi&#x3D;(p-1)(q-1)q。</p><p>2.(d^e mod n )*(e^e mod n) mod n&#x3D; (de)^e mod n&#x3D;(kphi+1)^e mod n。</p><p>3.那么我们现在的想法就是设法求出q,再将n分解为p,q，接着就可以通过逆元求解出d的值。</p><p>4.这样我们就知道c即c1,n,d的值，进而解出m，破译密文。</p><h1 id="二、Hash"><a href="#二、Hash" class="headerlink" title="二、Hash"></a>二、Hash</h1><h2 id="2-1-What-is-Hash"><a href="#2-1-What-is-Hash" class="headerlink" title="2.1 What is Hash"></a><strong>2.1 What is Hash</strong></h2><h3 id="2-1-1-Hash-and-background"><a href="#2-1-1-Hash-and-background" class="headerlink" title="2.1.1 Hash and background:"></a><strong>2.1.1 Hash and background:</strong></h3><p> Hash,一般翻译做散列、杂凑，或音译为哈希，是把任意长度的输入（又叫做预映射pre-image）通过</p><p>散列算法变换成固定长度的输出，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空</p><p>间通常远小于输入的空间。它其实就是一个算法，最简单的算法就是加减乘除，比方，我设计个数字算</p><p>法，输入+7&#x3D;输出，比如我输入1，输出为8；输入2，输出为9。</p><p>哈希算法不过是一个更为复杂的运算，它的输入可以是字符串，可以是数据，可以是任何文件，经过哈</p><p>希运算后，变成一个固定长度的输出，该输出就是哈希值。但是哈希算法有一个很大的特点，就是你不</p><p>能从结果推算出输入,所以又称为不可逆的算法。</p><p>安全，这是Hash的最大优点！</p><h3 id="2-1-2-Hash’s-advantages"><a href="#2-1-2-Hash’s-advantages" class="headerlink" title="2.1.2 Hash’s advantages:"></a><strong>2.1.2 Hash’s advantages:</strong></h3><p>1.不可逆：在具备编码功能的同时，哈希算法也作为一种加密算法存在。即，你无法通过分析哈希值计</p><p>算出源文件的样子，换句话说：你不可能通过观察香肠的纹理推测出猪原来的样子。</p><p>2.计算极快：20G高清电影和一个5K文本文件复杂度相同，计算量都极小，可以在0.1秒内得出结果。也</p><p>就是说，不管猪有多肥，骨头多硬，做成香肠都只要眨眨眼的时间。</p><h3 id="2-1-3-Applied-fields"><a href="#2-1-3-Applied-fields" class="headerlink" title="2.1.3 Applied fields:"></a><strong>2.1.3 Applied fields:</strong></h3><p>哈希算法的不可逆特性使其在以下领域使用广泛</p><p>1.密码，我们日常使用的各种电子密码本质上都是基于hash的，你不用担心支付宝的工作人员会把你的</p><p>密码泄漏给第三方，因为你的登录密码是先经过 hash+各种复杂算法得出密文后 再存进支付宝的数据库</p><p>里的2.文件完整性校验，通过对文件进行hash，得出一段hash值 ，这样文件内容以后被修改了，hash值就</p><p>会变。 MD5 Hash算法的”数字指纹”特性，使它成为应用最广泛的一种文件完整性校验和(Checksum)算</p><p>法，不少Unix系统有提供计算md5 checksum的命令。</p><p>3.数字签名，数字签名技术是将摘要信息用发送者的私钥加密，与原文一起传送给接收者。接收者只有</p><p>用发送者的公钥才能解密被加密的摘要信息，然后用HASH函数对收到的原文产生一个摘要信息，与解</p><p>密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息</p><p>被修改过，因此数字签名能够验证信息的完整性。</p><p>此外，hash算法在区块链领域也使用广泛。</p><h2 id="2-2-Eg-analyze-MD5-in-Hash"><a href="#2-2-Eg-analyze-MD5-in-Hash" class="headerlink" title="2.2 Eg analyze(MD5 in Hash)"></a><strong>2.2 Eg analyze(MD5 in Hash)</strong></h2><h3 id="2-2-1-MD5"><a href="#2-2-1-MD5" class="headerlink" title="2.2.1 MD5"></a><strong>2.2.1 MD5</strong></h3><p>MD5以512位分组来处理输入的信息，且每一分组又被划分为16个32位子分组，经过一些列的处理后，</p><p>算法输出由四个32位分组组成的128位散列值。具体的步骤如下所示：</p><p>1、填充</p><p>如果输入信息的长度(bit)对512求余的结果不等于448，就需要填充使得对512求余结果等于448。填充</p><p>的方法是填充一个1和n个0。填充完成后，信息的长度为N*512+448</p><p>2、记录信息长度</p><p>用64位内存来存储填充前信息长度。这64位加在第一步结果的后面，这样信息长度就变为N<em>512 + 448 +</em></p><p>*64 &#x3D; (N+1)*512</p><p>3、装入标准的幻数（四个整数）</p><p>标准的幻数（物理顺序）是（A&#x3D;(01234567)16，B&#x3D;(89ABCDEF)16，C&#x3D;(FEDCBA98)16，D&#x3D;</p><p>(76543210)16）。如果在程序中定义应该是（A&#x3D;0X67452301L，B&#x3D;0XEFCDAB89L，</p><p>C&#x3D;0X98BADCFEL，D&#x3D;0X10325476L)。</p><h3 id="2-2-2-Crypto–md5"><a href="#2-2-2-Crypto–md5" class="headerlink" title="2.2.2 Crypto–md5:"></a>2.2.2 Crypto–md5:</h3><p>一个名为Hacker的人想给小彭加德育分，但是需要小彭的学号和寝室号才能完成加分。</p><p>Hacker自己只找到了学号和寝室号对应的md5值，聪明的你能帮助Hacker拿到学号和寝室号吗？</p><p>学号：71c5a9bd7cc3a8e563efe4171f07b427</p><p>寝室号：cb1592d95b7e3846451eab3728eeaa51</p><p>分析：</p><p>md5是一种信息摘要算法，不可反向解密，不同长度的内容加密后都是32位。它是单向密码体制，从明</p><p>文到密文的不可逆映射，只有加密过程没有解密过程，所以我们没法通过运算来解开密文得到明文。由</p><p>于md5是一种散列函数，运用Hash算法，在计算过程中原文会随机丢失，仅仅根据MD5的计算过程和</p><p>得到的最终结果，是无法逆向计算出明文的。</p><p>1.题目中的MD5密文并未加入盐作为干扰，都是标准的32位密文，解密时并没有非常困难，可以通过考</p><p>虑穷举法进行暴力求解。</p><p>2.通过迭代组合形成若干明文组，再将明文组进行utf-8编码成密文，然后与题目中的密文进行比较，当</p><p>两者一致时即“破译”成功，输出得到flag。</p><p><strong>脚本如下：</strong></p><p>1.引用hash</p><p>给定范围</p><p>运用for循环进行枚举</p><p>2.学号的格式为：19XXXXXXXX</p><p>我们发现已经给出部分明文，我们只需要解出剩下的8位明文即可，即设置8个变量</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>):a,b,c,d,e,f,g</span><br></pre></td></tr></table></figure></div><p>3.接着组成密文组t </p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">t =<span class="string">&#x27;19&#x27;</span>+<span class="built_in">str</span>(a)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(c)+<span class="built_in">str</span>(d)+<span class="built_in">str</span>(e)+<span class="built_in">str</span>(f)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(h)</span><br></pre></td></tr></table></figure></div><p>4.进行MD5算法，utf-8编码，所得密文与原密文比对，正确即输出，得到flag</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> md5[:<span class="number">32</span>] == <span class="string">&#x27;71c5a9bd7cc3a8e563efe4171f07b427&#x27;</span>: </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (t)</span><br></pre></td></tr></table></figure></div><p>运行</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib </span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>): </span><br><span class="line">    <span class="keyword">for</span> a <span class="keyword">in</span> dic: </span><br><span class="line">        <span class="keyword">for</span> b <span class="keyword">in</span> dic: </span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> dic: </span><br><span class="line">                <span class="keyword">for</span> d <span class="keyword">in</span> dic: </span><br><span class="line">                    <span class="keyword">for</span> e <span class="keyword">in</span> dic:</span><br><span class="line">                        <span class="keyword">for</span> f <span class="keyword">in</span> dic:</span><br><span class="line">                            <span class="keyword">for</span> g <span class="keyword">in</span> dic: </span><br><span class="line">                                <span class="keyword">for</span> h <span class="keyword">in</span> dic: </span><br><span class="line">                                    t =<span class="string">&#x27;19&#x27;</span>+<span class="built_in">str</span>(a)+<span class="built_in">str</span>(b)+<span class="built_in">str</span>(c)+<span class="built_in">str</span>(d)+<span class="built_in">str</span>(e)+<span class="built_in">str</span>(f)+<span class="built_in">str</span>(g)+<span class="built_in">str</span>(h) </span><br><span class="line">                                    md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() </span><br><span class="line">                                    <span class="keyword">if</span> md5[:<span class="number">32</span>] == <span class="string">&#x27;71c5a9bd7cc3a8e563efe4171f07b427&#x27;</span>: </span><br><span class="line">                                        <span class="built_in">print</span> (t)</span><br><span class="line">                                        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>求解完学号，寝室号的解密也是类似的：</p><p>注意到寝室号格式为：XX-XXXX</p><p>那么在组合时注意加入字符‘-’即可</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#coding: utf-8import hashlib </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">1000</span>)): </span><br><span class="line"></span><br><span class="line"><span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line">dic = <span class="string">&#x27;0123456789&#x27;</span> </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1000</span>): </span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> a <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">          <span class="keyword">for</span> b <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">              <span class="keyword">for</span> d <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">                <span class="keyword">for</span> e <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">                  <span class="keyword">for</span> f <span class="keyword">in</span> dic: </span><br><span class="line"></span><br><span class="line">                                  t =<span class="built_in">str</span>(a)+<span class="built_in">str</span>(b)+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">str</span>(c)+<span class="built_in">str</span>(d)+<span class="built_in">str</span>(e)+<span class="built_in">str</span>(f) </span><br><span class="line"></span><br><span class="line">                                  md5 = hashlib.md5(t.encode(<span class="string">&#x27;utf-8&#x27;</span>)).hexdigest() </span><br><span class="line"></span><br><span class="line"><span class="comment">#print t </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> md5[:<span class="number">32</span>] == <span class="string">&#x27;cb1592d95b7e3846451eab3728eeaa51&#x27;</span>: </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> (t)</span><br></pre></td></tr></table></figure></div><p>综上，flag为</p><p><strong>SYC{1919114514,81-2048}</strong></p><h1 id="三、ECC"><a href="#三、ECC" class="headerlink" title="三、ECC"></a>三、ECC</h1><h2 id="3-1-What-is-ECC"><a href="#3-1-What-is-ECC" class="headerlink" title="3.1 What is ECC"></a>3.1 What is ECC</h2><p>  ECC与RSA一样都属于非对称加密算法，但是，与传统的基于大质数分解难题的加密算法不同，该加密方式基于 “离散对数” 这种数学难题。</p><p>椭圆曲线加密（Elliptic Curve Cryptography），ECC加密算法是一种公钥加密技术，<strong>以椭圆曲线理论为基础</strong>。利用有限域上椭圆曲线的点构成的Abel群离散对数难解性，实现加密、解密和数字签名。将椭圆曲线中的加法运算与离散对数中的模乘运算相对应，就可以建立基于椭圆曲线的对应密码体制。</p><p>这里我不了解什么是群，什么是圆锥曲线理论，所以去CSDN了一下。</p><h3 id="3-1-1-关于群："><a href="#3-1-1-关于群：" class="headerlink" title="3.1.1 关于群："></a>3.1.1 关于群：</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113004400313.png"                      alt="image-20221113004400313"                ></p><h3 id="3-1-2-EIgamal："><a href="#3-1-2-EIgamal：" class="headerlink" title="3.1.2 EIgamal："></a><em>3.1.2 EIgamal：</em></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115230741013.png"                      alt="image-20221115230741013"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113155335598.png"                      alt="image-20221113155335598"                ></p><p>实例<br>密钥生成选取素数p&#x3D;150001，本原元a&#x3D;7，密钥113</p><blockquote><blockquote><blockquote><p>p&#x3D;150001<br>a&#x3D;7<br>d&#x3D;113<br>a<strong>d%p<br>66436L<br>y&#x3D;a</strong>d%p<br>print y<br>66436</p></blockquote></blockquote></blockquote><p>由公式可得公钥为y&#x3D;66436</p><p> 加密，明文为m&#x3D;809,随机整数为k&#x3D;1000</p><blockquote><blockquote><blockquote><p>m&#x3D;809<br>k&#x3D;1000<br>c1&#x3D;a<strong>k%p<br>c1<br>90429L<br>c2&#x3D;m*y</strong>k%p<br>c2<br>15061L</p></blockquote></blockquote></blockquote><p>得到密文为(c1,c2)&#x3D;(90429,15061)</p><p>解密</p><p>根据公式m1&#x3D;c2&#x2F;c1<strong>y%p，但其中有模逆运算，不能直接计算，可以用扩展欧几里得算法,先求c1</strong>y的模逆</p><blockquote><blockquote><blockquote><p>extended_gcd(c1**d%p,p)<br>(-69199L, 2147L)</p></blockquote></blockquote></blockquote><p>我们所需要的是正数，所以加上p，-69199+p&#x3D;80802</p><p>然后就可以</p><blockquote><blockquote><blockquote><p>80802*c2%p<br>809L</p></blockquote></blockquote></blockquote><p>正是刚开始的明文809</p><p>(<a class="link"   href="https://blog.csdn.net/boksic/article/details/7014386" >https://blog.csdn.net/boksic/article/details/7014386<i class="fas fa-external-link-alt"></i></a>)</p><h3 id="3-1-3-椭圆曲线-Elliptic-curve"><a href="#3-1-3-椭圆曲线-Elliptic-curve" class="headerlink" title="3.1.3 椭圆曲线(Elliptic curve):"></a>3.1.3 椭圆曲线(Elliptic curve):</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113162838863.png"                      alt="image-20221113162838863"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113181212306.png"                      alt="image-20221113181212306"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113181017150.png"                      alt="image-20221113181017150"                ></p><p><a class="link"   href="https://blog.csdn.net/boksic/article/details/7013480?ops_request_misc=%7B%22request_id%22:%22166813199416800182179855%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166813199416800182179855&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-7013480-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E6%A4%AD%E5%9C%86%E6%9B%B2%E7%BA%BF&spm=1018.2226.3001.4187" >(3条消息) 椭圆曲线入门详解_boksic的博客-CSDN博客_怎么求解椭圆曲线的全部解点<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-1-4-ECC-and-background"><a href="#3-1-4-ECC-and-background" class="headerlink" title="3.1.4 ECC and background:"></a>3.1.4 ECC and background:</h3><p>我们知道，RSA算法的优势就是算法原理简单，可以很容易的构造。但是缺点也很明显，需要足够长的密钥长度来保证数据的安全性。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113001055302.png"                      alt="image-20221113001055302"                ></p><p>而现在移动终端的数目在逐渐增多，越来越多的运算是在移动终端上进行的，而移动终端的计算能力有限，超级计算机的计算能力在不断增强。按照摩尔定律，计算机处理器的性能，每两年就会翻一番。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113001147500.png"                      alt="image-20221113001147500"                ></p><p>这就必然导致了一个矛盾：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221113001250810.png"                      alt="image-20221113001250810"                ></p><p>由此，ECC加密算法应运而生。<br>引文链接：<a class="link"   href="https://blog.csdn.net/xuanli4845/article/details/115907886" >https://blog.csdn.net/xuanli4845/article/details/115907886<i class="fas fa-external-link-alt"></i></a></p><h2 id="3-2-ECC’s-advantages"><a href="#3-2-ECC’s-advantages" class="headerlink" title="3.2 ECC’s advantages"></a>3.2 ECC’s advantages</h2><p>ECC主要优势是可以使用更小的密钥并提供相当高等级的安全。ECC164位的密钥产生一个安全级，相当于RSA 1024位密钥提供的保密强度，而且计算量较小，处理速度更快，存储空间和传输带宽占用较少。目前我国居民二代身份证正在使用 256 位的椭圆曲线密码，虚拟货币比特币也选择ECC作为加密算法。对于ECC加密算法的优点，那就是性能上的提升，同样的密钥长度，基于ECC加密要比基于RSA安全很多。</p><p>总结来说就是ECC算法能在短时间内达到RSA的加密效果，同时ECC的密钥更短，存储效率高，通信效率高。</p><h2 id="3-3-ECC’s-principle"><a href="#3-3-ECC’s-principle" class="headerlink" title="3.3 ECC’s principle"></a>3.3 ECC’s principle</h2><h3 id="3-3-1-Define-ECC"><a href="#3-3-1-Define-ECC" class="headerlink" title="3.3.1 Define ECC:"></a>3.3.1 Define ECC:</h3><p>在有限域Fp中定义一个椭圆曲线，常用y2&#x3D;x3+ax+b</p><p>Fp中只有p个元素，p为素数<br>Fp中，a+b≡c (mod p)，a×b≡c (mod p)，a&#x2F;b≡c (mod p)<br>4a^3+27b^2≠0　(mod p)  a，b是小于p的非负整数<br>x，y属于0到p-1间的证书，曲线标记为Ep（a，b）<br>阶：椭圆曲线上一点P，存在正整数n，使得nP&#x3D;O∞，则n为P的阶，若n不存在，则P是无限阶的，有限域上定义的椭圆曲线上所有点的阶都存在。</p><p><strong>椭圆曲线难题</strong></p><p>K&#x3D;kG，其中K,G为Ep（a,b）上的点，k为小于n的整数，n是点G的阶，给定k和G，计算K容易，但是给定K和G，求k就很难了！</p><p>因此，设K为公钥，k为私钥，G为基点。</p><p><strong>加密过程</strong><br>A选定一条椭圆曲线Ep（a,b），并取曲线上一点作为基点G<br>A选择一个私钥k，并生成公钥K&#x3D;kG<br>A将Ep（a,b）和k，G发送给B<br>B收到后将明文编码到Ep（a,b）上一点M，并产生一个随机数r<br>B计算点C1&#x3D;M+rK，C2&#x3D;rG<br>B将C1，C2传给A<br>A计算C1-kC2&#x3D;M+rkG-krG&#x3D;M<br>A对M解码得到明文<br>攻击者只能得到Ep（a,b），G，K，C1，C2，没有k就无法得到M。</p><p><strong>签名验签流程</strong><br>A选定一条椭圆曲线Ep（a，b），并取曲线上一点作为基点G<br>A选择一个私钥k，并生成公钥K&#x3D;kG<br>A产生一个随机数r，计算R(x,y)&#x3D;rG<br>A计算Hash&#x3D;SHA(M)，M‘&#x3D;M(modp)<br>A计算S&#x3D;（Hash+M’k）&#x2F;r(modp)<br>B获得S和M’，Ep(a,b)，K，R(x,y)<br>B计算Hash&#x3D;SHA(M)，M’&#x3D;M(modp)<br>B计算R’&#x3D;（Hash*G+M’<em>K）&#x2F;S&#x3D;(Hash</em>G+M’*kG)*r&#x2F;(Hash+M’k)&#x3D;rG&#x3D;R（x,y），若R’&#x3D;R，则验签成功。<br><a class="link"   href="https://blog.csdn.net/leo_wonty/article/details/7366418" >https://blog.csdn.net/leo_wonty/article/details/7366418<i class="fas fa-external-link-alt"></i></a></p><h3 id="3-3-2-Eg"><a href="#3-3-2-Eg" class="headerlink" title="3.3.2 Eg:"></a>3.3.2 Eg:</h3><p>Eg1</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114084747780.png"                      alt="image-20221114084747780"                ></p><p><a class="link"   href="https://blog.csdn.net/weixin_43943977/article/details/102070227?ops_request_misc=&request_id=&biz_id=102&utm_term=ECC%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduweb~default-1-102070227.nonecase&spm=1018.2226.3001.4187" >(3条消息) 椭圆曲线密码算术（ECC）原理_Soul fragments的博客-CSDN博客_ecc原理<i class="fas fa-external-link-alt"></i></a></p><p><a class="link"   href="https://blog.csdn.net/sitebus/article/details/82835492" >(3条消息) ECC椭圆曲线加解密原理详解(配图)_NFTDigger的博客-CSDN博客_椭圆曲线加密算法原理<i class="fas fa-external-link-alt"></i></a></p><p>Eg2</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114141027959.png"                      alt="image-20221114141027959"                ></p><p><a class="link"   href="https://www.cnblogs.com/Kalafinaian/p/7392505.html" >ECC椭圆曲线详解(有具体实例) - Kalafinaian - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><h2 id="3-4-Crypto–ECC"><a href="#3-4-Crypto–ECC" class="headerlink" title="3.4 Crypto–ECC"></a>3.4 Crypto–ECC</h2><p>阿鲁为了保护自己的qq，使用椭圆曲线加密了自己的qq密码。<br>嘉然觉得这样并不安全，于是决定拿到阿鲁的qq密码证明此事。<br>发现阿鲁的QQ密码就是椭圆曲线的公钥坐标之和。<br>现已知椭圆曲线各参数：</p><p>a &#x3D; 2546417962</p><p>b &#x3D; 33279036350</p><p>p &#x3D; 190540091407103</p><p>私钥: k &#x3D; 3068869</p><p>G &#x3D; (25040232765915, 122045618759262)</p><p>求公钥K(x, y)</p><p>flag是SYC{}包上x+y的sha256值</p><h3 id="Analyze"><a href="#Analyze" class="headerlink" title="Analyze:"></a><em><strong>Analyze:</strong></em></h3><p>1.通过观察题目我们发现，已知椭圆曲线加密Ep(a,b)参数为</p><p>a &#x3D; 2546417962</p><p>b &#x3D; 33279036350</p><p>p &#x3D; 190540091407103</p><p>私钥: k &#x3D; 3068869</p><p>G &#x3D; (25040232765915, 122045618759262)</p><p>需要求解的是公钥K(x,y)的横坐标与纵坐标之和的sha256的值</p><p>2.我们已知k与G，求解公钥K相对较简单。但是，如果知道G与K，反过来求解k就会变得很困难。阿鲁为了保护自己的qq，使用椭圆曲线加密了自己的qq密码，其QQ密码为公钥K(x,y)的横坐标与纵坐标之和，这么做显然是不够安全的，我们只需要解出公钥K就“破译”成功。</p><ol start="3"><li></li></ol><p>根据椭圆曲线上的点的加法运算</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114151012914.png"                      alt="image-20221114151012914"                ></p><p>我们就计算能得到公钥K，拿到flag</p><h3 id="Solve-process："><a href="#Solve-process：" class="headerlink" title="Solve process："></a>Solve process：</h3><p>1.写入已知数据</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Gx = <span class="number">25040232765915</span></span><br><span class="line">Gy = <span class="number">122045618759262</span></span><br><span class="line">a = <span class="number">2546417962</span></span><br><span class="line">b = <span class="number">33279036350</span></span><br><span class="line">p = <span class="number">190540091407103</span></span><br><span class="line">k = <span class="number">3068869</span></span><br><span class="line">x = Gx</span><br><span class="line">y = Gy</span><br></pre></td></tr></table></figure></div><p>2.分根据P、Q两点是否重合，进行分类</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#若P、Q两点重合</span></span><br><span class="line">    <span class="keyword">if</span> (x==Gx <span class="keyword">and</span> y==Gy):</span><br><span class="line">        inv = <span class="built_in">pow</span>(<span class="number">2</span>*Gy, p-<span class="number">2</span>,p)   </span><br><span class="line">        temp = (<span class="number">3</span>*Gx*Gx+a)*inv%p </span><br><span class="line">        <span class="comment">#若P、Q两点不重合</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        inv = <span class="built_in">pow</span>((x-Gx), p-<span class="number">2</span>,p)</span><br><span class="line">        temp = (y-Gy)*inv%p</span><br></pre></td></tr></table></figure></div><p>3.再通过椭圆曲线上的加法运算算出公钥K</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"> xr = (temp*temp-Gx-x)%p</span><br><span class="line">    yr = (temp*(x-xr)-y)%p</span><br><span class="line"> <span class="comment">#print(i,xr,yr)</span></span><br><span class="line">    x = xr</span><br><span class="line">    y = yr</span><br><span class="line"><span class="built_in">print</span>(x+y)</span><br></pre></td></tr></table></figure></div><p>脚本如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输入已知数据</span></span><br><span class="line">Gx = <span class="number">25040232765915</span></span><br><span class="line">Gy = <span class="number">122045618759262</span></span><br><span class="line">a = <span class="number">2546417962</span></span><br><span class="line">b = <span class="number">33279036350</span></span><br><span class="line">p = <span class="number">190540091407103</span></span><br><span class="line">k = <span class="number">3068869</span></span><br><span class="line">x = Gx</span><br><span class="line">y = Gy</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(k-<span class="number">1</span>):</span><br><span class="line">    <span class="comment">#分类计算K的值</span></span><br><span class="line">    <span class="comment">#若P、Q两点重合</span></span><br><span class="line">    <span class="keyword">if</span> (x==Gx <span class="keyword">and</span> y==Gy):</span><br><span class="line">        inv = <span class="built_in">pow</span>(<span class="number">2</span>*Gy, p-<span class="number">2</span>,p)   <span class="comment">#费马小定理(1/2/Gy)%p=(2Gy)^p-2 %p</span></span><br><span class="line">        temp = (<span class="number">3</span>*Gx*Gx+a)*inv%p </span><br><span class="line">        <span class="comment">#若P、Q两点不重合</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        inv = <span class="built_in">pow</span>((x-Gx), p-<span class="number">2</span>,p)</span><br><span class="line">        temp = (y-Gy)*inv%p</span><br><span class="line"></span><br><span class="line">    xr = (temp*temp-Gx-x)%p</span><br><span class="line">    yr = (temp*(x-xr)-y)%p</span><br><span class="line"> <span class="comment">#print(i,xr,yr)</span></span><br><span class="line">    x = xr</span><br><span class="line">    y = yr</span><br><span class="line"><span class="built_in">print</span>(x+y)</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114092916083.png"                      alt="image-20221114092916083"                ></p><p>QQ:196301645356440</p><p>4.sha256</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#Hash.sha256</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="built_in">hash</span>=hashlib.sha256();</span><br><span class="line"><span class="built_in">hash</span>.update(<span class="built_in">bytes</span>(<span class="string">&#x27;196301645356440&#x27;</span>,encoding=<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hash</span>.hexdigest())</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>得到sha256后的值：a6c50a41e9ff4678ff94a17e893f434952a32b2e70c78dfb726c4d78b4303471</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221114093108426.png"                      alt="image-20221114093108426"                ></p><p>所以，flag为</p><p>SYC{a6c50a41e9ff4678ff94a17e893f434952a32b2e70c78dfb726c4d78b4303471}</p><h1 id="四、Coppersmith-amp-Lattice-based-Cryptography"><a href="#四、Coppersmith-amp-Lattice-based-Cryptography" class="headerlink" title="四、Coppersmith&amp;Lattice-based Cryptography"></a>四、Coppersmith&amp;Lattice-based Cryptography</h1><h2 id="4-1-Define"><a href="#4-1-Define" class="headerlink" title="4.1 Define"></a>4.1 Define</h2><h3 id="4-1-1-Coppersmith："><a href="#4-1-1-Coppersmith：" class="headerlink" title="4.1.1 Coppersmith："></a>4.1.1 Coppersmith：</h3><p>Coppersmith定理攻击，也是针对n</p><p>Coppersmith定理指出在一个e阶的mod n多项式f(x)中，如果有一个根小于n^1&#x2F;e，就可以运用一个O(log n)的算法求出这些根。</p><p>这个定理可以应用于rsa算法。如果e &#x3D; 3并且在明文当中只有三分之二的比特是已知的，这种算法可以求出明文中所有的比特。</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115094724598.png"                      alt="image-20221115094724598"                ></p><h3 id="4-1-2-Lattice-based-Cryptography："><a href="#4-1-2-Lattice-based-Cryptography：" class="headerlink" title="4.1.2 Lattice-based Cryptography："></a>4.1.2 Lattice-based Cryptography：</h3><p>Background：</p><p>随着当下量子计算机的研制的迅速进展，量子算法亦是相应得以巨大突破。在量子计算模型下，经典数论假设的密码体系（如大整数分解，计算有限域&#x2F;椭圆曲线上的离散对数问题等），存在多项式时间（PPT）的量子算法，换而言之，经典数论密码体系受到了极大的冲击，将有可能成为旧时代的眼泪。因此，能够抵抗量子计算机攻击的密码——“后量子”或“抗量子”密码便应运而生。</p><p>目前, 用于构建后量子密码系统的常见数学技巧包括：<br>1.杂凑函数,多变量方程(在构造签名方案时较有优势)<br>2.纠错码(更合适构造加密方案)<br>3.格(最通用的一类, 几乎所有经典密码概念都可以在格密码中实现)<br>4.超奇异椭圆曲线同源问题(当下较新的一类, 目前其中较受关注的有密钥交换和签名方案的构造,计算效率很低,还达不到实用性的要求)</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115223034239.png"                      alt="image-20221115223034239"                ></p><p><a class="link"   href="https://blog.csdn.net/weixin_43255133/article/details/83031862?ops_request_misc=%7B%22request_id%22:%22166852104616782391845131%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166852104616782391845131&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-83031862-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E6%A0%BC%E5%AF%86%E7%A0%81&spm=1018.2226.3001.4187" >(3条消息) 格密码学习笔记（一）_中科院大学网安学院五班的博客-CSDN博客_格密码<i class="fas fa-external-link-alt"></i></a></p><h2 id="4-2-Crypto–Lattice"><a href="#4-2-Crypto–Lattice" class="headerlink" title="4.2 Crypto–Lattice"></a>4.2 Crypto–Lattice</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag </span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag) </span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>) </span><br><span class="line">q = gp.next_prime(p^getPrime(<span class="number">300</span>)) </span><br><span class="line"></span><br><span class="line">n = p*q*q  </span><br><span class="line">e = <span class="number">65537</span> </span><br><span class="line"></span><br><span class="line">c = gp.powmod(m,e,n) </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;n =&#x27;</span>,n) </span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;c =&#x27;</span>,c) </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 1657441819757560493500517852783955669448453505565270030410061904903034812851838667903292681076179721746140392331192685190606078940084193957290326586494942522658447994684113206242147782786486488436062862050720479488907160079456425398688762594497865325047151851509869420955094484022711893914207287322595902861633185849920399826569309062936190162679696321445993297117512458125412547050580265204485812236589358129086671672828599162645076611983958397948578920439799452386250795654988454192963915928293305164506837479627943346663261467474305586884553923408358862832788883664773346582688933735310806488603282226770159631772761229230574671474094221451870770630961493950451576998259008044822492004077759659701132437773984472438535462757118722089434990869144816129748753152891554265248737014747786223673274064575777197461593456413962892395208072539632132385626016349698916261814365453919077654267526533803349663404621106450916027162399</span></span><br><span class="line"><span class="string">c = 1593553679265125861785993192995912696703111560484695970440496248832386885660325028592530874649060028886120763183422597047360806209458935841437245811877714862968196063554261763749466409879047920508168205393706964912523940426199563334512062879052144213846731434858189341622618689853479805825788008893681015249513342688073719536077558806766432484683211750233531164855481666588757851308926988995968945742356896847523781439112333434449743267160262042077831263329769226240475721901216575639399568420398732862655239671453285258560223566086632412820111497447791858015410203252987331230298565756895805839776628672153301485185711776486346696438675451218026201460790552063913385567753045113924570385856031061350493346154777923602808727275442959100197205924675240921131973487280067779126475375849306092292239336121622197137677170815075931160633100612695431123755384954524364124384771024043229892682507314656508989478323824687786447911936</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><h1 id="五、Discrete-Log"><a href="#五、Discrete-Log" class="headerlink" title="五、Discrete Log"></a>五、Discrete Log</h1><h2 id="5-1-What-is-Discrete-Log"><a href="#5-1-What-is-Discrete-Log" class="headerlink" title="5.1 What is Discrete Log"></a>5.1 What is Discrete Log</h2><p>离散对数被誉为当代密码学领域的三大基础之一。1976年，Diffifie和Hellman提出了一种密钥协商协议， 产生了首个离散对数系统模型；8年后，ElGamal提出了基于离散对数系统的公钥加密和签名方法，并奠定了离散对数密码学基础。从那时起，围绕离散对数系统产生了不少研究成果，本文阐述离散对数的基本概念，然后介绍基于离散对数的ElGamal的公钥加密方法和数字签名方法（DSA）。</p><h3 id="5-1-1-Define-Discrete-Log"><a href="#5-1-1-Define-Discrete-Log" class="headerlink" title="5.1.1 Define Discrete Log:"></a>5.1.1 Define Discrete Log:</h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115163033136.png"                      alt="image-20221115163033136"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115163111394.png"                      alt="image-20221115163111394"                ></p><p>定义</p><p>当模 m有原根时，设 a为模 m的一个原根，则当<br>$$<br>ak≡x(mod m)时： Indx≡k(mod ϕ(m))<br>$$<br>，此处的 Indx为 x以整数 a为底，模 ϕ(m)时的离散对数值.</p><p>性质</p><p>离散对数和一般的对数有着相类似的性质：</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115161637062.png"                      alt="image-20221115161637062"                ></p><p>示例</p><p>对模5，ϕ(5)&#x3D;5−1&#x3D;4.有个原根是2. 因为</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221115161703314.png"                      alt="image-20221115161703314"                ></p><p><a class="link"   href="http://abloz.com/tech/2018/06/27/discrete-logarithm/" >离散对数概念 - 瀚海星空 - 周海汉博客 (abloz.com)<i class="fas fa-external-link-alt"></i></a></p><h2 id="5-2-Crypto–Discrete-Log"><a href="#5-2-Crypto–Discrete-Log" class="headerlink" title="5.2 Crypto–Discrete Log"></a>5.2 Crypto–Discrete Log</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp </span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> * </span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES  </span><br><span class="line"><span class="keyword">import</span> random </span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key </span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ts</span>(<span class="params">g,p</span>):</span><br><span class="line">    <span class="keyword">return</span> gp.powmod(g,(p-<span class="number">1</span>)//<span class="number">2</span>,p) == <span class="number">1</span> </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ELG</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self,m</span>):</span><br><span class="line">        self.m = m  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">creation</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">global</span> p,g </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            p = <span class="number">2</span>  </span><br><span class="line">            pr = [] </span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>): </span><br><span class="line">                a = getPrime(<span class="number">20</span>)</span><br><span class="line">                pr.append(a) </span><br><span class="line">                p *= a**random.randint(<span class="number">1</span>,<span class="number">4</span>) </span><br><span class="line">            <span class="keyword">if</span> isPrime(p+<span class="number">1</span>):</span><br><span class="line">                <span class="keyword">break</span>   </span><br><span class="line">        p += <span class="number">1</span>  </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;p =&#x27;</span>,p) </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pr =&#x27;</span>,pr) </span><br><span class="line">        g = <span class="number">2</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line">            g+=<span class="number">1</span> </span><br><span class="line">            <span class="keyword">if</span> ts(g,p):</span><br><span class="line">                <span class="keyword">break</span> </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;g =&#x27;</span>,g) </span><br><span class="line">        priv_a = random.randint(<span class="number">1</span>,p-<span class="number">1</span>) </span><br><span class="line">        pub_A = gp.powmod(g,priv_a,p) </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;pub =&#x27;</span>,pub_A) </span><br><span class="line">        <span class="keyword">return</span> priv_a,pub_A </span><br><span class="line">        </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">self,m,pub</span>):</span><br><span class="line">        k = random.randint(<span class="number">2</span>&lt;&lt;<span class="number">100</span>,<span class="number">2</span>&lt;&lt;<span class="number">200</span>)  </span><br><span class="line">        c1 = gp.powmod(g,k,p) </span><br><span class="line">        c2 = (m * gp.powmod(pub,k,p)) % p </span><br><span class="line">        <span class="keyword">return</span> c1,c2  </span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">conn</span>(<span class="params">self</span>): </span><br><span class="line">        priv,pub = self.creation() </span><br><span class="line">        c1,c2 = self.enc(self.m,pub) </span><br><span class="line">        <span class="keyword">return</span> c1,c2 </span><br><span class="line">       </span><br><span class="line"></span><br><span class="line">DEBUG = <span class="literal">True</span> </span><br><span class="line"><span class="keyword">if</span> DEBUG: </span><br><span class="line">    aes = AES.new(key,AES.MODE_ECB)  </span><br><span class="line">    elg = ELG(bytes_to_long(flag)) </span><br><span class="line">    c1,c2 = elg.conn() </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c1 =&#x27;</span>,c1) </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;c2 =&#x27;</span>,c2) </span><br><span class="line">    c = aes.encrypt(flag)  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;cipher =&#x27;</span>,bytes_to_long(c))    </span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">p = 240311898144666004845993472603553263322756300779157768701176199291766409589743098329948576886913307536581636947347700640539029536089210573230307671485961868117315471159814486642321020898269103855126517533262247331484819745914498053780059371263306840883425781625061104966618125509054939865409539648498696187295927</span></span><br><span class="line"><span class="string">g = 5</span></span><br><span class="line"><span class="string">pub = 134285622222383211593143419284735141120812420703242474727692334574646766372588113350683719458438557808968651014501757534179743215386357063432496866596113430845534517856556614675236061221959886358825348089193378086912994104626194570995572907279789332330634572963965215940753665380396874414753113588963071439984133</span></span><br><span class="line"><span class="string">c1 = 59866977306496443433230989875501170590733738724206572571973692325202707443627775293269002455283846854135556345025196628657530983549383681055008873942332984996831735632074040992205674787686019847478343708531796808561868062324972209667292857694231350874772127330748101130540816455846043028497370515427917876173767</span></span><br><span class="line"><span class="string">c2 = 189736523869687408218680256920128645519881608991064724826055201457101208294761171595467115162913230133265415706153044192480307701067740580637047863932982867754412493322841249939735690673297501484346546496379585941155099078148120702397606052034259931372433234626469922863663420459070532806854867523903923301588710</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">cipher = 106965036567008443490243813427422441161051668015352122219256553139516361341928</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"> </span><br></pre></td></tr></table></figure></div><h1 id="六、Inverse"><a href="#六、Inverse" class="headerlink" title="六、Inverse"></a>六、Inverse</h1><h2 id="6-1-What-is-inverse"><a href="#6-1-What-is-inverse" class="headerlink" title="6.1 What is inverse"></a>6.1 What is inverse</h2><h3 id="6-6-1-Define-inverse"><a href="#6-6-1-Define-inverse" class="headerlink" title="6.6.1 Define inverse:"></a>6.6.1 Define inverse:</h3><p>Inverse，即逆元。</p><p>我们都知道倒数的概念，逆元可以说是扩大了概念的倒数。在模运算中，若ab≡1（mod m)，则称b为模m下a的逆元。</p><p>求解公式(a&#x2F;b)%m 时，因b可能会过大，会出现爆精度的情况，所以需<strong>变除法为乘法</strong>：</p><h3 id="6-1-2-Inverse’s-application："><a href="#6-1-2-Inverse’s-application：" class="headerlink" title="6.1.2 Inverse’s application："></a>6.1.2 Inverse’s application：</h3><p>那么逆元有什么用呢？<br>(a + b) % p &#x3D; (a%p + b%p) %p （对）<br>(a - b) % p &#x3D; (a%p - b%p) %p （对）<br>(a * b) % p &#x3D; (a%p * b%p) %p （对）<br>(a &#x2F; b) % p &#x3D; (a%p &#x2F; b%p) %p （错）<br>在求余的过程中我们发现只有除法是不能分开运算的，而当a过大时，在计算除法过程中可能会造成比较大的精度损失，所以对于这种情况我们一般会把式子转换成那么(a &#x2F; b) % p &#x3D; (a * inv(b) ) % p &#x3D; (a % p * inv(b) % p) % p来进行计算。这样就解决了除法不能分开计算的问题。<br>需要注意只有a和p互质，a才有关于p的逆元</p><p><a class="link"   href="https://blog.csdn.net/weixin_45757507/article/details/107506285" >https://blog.csdn.net/weixin_45757507/article/details/107506285<i class="fas fa-external-link-alt"></i></a></p><h3 id="6-1-3-Achieve-ways："><a href="#6-1-3-Achieve-ways：" class="headerlink" title="6.1.3  Achieve ways："></a>6.1.3  Achieve ways：</h3><p><strong>1.费马小定理</strong></p><p>费马小定理：<a class="link"   href="https://blog.csdn.net/weixin_50187215/article/details/120120850?ops_request_misc=%7B%22request_id%22:%22166850921116782417098992%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166850921116782417098992&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120120850-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86&spm=1018.2226.3001.4187" >(3条消息) 费马小定理及其应用_不见月光见星光的博客-CSDN博客_费马小定理应用<i class="fas fa-external-link-alt"></i></a></p><p>费马小定理(Fermat’s little theorem)是数论中的一个重要定理，在1636年提出。</p><p>如果p是一个质数，而整数a不是p的倍数，则有a^（p-1）≡1（mod p）<br>费马小定理规定了p一定为一个质数，所以a和p一定互质<br>那么双方在modp的意义下同时除a可得<br>a^(p-2) ≡1&#x2F;a (mod p)<br>也就是a^(p-2) ≡ inv(a) (mod p)<br>所以inv(a) &#x3D; a^(p-2) (mod p)</p><p><strong>2.扩展欧几里得算法求逆元</strong></p><p>欧几里得算法：<a class="link"   href="https://blog.csdn.net/ltrbless/article/details/86770606?ops_request_misc=%7B%22request_id%22:%22166850921316782428637689%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166850921316782428637689&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-86770606-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97%E7%AE%97%E6%B3%95&spm=1018.2226.3001.4187" >(3条消息) 欧几里得算法原理_ltrbless的博客-CSDN博客_欧几里得算法<i class="fas fa-external-link-alt"></i></a></p><p>如果gcd（a，p）&#x3D;1；<br>那么就有ax+py&#x3D;1<br>双方同时modp<br>就有ax≡1（modp）<br>因为py是p的倍数全部约掉了<br>此时x就是a的逆元<br>所以只需解出该情况下的扩展欧几里得方程的解问题就解决了</p><h2 id="6-2-Inverse–Coding"><a href="#6-2-Inverse–Coding" class="headerlink" title="6.2 Inverse–Coding"></a>6.2 Inverse–Coding</h2><p>参考书目以及参考的资料：</p><p>《An Introduction to Mathematical Cryptography》</p><p><a class="link"   href="https://blog.csdn.net/weixin_40156933/article/details/83866348?ops_request_misc=%7B%22request_id%22:%22166850957516800184169684%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=166850957516800184169684&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~sobaiduend~default-2-83866348-null-null.142%5Ev63%5Econtrol,201%5Ev3%5Eadd_ask,213%5Ev2%5Et3_esquery_v3&utm_term=python%E6%B1%82%E9%80%86%E5%85%83%E5%A4%9A%E9%A1%B9%E5%BC%8F&spm=1018.2226.3001.4187" >(3条消息) Python在GF(2⁸)有限域上求解多项式的乘法逆元——基于扩展欧几里得算法_海绵菌的博客-CSDN博客_有限域多项式乘法<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;一-、RSA&quot;&gt;&lt;a href=&quot;#一-、RSA&quot; class=&quot;headerlink&quot; title=&quot;一 、RSA&quot;&gt;&lt;/a&gt;一 、RSA&lt;/h1&gt;&lt;h2 id=&quot;1-1-What-is-RSA&quot;&gt;&lt;a href=&quot;#1-1-What-is-RSA&quot; class</summary>
      
    
    
    
    
    <category term="面试小结" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>DES-Study</title>
    <link href="http://example.com/2023/04/13/DES-Study/"/>
    <id>http://example.com/2023/04/13/DES-Study/</id>
    <published>2023-04-13T13:27:38.000Z</published>
    <updated>2023-08-25T06:22:55.462Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DES-Study"><a href="#DES-Study" class="headerlink" title="DES-Study"></a>DES-Study</h1><p><strong>强加密算法</strong>（基于以下两种本源操作）：</p><p>（1）混淆（Confusion）：是一种使密钥与密文之间的关系尽可能模糊的加密操作。如今实 现混淆常用的一个元素就是替换；这个元素在DES和AES中都有使用。 </p><p>（2）扩散（Diffusion）：是一种为了隐藏明文的统计属性而将一个明文符号的影响扩散到 多个密文符号的加密操作。最简单的扩散元素就是位置换，它常用于DES中；而AES则使用更高级的 Mixcolumn 操作。 </p><h2 id="1-Define"><a href="#1-Define" class="headerlink" title="1.Define"></a>1.Define</h2><p>DES是一种使用56位密钥对64位长分组进行加密的密码（如图3-3）。</p><p><img lazyload="" src="/images/loading.svg" data-src="/DES-Study/image-20230313202706948.png" alt="image-20230313202706948"></p><p>DES是一种对称密码，即其加密过程和解密过程使用相同的密钥。与几乎所有现代分组加密一样，DES也是一种迭代算法。DES对明文中每个分组的加密过程都包含16轮，且每轮的操作完全相同。图3-4显示了DES的轮结构。每轮都会使用不同的子密钥，并且所有子密钥k；都从主密钥k中推导而来的。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/04/13/DES-Study/image-20230313202815077.png" class="" title="image-20230313202815077"><h2 id="2-Feistel网络"><a href="#2-Feistel网络" class="headerlink" title="2.Feistel网络"></a>2.Feistel网络</h2><p>每轮中仅加密输入为的一半，未加密右半部分，用的是伪随机数产生器的输出对左半部分进行XOR操作。</p><img lazyload="" src="/images/loading.svg" data-src="/2023/04/13/DES-Study/image-20230313204920579.png" class="" title="image-20230313204920579">]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;DES-Study&quot;&gt;&lt;a href=&quot;#DES-Study&quot; class=&quot;headerlink&quot; title=&quot;DES-Study&quot;&gt;&lt;/a&gt;DES-Study&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;强加密算法&lt;/strong&gt;（基于以下两种本源操作）：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    
    <category term="Crypto" scheme="http://example.com/tags/Crypto/"/>
    
  </entry>
  
  <entry>
    <title>Python-study</title>
    <link href="http://example.com/2023/02/24/Python-study/"/>
    <id>http://example.com/2023/02/24/Python-study/</id>
    <published>2023-02-24T09:10:59.000Z</published>
    <updated>2023-08-07T11:02:46.091Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Python学习笔记"><a href="#Python学习笔记" class="headerlink" title="Python学习笔记"></a>Python学习笔记</h1><h1 id="Python教程-廖雪峰的官方网站-liaoxuefeng-com"><a href="#Python教程-廖雪峰的官方网站-liaoxuefeng-com" class="headerlink" title="(Python教程 - 廖雪峰的官方网站 (liaoxuefeng.com))"></a>(<a class="link" href="https://www.liaoxuefeng.com/wiki/1016959663602400">Python教程 - 廖雪峰的官方网站 (liaoxuefeng.com) <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</h1><p>By：jrl</p><h1 id="一、Python基础"><a href="#一、Python基础" class="headerlink" title="一、Python基础"></a>一、Python基础</h1><h2 id="1-多行注释："><a href="#1-多行注释：" class="headerlink" title="1.多行注释："></a>1.多行注释：</h2><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20221121161839273.png" alt="image-20221121161839273"></p><h2 id="2-变量："><a href="#2-变量：" class="headerlink" title="2.变量："></a>2.变量：</h2><img lazyload="" src="/images/loading.svg" data-src="Python-study\image-20221121162220999.png" alt="image-20221121162220999" style="zoom:66%;"><h2 id="3-除法："><a href="#3-除法：" class="headerlink" title="3.除法："></a>3.除法：</h2><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20221121163251476.png" alt="image-20221121163251476"></p><h2 id="4-Unicode与Utf-8："><a href="#4-Unicode与Utf-8：" class="headerlink" title="4.Unicode与Utf-8："></a>4.Unicode与Utf-8：</h2><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20221121164752301.png" alt="image-20221121164752301"></p><p>Unicode虽然范围广，可以编码汉字，但是占存储空间大，所以转为Utf-8储存。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20221122161837329.png" alt="image-20221122161837329"></p><h2 id="5-字符编码："><a href="#5-字符编码：" class="headerlink" title="5.字符编码："></a>5.字符编码：</h2><p>由于Python的字符串类型是<code>str</code>，在内存中以Unicode表示，一个字符对应若干个字节。如果要在网络上传输，或者保存到磁盘上，就需要把<code>str</code>变为以字节为单位的<code>bytes</code>。</p><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20221122162404728.png" alt="image-20221122162404728"></p><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20221122163630967.png" alt="image-20221122163630967"></p><p>文件开头一般写入的注释：</p><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/usr/bin/env python3</span><br><span class="line"># -*- coding: utf-8 -*-</span><br></pre></td></tr></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20230224154919596.png" alt="image-20230224154919596"></p><h2 id="6-格式化字符串的方法："><a href="#6-格式化字符串的方法：" class="headerlink" title="6.格式化字符串的方法："></a>6.格式化字符串的方法：</h2><h3 id="1）使用占位符"><a href="#1）使用占位符" class="headerlink" title="1）使用占位符"></a>1）使用占位符</h3><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20230224160555460.png" alt="image-20230224160555460"></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Age: %s. Gender: %s'</span> % (<span class="number">25</span>, <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">'growth rate: %d %%'</span> % <span class="number">7</span>   <span class="comment"># %%转义字符 表示一个%</span></span><br></pre></td></tr></table></figure></div><h3 id="2）foramt"><a href="#2）foramt" class="headerlink" title="2）foramt()"></a>2）foramt()</h3><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20230224165831828.png" alt="image-20230224165831828"></p><p>3）f-strng</p><p><img lazyload="" src="/images/loading.svg" data-src="/Python-study%5Cimage-20230224165814292.png" alt="image-20230224165814292"></p><h2 id="7-list与tuple"><a href="#7-list与tuple" class="headerlink" title="7.list与tuple"></a>7.list与tuple</h2><h3 id="1-list"><a href="#1-list" class="headerlink" title="(1)list"></a>(1)list</h3><p>Python内置的一种数据类型是列表：list。list是一种有序的集合，可以随时添加和删除其中的元素。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg</span></span><br><span class="line">classmates = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">len</span>(classmates)  <span class="comment">#获得list元素的个数</span></span><br><span class="line">classmates[<span class="number">0</span>]   <span class="comment">#用索引来访问list中每一个位置的元素</span></span><br><span class="line">classmates[-<span class="number">1</span>]  <span class="comment">#访问最后一个元素的位置</span></span><br><span class="line">classmates.append(<span class="string">'Adam'</span>)  <span class="comment"># append() 可以往list中追加元素到末尾</span></span><br><span class="line">classmates.insert(<span class="number">1</span>, <span class="string">'Jack'</span>)  <span class="comment">#也可以把元素插入到指定的位置</span></span><br><span class="line">classmates.pop()  <span class="comment"># pop(i) 删除list末尾的元素</span></span><br></pre></td></tr></table></figure></div><h3 id="2-tuple"><a href="#2-tuple" class="headerlink" title="(2)tuple"></a>(2)tuple</h3><p>另一种有序列表叫元组：tuple。tuple和list非常类似，但是tuple一旦初始化就不能修改</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">classmates = (<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>)</span><br><span class="line">t = () <span class="comment">#或者()  定义空tuple</span></span><br><span class="line">t=(<span class="number">1</span>,) <span class="comment">#定义只有一个元素的tuple</span></span><br></pre></td></tr></table></figure></div><h2 id="8-条件判断"><a href="#8-条件判断" class="headerlink" title="8.条件判断"></a>8.条件判断</h2><p>elif(else if)</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">age = <span class="number">20</span></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">6</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'teenager'</span>)</span><br><span class="line"><span class="keyword">elif</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'adult'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'kid'</span>)</span><br></pre></td></tr></table></figure></div><p>input()的返回类型是str,str不能直接与整数比较，须转化</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="built_in">input</span>(<span class="string">'birth: '</span>)</span><br><span class="line">birth = <span class="built_in">int</span>(s)</span><br><span class="line"><span class="keyword">if</span> birth &lt; <span class="number">2000</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'00前'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'00后'</span>)</span><br></pre></td></tr></table></figure></div><h2 id="9-循环"><a href="#9-循环" class="headerlink" title="9.循环"></a>9.循环</h2><h3 id="1-for-in-循环"><a href="#1-for-in-循环" class="headerlink" title="(1)for  in  循环"></a>(1)for  in  循环</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#历遍list或者tulpe中的元素</span></span><br><span class="line">names = [<span class="string">'Michael'</span>, <span class="string">'Bob'</span>, <span class="string">'Tracy'</span>]</span><br><span class="line"><span class="keyword">for</span> name <span class="keyword">in</span> names:</span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment">#求和</span></span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>]:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><p>当须历遍的范围过大时，可使用range()函数</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">5</span>))    <span class="comment">#[0, 1, 2, 3, 4]  0-4</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">101</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + x</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><h3 id="2-while循环"><a href="#2-while循环" class="headerlink" title="(2)while循环"></a>(2)while循环</h3><p>只要条件满足，就不断循环，条件不满足时退出循环</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">n = <span class="number">99</span></span><br><span class="line"><span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">sum</span> = <span class="built_in">sum</span> + n</span><br><span class="line">    n = n - <span class="number">2</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>)</span><br></pre></td></tr></table></figure></div><p><strong>break</strong></p><p>在循环中，break语句可以提前退出循环</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> n &lt;= <span class="number">100</span>:</span><br><span class="line">    <span class="keyword">if</span> n &gt; <span class="number">10</span>: <span class="comment"># 当n = 11时，条件满足，执行break语句</span></span><br><span class="line">        <span class="keyword">break</span> <span class="comment"># break语句会结束当前循环</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">'END'</span>)</span><br></pre></td></tr></table></figure></div><p><strong>continue</strong></p><p>在循环过程中，也可以通过<code>continue</code>语句，跳过当前的这次循环，直接开始下一次循环。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">n = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> n &lt; <span class="number">10</span>:</span><br><span class="line">    n = n + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> n % <span class="number">2</span> == <span class="number">0</span>: <span class="comment"># 如果n是偶数，执行continue语句</span></span><br><span class="line">        <span class="keyword">continue</span> <span class="comment"># continue语句会直接继续下一轮循环，后续的print()语句不会执行</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure></div><h2 id="10-dict和set"><a href="#10-dict和set" class="headerlink" title="10.dict和set"></a>10.dict和set</h2><h3 id="1-dict"><a href="#1-dict" class="headerlink" title="(1)dict"></a>(1)dict</h3><p>Python内置了字典：dict的支持，dict全称dictionary，在其他语言中也称为map，使用键-值（key-value）存储，具有极快的查找速度。</p><p>先在字典的索引表里（比如部首表）查这个字对应的页码，然后直接翻到该页，找到这个字。无论找哪个字，这种查找速度都非常快，不会随着字典大小的增加而变慢，给定一个名字，比如<code>'Michael'</code>，dict在内部就可以直接计算出<code>Michael</code>对应的存放成绩的“页码”，也就是<code>95</code>这个数字存放的内存地址，直接取出来，所以速度非常快。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">d = {<span class="string">'Michael'</span>: <span class="number">95</span>, <span class="string">'Bob'</span>: <span class="number">75</span>, <span class="string">'Tracy'</span>: <span class="number">85</span>}</span><br><span class="line">d[<span class="string">'Adam'</span>] = <span class="number">67</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#查找</span></span><br><span class="line">d[<span class="string">'Michael'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#删除</span></span><br><span class="line"><span class="comment">#要删除一个key，用pop(key)方法，对应的value也会从dict中删除：</span></span><br><span class="line"> d.pop(<span class="string">'Bob'</span>)</span><br></pre></td></tr></table></figure></div><p>由于一个key只能对应一个value，所以，多次对一个key放入value，后面的值会把前面的值冲掉，如果key不存在，dict就会报错要避免key不存在的错误，有两种办法</p><p>一是通过<code>in</code>判断key是否存在：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'Thomas'</span> <span class="keyword">in</span> d</span><br></pre></td></tr></table></figure></div><p>二是通过dict提供的<code>get()</code>方法，如果key不存在，可以返回<code>None</code>，或者自己指定的value：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">d.get(<span class="string">'Thomas'</span>)</span><br><span class="line">d.get(<span class="string">'Thomas'</span>, -<span class="number">1</span>)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">要删除一个key，用pop(key)方法，对应的value也会从<span class="built_in">dict</span>中删除：</span><br><span class="line"> d.pop(<span class="string">'Bob'</span>)</span><br></pre></td></tr></table></figure></div><h4 id="dict与list比较"><a href="#dict与list比较" class="headerlink" title="dict与list比较"></a>dict与list比较</h4><p>请务必注意，dict内部存放的顺序和key放入的顺序是没有关系的。</p><p>和list比较，dict有以下几个特点：</p><ol><li>查找和插入的速度极快，不会随着key的增加而变慢；</li><li>需要占用大量的内存，内存浪费多。</li></ol><p>而list相反：</p><ol><li>查找和插入的时间随着元素的增加而增加；</li><li>占用空间小，浪费内存很少。</li></ol><p>所以，dict是用空间来换取时间的一种方法。</p><p>dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是<strong>不可变对象</strong>。</p><p>这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。</p><p>要保证hash的正确性，作为key的对象就不能变。在Python中，字符串、整数等都是不可变的，因此，可以放心地作为key。而list是可变的，就不能作为key：</p><h3 id="2-set"><a href="#2-set" class="headerlink" title="(2)set"></a>(2)set</h3><p> set和dict类似，也是一组key的集合，但不存储value。由于key不能重复，所以，在set中，没有重复的key。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要创建一个set，需要提供一个list作为输入集合：</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment">#注意，传入的参数[1, 2, 3]是一个list，而显示的{1, 2, 3}只是告诉你这个set内部有1，2，3这3个元素，显示的顺序也不表示set是有序的     重复元素在set中自动被过滤：</span></span><br><span class="line">s = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">3</span>])                <span class="comment">#  &gt;&gt; s    {1, 2, 3}</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#通过add(key)方法可以添加元素到set中，可以重复添加，但不会有效果：</span></span><br><span class="line">s.add(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#通过remove(key)方法可以删除元素：</span></span><br><span class="line">s.remove(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#set可以看成数学意义上的无序和无重复元素的集合，因此，两个set可以做数学意义上的交集、并集等操作：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 = <span class="built_in">set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s2 = <span class="built_in">set</span>([<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 &amp; s2</span><br><span class="line">{<span class="number">2</span>, <span class="number">3</span>}</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>s1 | s2</span><br><span class="line">{<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>}</span><br></pre></td></tr></table></figure></div><h4 id="set与dict比较"><a href="#set与dict比较" class="headerlink" title="set与dict比较"></a>set与dict比较</h4><p>set和dict的唯一区别仅在于没有存储对应的value，但是，set的原理和dict一样，所以，同样不可以放入可变对象，因为无法判断两个可变对象是否相等，也就无法保证set内部“不会有重复元素”。试试把list放入set，看看是否会报错。</p><h4 id="不可变对象"><a href="#不可变对象" class="headerlink" title="不可变对象"></a>不可变对象</h4><p>str是不变对象，而list是可变对象</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#对于可变对象，比如list，对list进行操作，list内部的内容是会变化的，比如：</span></span><br><span class="line">a = [<span class="string">'c'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line">[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#对于不可变对象，比如str，对str进行操作呢：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="string">'abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a.replace(<span class="string">'a'</span>, <span class="string">'A'</span>)</span><br><span class="line"><span class="string">'Abc'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a</span><br><span class="line"><span class="string">'abc'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#replace并不是真的改变了变量a所指向的字符串"abc"，而是创建了一个新的变量b，指向"Abc"</span></span><br></pre></td></tr></table></figure></div><p><img lazyload="" src="/images/loading.svg" data-src="D:\Blog\source_posts\Python-study.assets\image-20230319191110780.png" alt="image-20230319191110780"></p><h1 id="二、函数"><a href="#二、函数" class="headerlink" title="二、函数"></a>二、函数</h1><h2 id="1-调用函数"><a href="#1-调用函数" class="headerlink" title="1.调用函数"></a>1.调用函数</h2><p>可以通过官网来调查函数： <a class="link" href="http://docs.python.org/3/library/functions.html#abs">http://docs.python.org/3/library/functions.html#abs <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p><p>也可以在交互式命令行通过help(),查看函数的帮助信息。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#eg: 数据类型转换</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="string">'123'</span>)</span><br><span class="line"><span class="number">123</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">int</span>(<span class="number">12.34</span>)</span><br><span class="line"><span class="number">12</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">float</span>(<span class="string">'12.34'</span>)</span><br><span class="line"><span class="number">12.34</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">1.23</span>)</span><br><span class="line"><span class="string">'1.23'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">'100'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="number">1</span>)</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">bool</span>(<span class="string">''</span>)</span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure></div><p>函数名其实就是指向一个函数对象的引用，完全可以把函数名赋给一个变量，相当于给这个函数起了一个“别名”：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">abs</span> <span class="comment"># 变量a指向abs函数</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a(-<span class="number">1</span>) <span class="comment"># 所以也可以通过a调用abs函数</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></div><h2 id="2-定义函数"><a href="#2-定义函数" class="headerlink" title="2.定义函数"></a>2.定义函数</h2><p>在Python中，定义一个函数要使用<code>def</code>语句，依次写出函数名、括号、括号中的参数和冒号<code>:</code>，然后，在缩进块中编写函数体，函数的返回值用<code>return</code>语句返回。</p><p>我们以自定义一个求绝对值的<code>my_abs</code>函数为例：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"> <span class="string">'''</span></span><br><span class="line"><span class="string"> 请注意，函数体内部的语句在执行时，一旦执行到return时，函数就执行完毕，并将结果返回。因此，函数内部通过条件判断和循环可以实现非常复杂的逻辑。如果没有return语句，函数执行完毕后也会返回结果，只是结果为None。return None可以简写为return。</span></span><br><span class="line"><span class="string"> '''</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果你已经把my_abs()的函数定义保存为abstest.py文件了，那么，可以在该文件的当前目录下启动Python解释器，用from abstest import my_abs来导入my_abs()函数，注意abstest是文件名（不含.py扩展名）：</span></span><br></pre></td></tr></table></figure></div><p><strong>交互式环境</strong></p><p><img lazyload="" src="/images/loading.svg" data-src="D:\Blog\source_posts\Python-study.assets\image-20230320200608122.png" alt="image-20230320200608122"></p><h3 id="1-空函数"><a href="#1-空函数" class="headerlink" title="(1)空函数"></a>(1)空函数</h3><p>如果想定义一个什么事也不做的空函数，可以用<code>pass</code>语句：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">nop</span>():</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># pass语句什么都不做，那有什么用？实际上pass可以用来作为占位符，比如现在还没想好怎么写函数的代码，就可以先放一个pass，让代码能运行起来。</span></span><br><span class="line"><span class="comment"># pass还可以用在其他语句里，比如：</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> age &gt;= <span class="number">18</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure></div><h3 id="2-参数检查"><a href="#2-参数检查" class="headerlink" title="(2)参数检查"></a>(2)参数检查</h3><p>调用函数时，如果参数个数不对，Python解释器会自动检查出来，并抛出<code>TypeError</code>：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: my_abs() takes <span class="number">1</span> positional argument but <span class="number">2</span> were given</span><br></pre></td></tr></table></figure></div><p>但是如果参数类型不对，Python解释器就无法帮我们检查。试试<code>my_abs</code>和内置函数<code>abs</code>的差别：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">'A'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">2</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: unorderable types: <span class="built_in">str</span>() &gt;= <span class="built_in">int</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">abs</span>(<span class="string">'A'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span> <span class="keyword">for</span> <span class="built_in">abs</span>(): <span class="string">'str'</span></span><br></pre></td></tr></table></figure></div><p>当传入了不恰当的参数时，内置函数<code>abs</code>会检查出参数错误，而我们定义的<code>my_abs</code>没有参数检查，会导致<code>if</code>语句出错，出错信息和<code>abs</code>不一样。所以，这个函数定义不够完善。</p><p>让我们修改一下<code>my_abs</code>的定义，对参数类型做检查，只允许整数和浮点数类型的参数。数据类型检查可以用内置函数<code>isinstance()</code>实现：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_abs</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(x, (<span class="built_in">int</span>, <span class="built_in">float</span>)):</span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'bad operand type'</span>)</span><br><span class="line">    <span class="keyword">if</span> x &gt;= <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> x</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> -x</span><br></pre></td></tr></table></figure></div><p>添加了参数检查后，如果传入错误的参数类型，函数就可以抛出一个错误：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>my_abs(<span class="string">'A'</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">3</span>, <span class="keyword">in</span> my_abs</span><br><span class="line">TypeError: bad operand <span class="built_in">type</span></span><br></pre></td></tr></table></figure></div><h3 id="3-关于返回值"><a href="#3-关于返回值" class="headerlink" title="(3)关于返回值"></a>(3)关于返回值</h3><p>Python中的返回值是唯一的</p><p>Eg： 在游戏中经常需要从一个点移动到另一个点，给出坐标、位移和角度，就可以计算出新的坐标：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">move</span>(<span class="params">x, y, step, angle=<span class="number">0</span></span>):</span><br><span class="line">    nx = x + step * math.cos(angle)</span><br><span class="line">    ny = y - step * math.sin(angle)</span><br><span class="line">    <span class="keyword">return</span> nx, ny</span><br></pre></td></tr></table></figure></div><p>然后，我们就可以同时获得返回值：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x, y = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(x, y)</span><br><span class="line"><span class="number">151.96152422706632</span> <span class="number">70.0</span></span><br></pre></td></tr></table></figure></div><p>但其实这只是一种假象，Python函数返回的仍然是单一值：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = move(<span class="number">100</span>, <span class="number">100</span>, <span class="number">60</span>, math.pi / <span class="number">6</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(r)</span><br><span class="line">(<span class="number">151.96152422706632</span>, <span class="number">70.0</span>)</span><br></pre></td></tr></table></figure></div><p><strong>原来返回值是一个tuple！但是，在语法上，返回一个tuple可以省略括号，而多个变量可以同时接收一个tuple，按位置赋给对应的值，所以，Python的函数返回多值其实就是返回一个tuple，但写起来更方便。</strong></p><h2 id="3-函数的参数"><a href="#3-函数的参数" class="headerlink" title="3.函数的参数"></a>3.函数的参数</h2><p>Python的函数定义非常简单，但灵活度却非常大。除了正常定义的必选参数外，还可以使用默认参数、可变参数和关键字参数，使得函数定义出来的接口，不但能处理复杂的参数，还可以简化调用者的代码。</p><h3 id="1-位置参数"><a href="#1-位置参数" class="headerlink" title="(1)位置参数"></a>(1)位置参数</h3><p>我们先写一个计算x2的函数</p><p>对于<code>power(x)</code>函数，参数<code>x</code>就是一个位置参数</p><p>修改后的<code>power(x, n)</code>函数有两个参数：<code>x</code>和<code>n</code>，这两个参数都是位置参数，调用函数时，传入的两个值按照位置顺序依次赋给参数<code>x</code>和<code>n</code>。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, n</span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></div><h3 id="2-默认参数"><a href="#2-默认参数" class="headerlink" title="(2)默认参数"></a>(2)默认参数</h3><p>新的<code>power(x, n)</code>函数定义没有问题，但是，旧的调用代码失败了，原因是我们增加了一个参数，导致旧的代码因为缺少一个参数而无法正常调用：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>power(<span class="number">5</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"&lt;stdin&gt;"</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">TypeError: power() missing <span class="number">1</span> required positional argument: <span class="string">'n'</span></span><br></pre></td></tr></table></figure></div><p>这个时候，默认参数就排上用场了。由于我们经常计算x2，所以，完全可以把第二个参数n的默认值设定为2：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">x, n=<span class="number">2</span></span>):</span><br><span class="line">    s = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> n &gt; <span class="number">0</span>:</span><br><span class="line">        n = n - <span class="number">1</span></span><br><span class="line">        s = s * x</span><br><span class="line">    <span class="keyword">return</span> s</span><br></pre></td></tr></table></figure></div><p>而对于<code>n &gt; 2</code>的其他情况，就必须明确地传入n，比如<code>power(5, 3)</code>。</p><p>从上面的例子可以看出，默认参数可以简化函数的调用。设置默认参数时，有几点要注意：</p><p>一是必选参数在前，默认参数在后，否则Python的解释器会报错（思考一下为什么默认参数不能放在必选参数前面）；</p><p>二是如何设置默认参数。</p><p>当函数有多个参数时，把变化大的参数放前面，变化小的参数放后面。变化小的参数就可以作为默认参数。</p><p>使用默认参数有什么好处？最大的好处是能降低调用函数的难度。</p><p>举个例子，我们写个一年级小学生注册的函数，需要传入<code>name</code>和<code>gender</code>两个参数：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">enroll</span>(<span class="params">name, gender</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'name:'</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'gender:'</span>, gender)</span><br><span class="line">   </span><br><span class="line"><span class="comment">#如果要继续传入年龄、城市等信息怎么办？这样会使得调用函数的复杂度大大增加。我们可以把年龄和城市设为默认参数，这样，大多数学生注册时不需要提供年龄和城市，只提供必须的两个参数：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enroll</span>(<span class="params">name, gender, age=<span class="number">6</span>, city=<span class="string">'Beijing'</span></span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'name:'</span>, name)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'gender:'</span>, gender)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'age:'</span>, age)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">'city:'</span>, city)</span><br><span class="line">    </span><br><span class="line">   <span class="comment">#只有与默认参数不符的学生才需要提供额外的信息：</span></span><br><span class="line">enroll(<span class="string">'Bob'</span>, <span class="string">'M'</span>, <span class="number">7</span>)</span><br><span class="line">enroll(<span class="string">'Adam'</span>, <span class="string">'M'</span>, city=<span class="string">'Tianjin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以不按顺序提供部分默认参数。当不按顺序提供部分默认参数时，需要把参数名写上。比如调用enroll('Adam', 'M', city='Tianjin')，意思是，city参数用传进去的值，其他默认参数继续使用默认值。</span></span><br></pre></td></tr></table></figure></div><p><strong>默认函数最大的坑</strong>：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#先定义一个函数，传入一个list，添加一个END再返回：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_end</span>(<span class="params">L=[]</span>):</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="comment">#当你正常调用时，结果似乎不错：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end([<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>])</span><br><span class="line">[<span class="string">'x'</span>, <span class="string">'y'</span>, <span class="string">'z'</span>, <span class="string">'END'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#当你使用默认参数调用时，一开始结果也是对的：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#但是，再次调用add_end()时，结果就不对了：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>add_end()</span><br><span class="line">[<span class="string">'END'</span>, <span class="string">'END'</span>, <span class="string">'END'</span>]</span><br></pre></td></tr></table></figure></div><p>这是因为：</p><p>Python函数在定义的时候，默认参数<code>L</code>的值就被计算出来了，即<code>[]</code>，因为默认参数<code>L</code>也是一个变量，它指向对象<code>[]</code>，每次调用该函数，如果改变了<code>L</code>的内容，则下次调用时，默认参数的内容就变了，不再是函数定义时的<code>[]</code>了。</p><p> <strong>定义默认参数要牢记一点：默认参数必须指向不变对象！</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#要修改上面的例子，我们可以用None这个不变对象来实现：</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add_end</span>(<span class="params">L=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> L <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        L = []</span><br><span class="line">    L.append(<span class="string">'END'</span>)</span><br><span class="line">    <span class="keyword">return</span> L</span><br><span class="line"></span><br><span class="line"><span class="comment">#为什么要设计str、None这样的不变对象呢？因为不变对象一旦创建，对象内部的数据就不能修改，这样就减少了由于修改数据导致的错误。此外，由于对象不变，多任务环境下同时读取对象不需要加锁，同时读一点问题都没有。我们在编写程序时，如果可以设计一个不变对象，那就尽量设计成不变对象。</span></span><br></pre></td></tr></table></figure></div><h3 id="3-可变参数"><a href="#3-可变参数" class="headerlink" title="(3)可变参数"></a>(3)可变参数</h3><p>在Python函数中，还可以定义可变参数。顾名思义，可变参数就是传入的参数个数是可变的，可以是1个、2个到任意个，还可以是0个。</p><p>我们以数学题为例子，给定一组数字a，b，c……，请计算a2 + b2 + c2 + ……。</p><p>要定义出这个函数，我们必须确定输入的参数。由于参数个数不确定，我们首先想到可以把a，b，c……作为一个list或tuple传进来，这样，函数可以定义如下：</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#但是调用的时候，需要先组装出一个list或tuple：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>])</span><br><span class="line"><span class="number">14</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc((<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>))</span><br><span class="line"><span class="number">84</span></span><br></pre></td></tr></table></figure></div><p>我们把函数的参数改为可变参数：</p><p>Python允许你在list或tuple前面加一个<code>*</code>号，把list或tuple的元素变成可变参数传进去：</p><p><code>*nums</code>表示把<code>nums</code>这个list的所有元素作为可变参数传进去。这种写法相当有用，而且很常见。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#调用该函数时，可以传入任意个参数，包括0个参数：</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>calc()</span><br><span class="line"><span class="number">0</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">calc</span>(<span class="params">*numbers</span>):</span><br><span class="line">    <span class="built_in">sum</span> = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> numbers:</span><br><span class="line">        <span class="built_in">sum</span> = <span class="built_in">sum</span> + n * n</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span></span><br></pre></td></tr></table></figure></div><h3 id="4-关键字参数"><a href="#4-关键字参数" class="headerlink" title="(4)关键字参数"></a>(4)关键字参数</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Python学习笔记&quot;&gt;&lt;a href=&quot;#Python学习笔记&quot; class=&quot;headerlink&quot; title=&quot;Python学习笔记&quot;&gt;&lt;/a&gt;Python学习笔记&lt;/h1&gt;&lt;h1 id=&quot;Python教程-廖雪峰的官方网站-liaoxuefeng-com</summary>
      
    
    
    
    <category term="Programming" scheme="http://example.com/categories/Programming/"/>
    
    
    <category term="Python" scheme="http://example.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>C-Study-1</title>
    <link href="http://example.com/2023/02/20/C-Study-1/"/>
    <id>http://example.com/2023/02/20/C-Study-1/</id>
    <published>2023-02-20T08:34:04.000Z</published>
    <updated>2023-08-07T11:03:00.836Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C-STUDY-1"><a href="#C-STUDY-1" class="headerlink" title="C-STUDY-1"></a>C-STUDY-1</h1><h2 id="一、指针"><a href="#一、指针" class="headerlink" title="一、指针"></a>一、指针</h2><h2 id="（-14条消息-C语言指针详解-经典-非常详细-liu100m的博客-CSDN博客-c语言指针用法详解）"><a href="#（-14条消息-C语言指针详解-经典-非常详细-liu100m的博客-CSDN博客-c语言指针用法详解）" class="headerlink" title="（(14条消息) C语言指针详解(经典,非常详细)_liu100m的博客-CSDN博客_c语言指针用法详解）"></a>（<a class="link" href="https://blog.csdn.net/liu100m/article/details/90731422?ops_request_misc=%7B%22request_id%22:%22167592955016800182737687%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167592955016800182737687&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-90731422-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E6%8C%87%E9%92%88&spm=1018.2226.3001.4187">(14条消息) C语言指针详解(经典,非常详细)_liu100m的博客-CSDN博客_c语言指针用法详解 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>）</h2><h3 id="1-指针类型的意义"><a href="#1-指针类型的意义" class="headerlink" title="1.指针类型的意义"></a>1.指针类型的意义</h3><p>指针类型决定了：指针解引用的权限有多大，以及“+1”时走的步长(int,4字节  char，1字节，因为只跳过一个字符)</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">int</span> arr[<span class="number">10</span>]={<span class="number">0</span>};</span><br><span class="line">    <span class="built_in">int</span>*p=arr;</span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)               //整形数据占<span class="number">4</span>字节，若换成 char*p则无法将arr中的元素全赋值为<span class="number">0</span></span><br><span class="line">    {</span><br><span class="line">        *(p+i)=<span class="number">0</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="built_in">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">    {</span><br><span class="line">        printf(<span class="string">"%d\n"</span>,arr[i]);</span><br><span class="line">    }</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>记得将指针初始化，若不知道则赋值为空指针</p><p>int*p=NULL;   //此时仍然无法赋值，因为NULL不属于个人</p><h3 id="2-指针的运算"><a href="#2-指针的运算" class="headerlink" title="2.指针的运算"></a>2.指针的运算</h3><p>指针-指针  得到的是两个指针间元素的个数  (前提是指针类型相同且指向同一空间)</p><p>指针+指针   无意义</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">int</span> arr[<span class="number">10</span>]={<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>};</span><br><span class="line">    printf(<span class="string">"%d\n"</span>,&amp;arr[<span class="number">9</span>]-&amp;arr[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="3-指针与数组"><a href="#3-指针与数组" class="headerlink" title="3.指针与数组"></a>3.指针与数组</h3><p>数组名是数组首元素的首地址</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line"></span><br><span class="line">{</span><br><span class="line"></span><br><span class="line">  <span class="built_in">int</span> arr[<span class="number">10</span>]={<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>};</span><br><span class="line"></span><br><span class="line">  printf(<span class="string">"%p"</span>,arr);   //等价于  printf(<span class="string">"%p"</span>,&amp;arr[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h3 id="4-二级指针"><a href="#4-二级指针" class="headerlink" title="4.二级指针"></a>4.二级指针</h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="built_in">int</span> main()</span><br><span class="line">{</span><br><span class="line">    <span class="built_in">int</span> a=<span class="number">7</span>;</span><br><span class="line">    <span class="built_in">int</span>*p=&amp;a;      //p是指针变量，一级指针</span><br><span class="line">    <span class="built_in">int</span>**pa=&amp;p;   //pa也是指针变量，二级指针   &amp;pa取出pa在内存中的起始地址</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>；</span><br><span class="line">}</span><br></pre></td></tr></table></figure></div><h2 id="二、文件"><a href="#二、文件" class="headerlink" title="二、文件"></a>二、文件</h2><p>(<a class="link" href="https://blog.csdn.net/ZJRUIII/article/details/120552735?ops_request_misc=%7B%22request_id%22:%22167621220216800211584148%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167621220216800211584148&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-120552735-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E6%96%87%E4%BB%B6&spm=1018.2226.3001.4187">(14条消息) C语言文件操作（含详细步骤）_zjruiiiiii的博客-CSDN博客_c语言文件操作 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p><h2 id="三、链表"><a href="#三、链表" class="headerlink" title="三、链表"></a>三、链表</h2><p>(<a class="link" href="https://blog.csdn.net/k666499436/article/details/124787990?ops_request_misc=%7B%22request_id%22:%22167621218716800186546589%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=167621218716800186546589&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-2-124787990-null-null.142%5Ev73%5Econtrol,201%5Ev4%5Eadd_ask,239%5Ev1%5Econtrol&utm_term=C%E8%AF%AD%E8%A8%80%E9%93%BE%E8%A1%A8&spm=1018.2226.3001.4187">(14条消息) C语言链表超详解_rivencode的博客-CSDN博客 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p><p>？</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;C-STUDY-1&quot;&gt;&lt;a href=&quot;#C-STUDY-1&quot; class=&quot;headerlink&quot; title=&quot;C-STUDY-1&quot;&gt;&lt;/a&gt;C-STUDY-1&lt;/h1&gt;&lt;h2 id=&quot;一、指针&quot;&gt;&lt;a href=&quot;#一、指针&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="Programming" scheme="http://example.com/categories/Programming/"/>
    
    
    <category term="C-study" scheme="http://example.com/tags/C-study/"/>
    
  </entry>
  
  <entry>
    <title>Hgame-2023-note</title>
    <link href="http://example.com/2023/01/17/Hgame-2023-note/"/>
    <id>http://example.com/2023/01/17/Hgame-2023-note/</id>
    <published>2023-01-17T11:16:36.000Z</published>
    <updated>2023-10-05T11:31:06.405Z</updated>
    
    <content type="html"><![CDATA[<h2 id="WEEK1"><a href="#WEEK1" class="headerlink" title="WEEK1"></a>WEEK1</h2><h3 id="RSA"><a href="#RSA" class="headerlink" title="RSA"></a>RSA</h3><p><strong>TASK：</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">open</span>(<span class="string">'flag.txt'</span>, <span class="string">'rb'</span>).read()</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"c=<span class="subst">{c}</span>"</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f"n=<span class="subst">{n}</span>"</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">c=110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line"><span class="string">n=135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></div><p><strong>WP：</strong></p><p>直接分解N，求解</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#HGAME-RSA</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2  </span><br><span class="line"></span><br><span class="line">n=<span class="number">135127138348299757374196447062640858416920350098320099993115949719051354213545596643216739555453946196078110834726375475981791223069451364024181952818056802089567064926510294124594174478123216516600368334763849206942942824711531334239106807454086389211139153023662266125937481669520771879355089997671125020789</span></span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">c=<span class="number">110674792674017748243232351185896019660434718342001686906527789876264976328686134101972125493938434992787002915562500475480693297360867681000092725583284616353543422388489208114545007138606543678040798651836027433383282177081034151589935024292017207209056829250152219183518400364871109559825679273502274955582</span></span><br><span class="line">p=<span class="number">11239134987804993586763559028187245057652550219515201768644770733869088185320740938450178816138394844329723311433549899499795775655921261664087997097294813</span></span><br><span class="line">q=<span class="number">12022912661420941592569751731802639375088427463430162252113082619617837010913002515450223656942836378041122163833359097910935638423464006252814266959128953</span></span><br><span class="line"></span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=gmpy2.invert(e,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br></pre></td></tr></table></figure></div><p><strong>flag:</strong>  <strong>hgame{factordb.com_is_strong!}</strong></p><h3 id="MORSE"><a href="#MORSE" class="headerlink" title="MORSE+"></a>MORSE+</h3><p><strong>Task:</strong></p><p>学校突然放假了，tr0uble正在开开心心的收拾东西准备回家，但是手机铃声突然响起，tr0uble接起电话，但是只听到滴答滴答的声音。努力学习密码学的tr0uble一听就知道这是什么，于是马上记录下来并花了亿点时间成功破译了，但是怎么看这都不像是人能看懂的，还没等tr0uble反应过来，又一通电话打来，依然是滴答滴答的声音。tr0uble想到兔兔也在学习密码学，于是不负责任地把密文都交给了兔兔，兔兔收到密文后随便看了一眼就不屑地说”这么简单都不会？自己解去，别耽误我抢车票”。 </p><p>Encrypted_message:</p><p>5Yeg5Liq5pif5pyf5YmN77yM5oiR5Lus5pS25Yiw5LiA5Liq56We56eY55qE5raI5oGv44CC5L2G5piv6L+Z5Liq5raI5oGv6KKr6YeN6YeN5Yqg5a+G77yM5oiR5Lus5LiN55+l6YGT5a6D55qE55yf5q2j5ZCr5LmJ5piv5LuA5LmI44CC5ZSv5LiA55+l6YGT55qE5L+h5oGv5piv5YWz5LqO5a+G6ZKl55qE77ya4oCc5Y+q5pyJ5YCS552A57+76L+H5Y2B5YWr5bGC55qE56+x56yG5omN6IO95oq16L6+5YyX5qyn56We6K+d55qE57uI54K54oCd44CC</p><p>base64解密后得到：</p><p>几个星期前，我们收到一个神秘的消息。但是这个消息被重重加密，我们不知道它的真正含义是什么。唯一知道的信息是关于密钥的：“只有倒着翻过十八层的篱笆才能抵达北欧神话的终点”。</p><p>使用Audacity解析Morse得到加密信息：</p><p>0223e_priibly__honwa_jmgh_fgkcqaoqtmfr</p><p>逆序：</p><p>rfmtqoaqckgf_hgmj_awnoh__ylbiirp_e3220</p><p><strong>W型栅栏密码：</strong></p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">generate_w</span>(<span class="params">string, n</span>): </span><br><span class="line">    <span class="string">'''将字符排列成w型'''</span></span><br><span class="line">    array = [[<span class="string">'.'</span>]*<span class="built_in">len</span>(string) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(n)] <span class="comment">#生成初始矩阵</span></span><br><span class="line">    row =<span class="number">0</span></span><br><span class="line">    upflag = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#在矩阵上按w型画出string</span></span><br><span class="line">        array[row][col] = string[col]</span><br><span class="line">        <span class="keyword">if</span> row == n-<span class="number">1</span>:</span><br><span class="line">            upflag = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">if</span> row == <span class="number">0</span>:</span><br><span class="line">            upflag = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> upflag:</span><br><span class="line">            row -= <span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            row += <span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> array</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">string, n</span>):</span><br><span class="line">    <span class="string">'''解密'''</span></span><br><span class="line">    array = generate_w(string, n)</span><br><span class="line">    sub = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n): <span class="comment">#将w型字符按行的顺序依次替换为string</span></span><br><span class="line">        <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">'.'</span>:</span><br><span class="line">                array[row][col] = string[sub]</span><br><span class="line">                sub += <span class="number">1</span></span><br><span class="line">    msg = []</span><br><span class="line">    <span class="keyword">for</span> col <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(string)): <span class="comment">#以列的顺序依次连接各字符</span></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> <span class="built_in">range</span>(n):</span><br><span class="line">            <span class="keyword">if</span> array[row][col] != <span class="string">'.'</span>:</span><br><span class="line">                msg.append(array[row][col])</span><br><span class="line">    <span class="keyword">return</span> array, msg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">crack_cipher</span>(<span class="params">string</span>):</span><br><span class="line">    <span class="keyword">for</span> n <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="built_in">len</span>(string)):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">str</span>(n)+<span class="string">'栏:'</span>+<span class="string">''</span>.join(decode(string,n)[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    string = <span class="string">"rfmtqoaqckgf_hgmj_awnoh__ylbiirp_e3220"</span></span><br><span class="line">    crack_cipher(string)</span><br><span class="line"><span class="comment">#18栏: rmocfhm_wo_ybipe2023_ril_hnajg_katfqqg</span></span><br></pre></td></tr></table></figure></div><p><strong>最后维吉尼亚密码解密：</strong></p><p>Key: vidar</p><p>x def phase5(n1, c1, n2, c2, n3, c3):    r = CRT([c1, c2, c3], [n1, n2, n3])    m = int(r)^(1/3)    print(hex(m)[2:])    n1 = 78642188663937191491235684351005990853149481644703243255021321296087539054265733392095095639539412823093600710316645130404423641473150336492175402885270861906530337207734106926328737198871118125840680572148601743121884788919989184318198417654263598170932154428514561079675550090698019678767738203477097731989c1 = 23419685303892339080979695469481275906709035609088426118328601771163101123641599051556995351678670765521269546319724616458499631461037359417701720430452076029312714313804716888119910334476982840024696320503747736428099717113471541651211596481005191146454458591558743268791485623924245960696651150688621664860n2 = 98174485544103863705821086588292917749386955237408645745685476234349659452606822650329076955303471252833860010724515777826660887118742978051231030080666542833950748806944312437614585352818344599399156268450521239843157288915059003487783576003027303399985723834248634230998110618288843582573006048070816520647c2 = 72080679612442543693944655041130370753964497034378634203383617624269927191363529233872659451561571441107920350406295389613006330637565645758727103723546610079332161151567096389071050158035757745766399510575237344950873632114050632573903701015749830874081198250578516967517980592506626547273178363503100507676n3 = 91638855323231795590642755267985988356764327384001022396221901964430032527111968159623063760057482761918901490239790230176524505469897183382928646349163030620342744192731246392941227433195249399795012672172947919435254998997253131826888070173526892674308708289629739522194864912899817994807268945141349669311c3 = 22149989692509889061584875630258740744292355239822482581889060656197919681655781672277545701325284646570773490123892626601106871432216449814891757715588851851459306683123591338089745675044763551335899599807235257516935037356212345033087798267959242561085752109746935300735969972249665700075907145744305255616​phase5(n1,c1,n2,c2,n3,c3)# 464c41477b325e3872736138633566336366663462633039353334396665633635666332323633653837387dpython</p><h3 id="Stream-Cipher"><a href="#Stream-Cipher" class="headerlink" title="Stream Cipher"></a>Stream Cipher</h3><p><strong>Task:</strong></p><p>很喜欢李小龙先生的一句话”Be water my friend”，但是这条小溪的水好像太多了。</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b"Be water"</span>, <span class="string">'big'</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b"my friend"</span>, <span class="string">'big'</span>)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b'\x1a\x15\x05\t\x17\tu"-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY'</span></span><br></pre></td></tr></table></figure></div><p><strong>wp:</strong></p><p>参考官方wp: 这道题给了⼤家⼀个跑不出来的程序，需要优化程序得到flag。优化⽅法还挺多的，预期是⽤矩阵快速幂的⽅法。</p><p>回到本题，根据递归函数可以得到stream的递推式 <em>S</em>[ <em>i</em> ] = 4 ∗ <em>S</em> [ <em>i</em> − 1] + 7 ∗ <em>S</em> [ <em>i</em> − 2]</p><p>类似于<strong>斐波那契数列</strong>，只不过增加了系数。 考虑⽤斐波那契矩阵和矩阵快速幂优化</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">enc = <span class="string">b'\x1a\x15\x05\t\x17\t\xf5\xa2-\x06\xec\xed\x01-\xc7\xcc2\x1eXA\x1c\x157[\x06\x13/!-\x0b\xd4\x91-\x06\x8b\xd4-\x1e+*\x15-pm\x1f\x17\x1bY'</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">a, b</span>):</span><br><span class="line">   c = [[<span class="number">0</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">0</span>]]</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">      <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">         <span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>):</span><br><span class="line">            c[i][j] += (a[i][k] * b[k][j]) % <span class="number">256</span></span><br><span class="line">            c[i][j] %= <span class="number">256</span></span><br><span class="line">   <span class="keyword">return</span> c</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">power</span>(<span class="params">n</span>):</span><br><span class="line">   <span class="keyword">if</span> n==<span class="number">1</span>: <span class="keyword">return</span> key[<span class="number">1</span>] % <span class="number">256</span></span><br><span class="line">   <span class="keyword">if</span> n==<span class="number">0</span>: <span class="keyword">return</span> key[<span class="number">0</span>] % <span class="number">256</span></span><br><span class="line">   res = [[<span class="number">1</span>, <span class="number">0</span>], [<span class="number">0</span>, <span class="number">1</span>]]</span><br><span class="line">   A = [[<span class="number">4</span>, <span class="number">7</span>], [<span class="number">1</span>, <span class="number">0</span>]]</span><br><span class="line">   <span class="keyword">while</span> n:</span><br><span class="line">      <span class="keyword">if</span> n &amp; <span class="number">1</span>: res = mul(A, res)</span><br><span class="line">      A = mul(A, A)</span><br><span class="line">      n &gt;&gt;= <span class="number">1</span></span><br><span class="line">   <span class="keyword">return</span> (res[<span class="number">1</span>][<span class="number">0</span>] * key[<span class="number">1</span>] + res[<span class="number">1</span>][<span class="number">1</span>] * key[<span class="number">0</span>]) % <span class="number">256</span></span><br><span class="line">flag = <span class="string">b''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(enc)):</span><br><span class="line">   water = power((i//<span class="number">2</span>)**<span class="number">6</span>)</span><br><span class="line">   flag += <span class="built_in">bytes</span>([water ^ enc[i]])</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag        <span class="comment">#flag未知</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">type</span>(flag) == <span class="built_in">bytes</span>   <span class="comment">#assert要求表达式的布尔值必须为真，说明flag的数据形式为bytes</span></span><br><span class="line"></span><br><span class="line">key = [<span class="built_in">int</span>.from_bytes(<span class="string">b"Be water"</span>, <span class="string">'big'</span>), <span class="built_in">int</span>.from_bytes(<span class="string">b"my friend"</span>, <span class="string">'big'</span>)]</span><br><span class="line"><span class="comment">#key=[4784265876259235186,2019423192753765707364]</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">stream</span>(<span class="params">i</span>):</span><br><span class="line">    <span class="keyword">if</span> i==<span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">0</span>]   <span class="comment">#key[0]=4784265876259235186</span></span><br><span class="line">    <span class="keyword">elif</span> i==<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> key[<span class="number">1</span>]   <span class="comment">#key[1]=2019423192753765707364</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> (stream(i-<span class="number">2</span>)*<span class="number">7</span> + stream(i-<span class="number">1</span>)*<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">enc = <span class="string">b""</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):   </span><br><span class="line">    water = stream((i//<span class="number">2</span>)**<span class="number">6</span>) % <span class="number">256</span>     <span class="comment">#地板除向下取整 114 110</span></span><br><span class="line">    enc += <span class="built_in">bytes</span>([water ^ flag[i]])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(enc)</span><br><span class="line"><span class="comment"># b'\x1a\x15\x05\t\x17\tu"-\x06lm\x01-\xc7\xcc2\x1eXA\x1c\x15\xb7\xdb\x06\x13\xaf\xa1-\x0b\xd4\x91-\x06\x8b\xd4-\x1e\xab\xaa\x15-\xf0\xed\x1f\x17\x1bY' </span></span><br><span class="line"></span><br></pre></td></tr></table></figure></div>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;WEEK1&quot;&gt;&lt;a href=&quot;#WEEK1&quot; class=&quot;headerlink&quot; title=&quot;WEEK1&quot;&gt;&lt;/a&gt;WEEK1&lt;/h2&gt;&lt;h3 id=&quot;RSA&quot;&gt;&lt;a href=&quot;#RSA&quot; class=&quot;headerlink&quot; title=&quot;RSA&quot;&gt;&lt;/</summary>
      
    
    
    
    
    <category term="CTF小试" scheme="http://example.com/tags/CTF%E5%B0%8F%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>SYC三面</title>
    <link href="http://example.com/2022/12/16/SYC/"/>
    <id>http://example.com/2022/12/16/SYC/</id>
    <published>2022-12-16T07:36:21.000Z</published>
    <updated>2023-07-26T10:40:35.690Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-对于Task代码注释的补齐"><a href="#1-对于Task代码注释的补齐" class="headerlink" title="1.对于Task代码注释的补齐"></a><em>1.对于Task代码注释的补齐</em></h2><h3 id="1-1-Task："><a href="#1-1-Task：" class="headerlink" title="1.1 Task："></a><em>1.1 <strong>Task：</strong></em></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">100</span>)    <span class="comment">#说明含义</span></span><br><span class="line">q = getPrime(<span class="number">100</span>)    <span class="comment">#说明含义</span></span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    <span class="comment">#说明含义</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)   <span class="comment">#说明含义</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:   <span class="comment">#说明含义</span></span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h3 id="1-2-注释与补齐："><a href="#1-2-注释与补齐：" class="headerlink" title="1.2 注释与补齐："></a><em>1.2 <strong>注释与补齐：</strong></em></h3><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag  <span class="comment">#flag未知</span></span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line"><span class="comment">#getPrime来自Crypto库中的Util.number模块，其作用是随机获得一个N比特位的素数，同时进行检验，确保正确性  </span></span><br><span class="line">p = getPrime(<span class="number">100</span>)   <span class="comment">#随机获得一个100比特位的素数，并将它的值赋值给p</span></span><br><span class="line">q = getPrime(<span class="number">100</span>)   <span class="comment">#随机获得一个100比特位的素数，并将它的值赋值给q</span></span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    <span class="comment">#将flag转为二进制数，获取从偏移为2到末尾的数，再历遍所有可能</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)   <span class="comment">#生成在1与n之间的整数x(1&lt;=x&lt;=n)</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:   <span class="comment">#引用gp.gcd函数，判断x与n是否互质</span></span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)  <span class="comment">#将c添加到clist列表末尾</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"></span><br><span class="line"><span class="comment">#给出n与若干组c的值</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure></div><h2 id="2-Paper‘s-notes"><a href="#2-Paper‘s-notes" class="headerlink" title="2.Paper‘s notes"></a><em>2.Paper‘s notes</em></h2><h3 id="2-1-关于数论："><a href="#2-1-关于数论：" class="headerlink" title="2.1 关于数论："></a><em>2.1 关于数论：</em></h3><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128155523295.png"                      alt="image-20221128155523295"                ></p><p><strong>论文中会自主定义一些乘法群、域</strong></p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128160020999.png"                      alt="image-20221128160020999" style="zoom:80%;"                 ><h3 id="2-2-中国剩余定理与二次剩余："><a href="#2-2-中国剩余定理与二次剩余：" class="headerlink" title="2.2 中国剩余定理与二次剩余："></a><em>2.2 中国剩余定理与二次剩余：</em></h3><h4 id="2-2-1-中国剩余定理："><a href="#2-2-1-中国剩余定理：" class="headerlink" title="2.2.1 中国剩余定理："></a><em>2.2.1 中国剩余定理：</em></h4><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128161638439.png"                      alt="image-20221128161638439" style="zoom:80%;"                 ><p><strong>中国剩余定理公式：</strong></p><blockquote><p>设正整数<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184134796"                      alt="img"                >两两互素，则同余方程组</p><p>​               <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184240203"                      alt="img"                ></p><p>有整数解。并且在模<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184354156"                      alt="img"                >下的解是唯一的，解为</p><p>​                <img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184502609"                      alt="img"                ></p><p>其中<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184601062"                      alt="img"                >，而<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184638140"                      alt="img"                >为<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140618184737359"                      alt="img"                >模<img                       lazyload                     src="/images/loading.svg"                     data-src="https://img-blog.csdn.net/20140904164235549"                      alt="img"                >的逆元。</p></blockquote><p><a class="link"   href="https://www.cnblogs.com/MashiroSky/p/5918158.html" >中国剩余定理学习笔记 - MashiroSky - 博客园 (cnblogs.com)<i class="fas fa-external-link-alt"></i></a></p><h4 id="2-2-2-二次剩余："><a href="#2-2-2-二次剩余：" class="headerlink" title="2.2.2 二次剩余："></a><em>2.2.2 二次剩余：</em></h4><h5 id="1-二次剩余定理："><a href="#1-二次剩余定理：" class="headerlink" title="1. 二次剩余定理："></a><em><strong>1. 二次剩余定理：</strong></em></h5><p>对于n和素数p来说，存在x使</p><p> 方程  x^2≡n(mod p)    </p><p>成立</p><h5 id="2-引入符号："><a href="#2-引入符号：" class="headerlink" title="2. 引入符号："></a><em>2. <strong>引入符号：</strong></em></h5><p>勒让德符号，这个符号里有两个值，一个是n,一个是p。假设p为奇素数，且n无法整除p时，有以下定义</p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128164649412.png"                      alt="image-20221128164649412"                ></p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128164748783.png"                      alt="image-20221128164748783" style="zoom:80%;"                 ><p><strong>类似于paper中的雅可比符号</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128171832142.png"                      alt="image-20221128171832142"                ></p><h5 id="3-证明："><a href="#3-证明：" class="headerlink" title="3. 证明："></a><em>3. 证明：</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128165544913.png"                      alt="image-20221128165544913"                ></p><p><a class="link"   href="https://blog.csdn.net/weixin_44203780/article/details/104634637" >(5条消息) 二次剩余定理详解_gerayking的博客-CSDN博客_二次剩余定理<i class="fas fa-external-link-alt"></i></a></p><h3 id="2-3-笔记整理："><a href="#2-3-笔记整理：" class="headerlink" title="2.3 笔记整理："></a><em>2.3 笔记整理：</em></h3><h4 id="2-3-1-算法："><a href="#2-3-1-算法：" class="headerlink" title="2.3.1 算法："></a><em><strong>2.3.1 算法：</strong></em></h4><h5 id="1-判断x是否为二次剩余"><a href="#1-判断x是否为二次剩余" class="headerlink" title="1. 判断x是否为二次剩余"></a><em><strong>1. 判断x是否为二次剩余</strong></em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128222232986.png"                      alt="image-20221128222232986" style="zoom:80%;"                 ><h5 id="2-用N已知的因子p、q判断模N下数x是否为二次剩余"><a href="#2-用N已知的因子p、q判断模N下数x是否为二次剩余" class="headerlink" title="2. 用N已知的因子p、q判断模N下数x是否为二次剩余"></a><em><strong>2. 用N已知的因子p、q判断模N下数x是否为二次剩余</strong></em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128222558921.png"                      alt="image-20221128222558921" style="zoom:80%;"                 ><h5 id="3-已知条件"><a href="#3-已知条件" class="headerlink" title="3. 已知条件"></a><em>3. 已知条件</em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128232726545.png"                      alt="image-20221128232726545" style="zoom:80%;"                 ><h5 id="4-加密算法"><a href="#4-加密算法" class="headerlink" title="4. 加密算法"></a><em>4. 加密算法</em></h5><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128233704272.png"                      alt="image-20221128233704272" style="zoom:80%;"                 ><h5 id="5-解密算法"><a href="#5-解密算法" class="headerlink" title="5. 解密算法"></a><em>5. 解密算法</em></h5><p>由于接收者已知私钥：p、q，他就不需要另外单独的解密算法，通过判断c是否为二次剩余，他就可以知道密文为0还是1。</p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234457449.png"                      alt="image-20221128234457449" style="zoom:80%;"                 ><h4 id="2-3-2-命题："><a href="#2-3-2-命题：" class="headerlink" title="2.3.2 命题："></a><em>2.3.2 命题：</em></h4><h5 id="1-二次剩余"><a href="#1-二次剩余" class="headerlink" title="1. 二次剩余"></a><em><strong>1. 二次剩余</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234820942.png"                      alt="image-20221128234820942"                ></p><h5 id="2-雅可比符号"><a href="#2-雅可比符号" class="headerlink" title="2. 雅可比符号"></a><em><strong>2. 雅可比符号</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234849165.png"                      alt="image-20221128234849165"                ></p><h5 id="3-雅可比乘法性质"><a href="#3-雅可比乘法性质" class="headerlink" title="3. 雅可比乘法性质"></a><em><strong>3. 雅可比乘法性质</strong></em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128234920652.png"                      alt="image-20221128234920652"                ></p><h5 id="4-二次剩余的复合运算"><a href="#4-二次剩余的复合运算" class="headerlink" title="4. 二次剩余的复合运算"></a><em><strong>4.</strong> 二次剩余的复合运算</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235001930.png"                      alt="image-20221128235001930"                ></p><h5 id="5-二次剩余与雅可比的分布"><a href="#5-二次剩余与雅可比的分布" class="headerlink" title="5. 二次剩余与雅可比的分布"></a><em>5. 二次剩余与雅可比的分布</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235046610.png"                      alt="image-20221128235046610"                ></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235104749.png"                      alt="image-20221128235104749"                ></p><h5 id="6-雅可比的复合运算"><a href="#6-雅可比的复合运算" class="headerlink" title="6. 雅可比的复合运算"></a><em>6. 雅可比的复合运算</em></h5><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221128235142046.png"                      alt="image-20221128235142046"                ></p><h2 id="3-Task解题"><a href="#3-Task解题" class="headerlink" title="3. Task解题"></a><em>3. Task解题</em></h2><h4 id="3-1-题目模型："><a href="#3-1-题目模型：" class="headerlink" title="3.1 题目模型："></a><em>3.1 题目模型：</em></h4><p>本task的模型是 <strong>Goldwasser-Micali Cryprosystem</strong>，即GM公钥加密系统</p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221129005320790.png"                      alt="image-20221129005320790" style="zoom:80%;"                 ><h4 id="3-2解题思路："><a href="#3-2解题思路：" class="headerlink" title="3.2解题思路："></a><em>3.2解题思路：</em></h4><h5 id="3-2-1-题目分析："><a href="#3-2-1-题目分析：" class="headerlink" title="3.2.1 题目分析："></a><em>3.2.1 题目分析：</em></h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> getPrime, bytes_to_long, long_to_bytes</span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">100</span>)   </span><br><span class="line">q = getPrime(<span class="number">100</span>)    </span><br><span class="line">n = p * q</span><br><span class="line">clist = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)  </span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:  </span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(clist)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line"><span class="string">[112490766735794793494258589897687977797993914062877995369853, 423825989606899409733986824741778284626898537704684650054048, 1239912440099782777043012567198356769914426423982980091061342, 1078272043845620437375344423460688188703277391763226546180151, 159286594418951337823608883690981934876156746053051292254402, 189434397083734065502133592439774066008070864031834709620441, 264105932521685455831442874483122006851812174082486446496525, 252479590298382195780257510632414277760400686563367629394825, 34602153293813328946647556336715300088648653636913843351330, 808692976248223555967993480457680585654329233137701900525232, 836623390705731389723338030121423143060093415003999783847569, 1218829648463542488706300570862499177531816513847669694517865, 571795296699927140597629733281737316938588378300113684751321, 324408602401500017634991400429058861929441907523133040616718, 652309276856121062936275131393396513436481452168222192943617, 135368324264829776566203256490111602190045577103623626459391, 677807894471260530035795635544578014296111908610448488780236, 1135708831589387209825610411788217272141435421502826225558333, 196882176169680492388044653063809988445336200851553236565493, 1130705847039352086713022625138307016610235729598245321418537, 974627899979016730650505688458957247745733629797568884460037, 948987355716018600108888773982169186615279073844787201014331, 364200727831752453880724784142441918092136276002472196567297, 811786724825671349602848333002825903390189436235744947667153, 248544601758659627780643527412918707686666534454807514221527, 1078860601713092925823762998344218082511712606733279204236487, 634851505432770176888905188832078431577879067601938324607512, 232972021265122845242665536151391828176473610240017058444456, 1080796896535347345799923528377657622102130648424673730618155, 622059452832122796944248249707923610120342427983134655552340, 837257289852652447556360719449396492271622453092839975184158, 626327369687614106133688347844033161113612134573404258486630, 1233019194503373412608053469954621323121044455057773900406773, 912564467902216938034173803480737819092198560216579817988291, 408076399689155479697691914877522087726703540593136498587215, 1118745562641959211267518507476218888452509349041078337285098, 1103228775032586830415033772993541541820163005491285279882940, 680899077364553221002722115625274809744677788062477442312086, 355349436487753936000721704075588637048102593449252106813298, 5254361838244723184679801326407268664182654715017847086461, 480145671282471097574354032682584083826945502763658946101104, 249136810947175342894562520096603076879372702701088690594445, 175216547555975039599856545426098941943382367602172941744494, 436310864447848960706296122266108102033486860525693191197797, 342620466614509535208918527767209905005823047382938223113086, 369848992268737575958936185907214270590887322936419642815242, 278575045025661827978388874494219837629182438978526195181637, 1189171180780533071473125545247289861677955100195126109964590, 256190182678715266654387215899616014762531664768736561586327, 719160215933023695898776016718481385742508618676368640641809, 147033122794177086112261858085593706727904275426698884436011, 247466503394960387825735598976068779045757078494832316444804, 787155643450160361724955357286670519256662665704845721250609, 112101120505278148126370035869523081506090979629681063614381, 890009544685851814191758439205974159586245412054287515881584, 1168625756997945588141764967298286550498540363325170551587334, 946031342434770434479581499217378781992921204179509449159996, 759124753621557368233069144948668001126536400499520990700641, 930584421635842804698880452391670787414151645249729141739148, 140981825203074314092967178062754008486703246602401550271041, 880126454149733441805446179826584472107299085899567279467558, 510129631452465708304688340114214360026947205003705062663759, 857274757020001316639221394675820731579775247610619594760511, 444486969413575687285961819261097401974268741167841964919716, 645830958128126799221416466698967430939726760487764050203821, 128864469762235652994228226148325614187747349331618451490354, 732913002124581119538173953534485652651112140400076340646452, 1245672039639609341331477592944058028011275464117654972595670, 1160765030758624190775369713232721901616189349905945190302338, 745734132091942990384796294800038299023052878196943617322617, 34973161572808799782240527358912894045293050940490682156733, 507586651070816931641904112686082840821460472219390068396982, 359195216122538975934588740641220005777478961423841727365432, 60506687352654743312206686911057762445232526009857863834444, 402036521271253699065227780662896890228371046068283711170220, 465427226677337673103293964961886503610313835775181975449721, 925246962888172144515172444374190859841851825972285013006527, 542176614893876361668218387162168517498644799220587472896002, 852215132196560596695876248813488364201491362280912035912061, 945548964927065532651141821562204387565145712002346337639711, 736943822066388892909878515650831955490636214039062998720510, 766357526983761241394182000478355475617711906398422036954152, 77156525593382594092608158744099524034892127423492520631820, 562562817542804973601572838378263130638457829485887327130286, 768093992370198202822524520006977816845162154854939167515517, 1099957424762490943973557935337350760135180754563993547358098, 698816668614997174913438496891169625976027534942525487303513, 417641699919584202170293946436276552973997395211792288687960, 1006229610175567855209117721408416419896921240126676949824724, 4206431689326446028142220658552064336105749936096602165359, 893846509909828693967573302731018066461118006150050253703744, 878425189026235350891203121924637130803808920422558040493294, 730047416245095988472212050949689633327186823542036387345181, 648095719945750715387983948406690533087473721929975873848169, 213513454359755001454814601053555627585345770061082141021326, 350001050012957205656929492039628823072469208940960439158263, 1016858635000037892730835311903706149371704230428070443107320, 1040987439471207869975679257301693610464700899302787643642354, 1194690615352550474729309715449838057220521596135246725909553, 508165053077110820797186371383859674371399129952105597675096, 266494438294281492504556232035584920066331725618646155019547, 28469482072427012244441092412738741355431846649166066368980, 790175775999108776289865518368056397969387298334297622465909, 590581138260907253939363764832940322585129285968275409510634, 221909012579985462013325803334419731308959816500415305934495, 1063780559219791515938747204569742799329237935871594345400252, 977747525495509380693721486866821791065499754056415279744653, 346306061371595730004513789139807509540063462412619321003626, 456103179467597859705969406860196938169100856240100927540401, 969300078509189631808517876996065933181606409375207150288464, 1029806631220370012120597683927351131622576733031694535189521, 344896431603140401163996810922500893279239069499717183710501, 430000423804197030568046280589772094106128395099434235915031, 700179843567016021775399107572964843751703290591400960796112, 961227906080189143689698720420426659986080298413605666115640, 607209606799750473714271393200060455739097869884727178692312, 106958847163040842225140399905505511449479709017540851084532, 953369942103273809257762268859167463617831445026988544378658, 428269440686506672744282327102546440435442014650795927162711, 56621803434665963032193024056111306570802155743250152849716, 800707635631355839166448276143596444307614901816577459076131, 1032256515703247765067950588859299047987257001987777631061065, 813725055801254665600156259482200403981770576173968929131487, 940024839745068011043019236327963504645352520797347949823455, 1065005324140908547287467504568283884363143527586278243210801, 1087828777506290663525994551834233065465427418753806182842291, 668387132001968449612224853010931354244797738682007519611989, 563185246196177998134932666270526715161378776103340983046580, 148292872313931508344196679476720973752571125303712466045656, 413889563851226543249984374872220761253120628252088546262699, 853542105910386365929770611480736086723126396438880650918917, 59730458840715910492468261806200793684923819793480597554146, 792260492800286127199649276659137441324248689470594987965190, 753608630500639136668081531883097047491651258191552267413126, 33514911499472634865669915075769163328171019557849259474018, 634963859228206842307837566519244534650818456901841184879977, 219354096455968590219445072777282329948785844491217770978344, 1123377226439583158729762969668999276741275445803396272436031, 357765295513680388973981712560200525235334734759663454993805, 385868499980630535766019957877752149506518574529845752144666, 138578212294299392480319417966870656714476525885983752756188, 1110526796192425688386237355263892073046060477008920073455044, 244699783645221387947312903861559688207612147588246639081699, 583209905862562678600202085212425597809036630416117298854978, 1207854793808762194414317661151529169444903662139065050090746, 1127506983223466275821900811940356395242309493951089427884032, 526185119576631048584313761548704536031634598332129570964689, 266882032196696984660521486449809902101615921156569537960109, 1188118705564450461919200724390473040524626320052324478509883, 682831747455078454647149830819696088960233603851250102828667, 669419928942561433130809268138650695825596612075801278942980, 1077750630919867687880983437504767304166615787212813240073843, 486023540111308483450127320955599047045479654684477043315645, 409429366346146233850088863324915025465847596238000661872172, 779883595226131237594759409249289551033410304517183865388408, 1155872225708857920911178110668279174877878422508206228579940, 411063490066038942009369947241345843238439795078686488373864, 1243453053541946030699872676712518536022061850799945414120045, 871711034820169700581685353768658469631429266493677466057997, 601920686459160120670719526703980120744719013393032353678765, 329932100141177850249406090412821976994089707958551194468769, 558327299751202100333335353826111016492585371503632197870640, 113444032302978611299580451314055133491399096282744687816086, 152525914892717139057165748051966776217223953242540511499945, 965404850400527912039904270871065001313018148780552532312669, 313557099445185696402013375071955475516203519824979749629786, 952254159335810337756614972813240144837526566801182319987154]</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure></div><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">bin</span>(flag)[<span class="number">2</span>:]:    </span><br><span class="line">    <span class="comment">#历遍转化为二进制数的flag，即逐位获得flag的二进制位</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        x = random.randint(<span class="number">1</span>, n)  </span><br><span class="line">        <span class="comment">#在（1，n）的范围内随机选择用于加密信息的x</span></span><br><span class="line">        <span class="keyword">if</span> gp.gcd(x, n) == <span class="number">1</span>:  </span><br><span class="line">            c = (<span class="built_in">pow</span>(<span class="number">3</span>, <span class="built_in">int</span>(i) + x * <span class="number">2</span>, n) * x**<span class="number">2</span>) % n     </span><br><span class="line">            clist.append(c)</span><br><span class="line">            <span class="keyword">break</span></span><br></pre></td></tr></table></figure></div><p>我们观察到本task的模型是 <strong>Goldwasser-Micali Cryprosystem</strong>，c的加密方式也已经给出，并且在clist数组内列出了每个c的值。</p><p>c是这样加密的：c&#x3D;(3^(int(i)+2x)*x^2)%n </p><p>仔细观察上式，发现当i&#x3D;0时情况特殊。若i&#x3D;0,则c&#x3D;(3^x*x)^2%n</p><p>而此时c是模n的二次剩余。</p><p>$$<br>总结一下，当c是模n的二次剩余，即J_n(c)&#x3D;1时，i&#x3D;0<br>$$</p><p>$$<br>那么相反，当c是模n的非二次剩余，即J_n(c)&#x3D;-1时，i&#x3D;1<br>$$</p><h5 id="3-2-2-破解流程："><a href="#3-2-2-破解流程：" class="headerlink" title="3.2.2 破解流程："></a><em>3.2.2 破解流程：</em></h5><p>我们先列出已知条件，即n与clist中若干组加密的c的值</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n=<span class="number">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line">clist=[<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span> ]</span><br><span class="line"></span><br></pre></td></tr></table></figure></div><p>通过分析，我们发现能够在仅知道公钥n的条件下，通过jacobi判断c是否为二次剩余对flag进行还原。</p><p>攻击设计如下</p><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#历遍给出的若干组c</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> clist:   </span><br><span class="line"><span class="comment">#判断“二次剩余”，逐个还原flag的二进制数</span></span><br><span class="line"><span class="keyword">if</span> gp.jacobi(c,n)==<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">if</span>  gp.jacobi(c,n)==-<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;1&#x27;</span></span><br></pre></td></tr></table></figure></div><h5 id="3-2-3-攻击脚本："><a href="#3-2-3-攻击脚本：" class="headerlink" title="3.2.3 攻击脚本："></a><em>3.2.3 攻击脚本：</em></h5><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#GM脚本</span></span><br><span class="line"><span class="keyword">import</span> gmpy2 <span class="keyword">as</span> gp</span><br><span class="line"><span class="keyword">from</span> libnum <span class="keyword">import</span>*</span><br><span class="line"></span><br><span class="line">n=<span class="number">1254676922968308054473282588201432441748387886551758353389559</span></span><br><span class="line">clist=[<span class="number">112490766735794793494258589897687977797993914062877995369853</span>, <span class="number">423825989606899409733986824741778284626898537704684650054048</span>, <span class="number">1239912440099782777043012567198356769914426423982980091061342</span>, <span class="number">1078272043845620437375344423460688188703277391763226546180151</span>, <span class="number">159286594418951337823608883690981934876156746053051292254402</span>, <span class="number">189434397083734065502133592439774066008070864031834709620441</span>, <span class="number">264105932521685455831442874483122006851812174082486446496525</span>, <span class="number">252479590298382195780257510632414277760400686563367629394825</span>, <span class="number">34602153293813328946647556336715300088648653636913843351330</span>, <span class="number">808692976248223555967993480457680585654329233137701900525232</span>, <span class="number">836623390705731389723338030121423143060093415003999783847569</span>, <span class="number">1218829648463542488706300570862499177531816513847669694517865</span>, <span class="number">571795296699927140597629733281737316938588378300113684751321</span>, <span class="number">324408602401500017634991400429058861929441907523133040616718</span>, <span class="number">652309276856121062936275131393396513436481452168222192943617</span>, <span class="number">135368324264829776566203256490111602190045577103623626459391</span>, <span class="number">677807894471260530035795635544578014296111908610448488780236</span>, <span class="number">1135708831589387209825610411788217272141435421502826225558333</span>, <span class="number">196882176169680492388044653063809988445336200851553236565493</span>, <span class="number">1130705847039352086713022625138307016610235729598245321418537</span>, <span class="number">974627899979016730650505688458957247745733629797568884460037</span>, <span class="number">948987355716018600108888773982169186615279073844787201014331</span>, <span class="number">364200727831752453880724784142441918092136276002472196567297</span>, <span class="number">811786724825671349602848333002825903390189436235744947667153</span>, <span class="number">248544601758659627780643527412918707686666534454807514221527</span>, <span class="number">1078860601713092925823762998344218082511712606733279204236487</span>, <span class="number">634851505432770176888905188832078431577879067601938324607512</span>, <span class="number">232972021265122845242665536151391828176473610240017058444456</span>, <span class="number">1080796896535347345799923528377657622102130648424673730618155</span>, <span class="number">622059452832122796944248249707923610120342427983134655552340</span>, <span class="number">837257289852652447556360719449396492271622453092839975184158</span>, <span class="number">626327369687614106133688347844033161113612134573404258486630</span>, <span class="number">1233019194503373412608053469954621323121044455057773900406773</span>, <span class="number">912564467902216938034173803480737819092198560216579817988291</span>, <span class="number">408076399689155479697691914877522087726703540593136498587215</span>, <span class="number">1118745562641959211267518507476218888452509349041078337285098</span>, <span class="number">1103228775032586830415033772993541541820163005491285279882940</span>, <span class="number">680899077364553221002722115625274809744677788062477442312086</span>, <span class="number">355349436487753936000721704075588637048102593449252106813298</span>, <span class="number">5254361838244723184679801326407268664182654715017847086461</span>, <span class="number">480145671282471097574354032682584083826945502763658946101104</span>, <span class="number">249136810947175342894562520096603076879372702701088690594445</span>, <span class="number">175216547555975039599856545426098941943382367602172941744494</span>, <span class="number">436310864447848960706296122266108102033486860525693191197797</span>, <span class="number">342620466614509535208918527767209905005823047382938223113086</span>, <span class="number">369848992268737575958936185907214270590887322936419642815242</span>, <span class="number">278575045025661827978388874494219837629182438978526195181637</span>, <span class="number">1189171180780533071473125545247289861677955100195126109964590</span>, <span class="number">256190182678715266654387215899616014762531664768736561586327</span>, <span class="number">719160215933023695898776016718481385742508618676368640641809</span>, <span class="number">147033122794177086112261858085593706727904275426698884436011</span>, <span class="number">247466503394960387825735598976068779045757078494832316444804</span>, <span class="number">787155643450160361724955357286670519256662665704845721250609</span>, <span class="number">112101120505278148126370035869523081506090979629681063614381</span>, <span class="number">890009544685851814191758439205974159586245412054287515881584</span>, <span class="number">1168625756997945588141764967298286550498540363325170551587334</span>, <span class="number">946031342434770434479581499217378781992921204179509449159996</span>, <span class="number">759124753621557368233069144948668001126536400499520990700641</span>, <span class="number">930584421635842804698880452391670787414151645249729141739148</span>, <span class="number">140981825203074314092967178062754008486703246602401550271041</span>, <span class="number">880126454149733441805446179826584472107299085899567279467558</span>, <span class="number">510129631452465708304688340114214360026947205003705062663759</span>, <span class="number">857274757020001316639221394675820731579775247610619594760511</span>, <span class="number">444486969413575687285961819261097401974268741167841964919716</span>, <span class="number">645830958128126799221416466698967430939726760487764050203821</span>, <span class="number">128864469762235652994228226148325614187747349331618451490354</span>, <span class="number">732913002124581119538173953534485652651112140400076340646452</span>, <span class="number">1245672039639609341331477592944058028011275464117654972595670</span>, <span class="number">1160765030758624190775369713232721901616189349905945190302338</span>, <span class="number">745734132091942990384796294800038299023052878196943617322617</span>, <span class="number">34973161572808799782240527358912894045293050940490682156733</span>, <span class="number">507586651070816931641904112686082840821460472219390068396982</span>, <span class="number">359195216122538975934588740641220005777478961423841727365432</span>, <span class="number">60506687352654743312206686911057762445232526009857863834444</span>, <span class="number">402036521271253699065227780662896890228371046068283711170220</span>, <span class="number">465427226677337673103293964961886503610313835775181975449721</span>, <span class="number">925246962888172144515172444374190859841851825972285013006527</span>, <span class="number">542176614893876361668218387162168517498644799220587472896002</span>, <span class="number">852215132196560596695876248813488364201491362280912035912061</span>, <span class="number">945548964927065532651141821562204387565145712002346337639711</span>, <span class="number">736943822066388892909878515650831955490636214039062998720510</span>, <span class="number">766357526983761241394182000478355475617711906398422036954152</span>, <span class="number">77156525593382594092608158744099524034892127423492520631820</span>, <span class="number">562562817542804973601572838378263130638457829485887327130286</span>, <span class="number">768093992370198202822524520006977816845162154854939167515517</span>, <span class="number">1099957424762490943973557935337350760135180754563993547358098</span>, <span class="number">698816668614997174913438496891169625976027534942525487303513</span>, <span class="number">417641699919584202170293946436276552973997395211792288687960</span>, <span class="number">1006229610175567855209117721408416419896921240126676949824724</span>, <span class="number">4206431689326446028142220658552064336105749936096602165359</span>, <span class="number">893846509909828693967573302731018066461118006150050253703744</span>, <span class="number">878425189026235350891203121924637130803808920422558040493294</span>, <span class="number">730047416245095988472212050949689633327186823542036387345181</span>, <span class="number">648095719945750715387983948406690533087473721929975873848169</span>, <span class="number">213513454359755001454814601053555627585345770061082141021326</span>, <span class="number">350001050012957205656929492039628823072469208940960439158263</span>, <span class="number">1016858635000037892730835311903706149371704230428070443107320</span>, <span class="number">1040987439471207869975679257301693610464700899302787643642354</span>, <span class="number">1194690615352550474729309715449838057220521596135246725909553</span>, <span class="number">508165053077110820797186371383859674371399129952105597675096</span>, <span class="number">266494438294281492504556232035584920066331725618646155019547</span>, <span class="number">28469482072427012244441092412738741355431846649166066368980</span>, <span class="number">790175775999108776289865518368056397969387298334297622465909</span>, <span class="number">590581138260907253939363764832940322585129285968275409510634</span>, <span class="number">221909012579985462013325803334419731308959816500415305934495</span>, <span class="number">1063780559219791515938747204569742799329237935871594345400252</span>, <span class="number">977747525495509380693721486866821791065499754056415279744653</span>, <span class="number">346306061371595730004513789139807509540063462412619321003626</span>, <span class="number">456103179467597859705969406860196938169100856240100927540401</span>, <span class="number">969300078509189631808517876996065933181606409375207150288464</span>, <span class="number">1029806631220370012120597683927351131622576733031694535189521</span>, <span class="number">344896431603140401163996810922500893279239069499717183710501</span>, <span class="number">430000423804197030568046280589772094106128395099434235915031</span>, <span class="number">700179843567016021775399107572964843751703290591400960796112</span>, <span class="number">961227906080189143689698720420426659986080298413605666115640</span>, <span class="number">607209606799750473714271393200060455739097869884727178692312</span>, <span class="number">106958847163040842225140399905505511449479709017540851084532</span>, <span class="number">953369942103273809257762268859167463617831445026988544378658</span>, <span class="number">428269440686506672744282327102546440435442014650795927162711</span>, <span class="number">56621803434665963032193024056111306570802155743250152849716</span>, <span class="number">800707635631355839166448276143596444307614901816577459076131</span>, <span class="number">1032256515703247765067950588859299047987257001987777631061065</span>, <span class="number">813725055801254665600156259482200403981770576173968929131487</span>, <span class="number">940024839745068011043019236327963504645352520797347949823455</span>, <span class="number">1065005324140908547287467504568283884363143527586278243210801</span>, <span class="number">1087828777506290663525994551834233065465427418753806182842291</span>, <span class="number">668387132001968449612224853010931354244797738682007519611989</span>, <span class="number">563185246196177998134932666270526715161378776103340983046580</span>, <span class="number">148292872313931508344196679476720973752571125303712466045656</span>, <span class="number">413889563851226543249984374872220761253120628252088546262699</span>, <span class="number">853542105910386365929770611480736086723126396438880650918917</span>, <span class="number">59730458840715910492468261806200793684923819793480597554146</span>, <span class="number">792260492800286127199649276659137441324248689470594987965190</span>, <span class="number">753608630500639136668081531883097047491651258191552267413126</span>, <span class="number">33514911499472634865669915075769163328171019557849259474018</span>, <span class="number">634963859228206842307837566519244534650818456901841184879977</span>, <span class="number">219354096455968590219445072777282329948785844491217770978344</span>, <span class="number">1123377226439583158729762969668999276741275445803396272436031</span>, <span class="number">357765295513680388973981712560200525235334734759663454993805</span>, <span class="number">385868499980630535766019957877752149506518574529845752144666</span>, <span class="number">138578212294299392480319417966870656714476525885983752756188</span>, <span class="number">1110526796192425688386237355263892073046060477008920073455044</span>, <span class="number">244699783645221387947312903861559688207612147588246639081699</span>, <span class="number">583209905862562678600202085212425597809036630416117298854978</span>, <span class="number">1207854793808762194414317661151529169444903662139065050090746</span>, <span class="number">1127506983223466275821900811940356395242309493951089427884032</span>, <span class="number">526185119576631048584313761548704536031634598332129570964689</span>, <span class="number">266882032196696984660521486449809902101615921156569537960109</span>, <span class="number">1188118705564450461919200724390473040524626320052324478509883</span>, <span class="number">682831747455078454647149830819696088960233603851250102828667</span>, <span class="number">669419928942561433130809268138650695825596612075801278942980</span>, <span class="number">1077750630919867687880983437504767304166615787212813240073843</span>, <span class="number">486023540111308483450127320955599047045479654684477043315645</span>, <span class="number">409429366346146233850088863324915025465847596238000661872172</span>, <span class="number">779883595226131237594759409249289551033410304517183865388408</span>, <span class="number">1155872225708857920911178110668279174877878422508206228579940</span>, <span class="number">411063490066038942009369947241345843238439795078686488373864</span>, <span class="number">1243453053541946030699872676712518536022061850799945414120045</span>, <span class="number">871711034820169700581685353768658469631429266493677466057997</span>, <span class="number">601920686459160120670719526703980120744719013393032353678765</span>, <span class="number">329932100141177850249406090412821976994089707958551194468769</span>, <span class="number">558327299751202100333335353826111016492585371503632197870640</span>, <span class="number">113444032302978611299580451314055133491399096282744687816086</span>, <span class="number">152525914892717139057165748051966776217223953242540511499945</span>, <span class="number">965404850400527912039904270871065001313018148780552532312669</span>, <span class="number">313557099445185696402013375071955475516203519824979749629786</span>, <span class="number">952254159335810337756614972813240144837526566801182319987154</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> clist:</span><br><span class="line"><span class="keyword">if</span> gp.jacobi(c,n)==<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;0&#x27;</span></span><br><span class="line"><span class="keyword">if</span>  gp.jacobi(c,n)==-<span class="number">1</span>:</span><br><span class="line">flag+=<span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag二进制:&#x27;</span>,flag)</span><br><span class="line"><span class="comment">#二进制转化成十进制</span></span><br><span class="line">f=<span class="built_in">int</span>(flag,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;flag十进制:&#x27;</span>,f)</span><br><span class="line"><span class="built_in">print</span>(n2s(f))</span><br></pre></td></tr></table></figure></div><p><strong>运行结果：</strong></p><p><img                       lazyload                     src="/images/loading.svg"                     data-src="C:\Users\张正昊\AppData\Roaming\Typora\typora-user-images\image-20221130000543407.png"                      alt="image-20221130000543407"                ></p><p><em>顺利得到flag：</em></p><p><strong>SYC{run_to_the_light}</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;1-对于Task代码注释的补齐&quot;&gt;&lt;a href=&quot;#1-对于Task代码注释的补齐&quot; class=&quot;headerlink&quot; title=&quot;1.对于Task代码注释的补齐&quot;&gt;&lt;/a&gt;&lt;em&gt;1.对于Task代码注释的补齐&lt;/em&gt;&lt;/h2&gt;&lt;h3 id=&quot;1-1-</summary>
      
    
    
    
    
    <category term="面试小结" scheme="http://example.com/tags/%E9%9D%A2%E8%AF%95%E5%B0%8F%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://example.com/2022/12/16/hello-world/"/>
    <id>http://example.com/2022/12/16/hello-world/</id>
    <published>2022-12-16T03:48:54.740Z</published>
    <updated>2022-12-16T03:48:54.740Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo<i class="fas fa-external-link-alt"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation<i class="fas fa-external-link-alt"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting<i class="fas fa-external-link-alt"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub<i class="fas fa-external-link-alt"></i></a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing<i class="fas fa-external-link-alt"></i></a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server<i class="fas fa-external-link-alt"></i></a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating<i class="fas fa-external-link-alt"></i></a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div><p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment<i class="fas fa-external-link-alt"></i></a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a class=&quot;link&quot;   href=&quot;https://hexo.io/&quot; &gt;Hexo&lt;i class=&quot;fas fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/a&gt;! This is your very first post. Che</summary>
      
    
    
    
    
  </entry>
  
</feed>
